{
  "swagger" : "2.0",
  "info" : {
    "title" : "Plixus ERS API 1.0",
    "description" : "REST API for the Embedded Room Server on the CU.\n\n# Introduction\n\nHere comes a small introduction text about the API\n",
    "version" : "1.0",
    "x-logo" : {
      "url" : "https://www.televic.com/themes/televic/images/logos/televic-group.svg",
      "altText" : "Televic logo"
    }
  },
  "host" : "localhost:9111",
  "schemes" : [ "http" ],
  "paths" : {
    "/api/events/intercom/conversationrequested" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an intercom conversation was requested",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom request event",
            "schema" : {
              "$ref" : "#/definitions/ConversationRequested"
            }
          }
        }
      }
    },
    "/api/events/intercom/conversationaccepted" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a seat has accepted an intercom request",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom accept event",
            "schema" : {
              "$ref" : "#/definitions/ConversationAccepted"
            }
          }
        }
      }
    },
    "/api/events/intercom/conversationended" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an intercom conversation has ended",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom end event",
            "schema" : {
              "$ref" : "#/definitions/ConversationEnded"
            }
          }
        }
      }
    },
    "/api/events/intercom/conversationcanceled" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an intercom conversation was canceled",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom end event",
            "schema" : {
              "$ref" : "#/definitions/ConversationCanceled"
            }
          }
        }
      }
    },
    "/api/events/intercom/enabled" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when intercom capability was enabled for a seat",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom enabled event",
            "schema" : {
              "$ref" : "#/definitions/IntercomEnabled"
            }
          }
        }
      }
    },
    "/api/events/intercom/disabled" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the intercom capability was disabled for a seat",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom enabled event",
            "schema" : {
              "$ref" : "#/definitions/IntercomDisabled"
            }
          }
        }
      }
    },
    "/api/v1/video/activeconfiguration" : {
      "get" : {
        "tags" : [ "Video" ],
        "summary" : "Returns the active configuration",
        "operationId" : "Video_GetActiveVideoConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VideoConfigurationData"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "Video" ],
        "summary" : "Uses the configuration passed with this call as the active configuration",
        "operationId" : "Video_SaveActiveVideoConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoConfigurationData"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/video/inputnodes/{inputGroup}/{stream}" : {
      "put" : {
        "tags" : [ "Video" ],
        "summary" : "Set or clear the connection of a video input group to a video stream.",
        "operationId" : "Video_SetInputNodeState",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "inputGroup",
          "in" : "path",
          "description" : "input group id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "stream",
          "in" : "path",
          "description" : "stream id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoNodeState"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/video/selectornodes/{stream}/{selectorGroup}" : {
      "put" : {
        "tags" : [ "Video" ],
        "summary" : "Set or clear the connection between a video stream and a video selector group.",
        "operationId" : "Video_SetSelectorNodeState",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "stream",
          "in" : "path",
          "description" : "input group id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "selectorGroup",
          "in" : "path",
          "description" : "stream id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoNodeState"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/videoconfigurations" : {
      "get" : {
        "tags" : [ "VideoConfigurations" ],
        "operationId" : "VideoConfigurations_GetVideoConfigurations",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VideoConfigurationInfo"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "VideoConfigurations" ],
        "summary" : "Create a new video configuration",
        "operationId" : "VideoConfigurations_CreateVideoConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoConfigurationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VideoConfigurationDetails"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/videoconfigurations/{id}" : {
      "get" : {
        "tags" : [ "VideoConfigurations" ],
        "operationId" : "VideoConfigurations_GetVideoConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VideoConfigurationDetails"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "VideoConfigurations" ],
        "summary" : "Overwrite an existing configuration",
        "operationId" : "VideoConfigurations_UpdateVideoConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoConfigurationData"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "VideoConfigurations" ],
        "operationId" : "VideoConfigurations_DeleteVideoConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/video/streams/{stream}/enabled" : {
      "put" : {
        "tags" : [ "Video" ],
        "summary" : "Make a video stream available for delegates.",
        "operationId" : "video_EnableStream",
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "stream does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Video" ],
        "summary" : "Make a video stream unavailable for delegates.",
        "operationId" : "video_DisableStream",
        "responses" : {
          "204" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "stream does not exist"
          }
        }
      },
      "parameters" : [ {
        "name" : "stream",
        "in" : "path",
        "description" : "Id of the stream",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/intercom/seats" : {
      "get" : {
        "tags" : [ "Intercom" ],
        "summary" : "Get the seats which have enabled intercom capability",
        "operationId" : "Intercom_GetSeats",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "/api/v1/intercom/booths" : {
      "get" : {
        "tags" : [ "Intercom" ],
        "summary" : "Get the booths which have enabled intercom capability",
        "operationId" : "Intercom_GetBooths",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "/api/v1/intercom/seats/{seatId}/enabled" : {
      "put" : {
        "tags" : [ "Intercom" ],
        "summary" : "Enable intercom for a seat",
        "operationId" : "Intercom_EnableForSeat",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seatId",
          "in" : "path",
          "description" : "id of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Intercom" ],
        "summary" : "Disable intercom for a seat",
        "operationId" : "Intercom_DisableForSeat",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seatId",
          "in" : "path",
          "description" : "id of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/intercom/booths/{boothId}/enabled" : {
      "put" : {
        "tags" : [ "Intercom" ],
        "summary" : "Enable intercom for a booth",
        "operationId" : "Intercom_EnableForBooth",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "boothId",
          "in" : "path",
          "description" : "id of the booth",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Intercom" ],
        "summary" : "Disable intercom for a booth",
        "operationId" : "Intercom_DisableForBooth",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "boothId",
          "in" : "path",
          "description" : "id of the booth",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/intercom/conversations" : {
      "get" : {
        "tags" : [ "Intercom" ],
        "summary" : "Get a list of active conversations",
        "operationId" : "Intercom_GetConversations",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Conversation"
              }
            }
          }
        }
      }
    },
    "/api/v1/intercom/requests" : {
      "get" : {
        "tags" : [ "Intercom" ],
        "summary" : "Gets an ordered list of all seats which are requesting to speak.",
        "operationId" : "Intercom_GetRequests",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "Ordered list of seats which are requesting to speak.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ConversationRequest"
              }
            }
          }
        }
      }
    },
    "/api/v1/intercom/requests/seat/{fromSeat}/{toSeat}" : {
      "post" : {
        "tags" : [ "Intercom" ],
        "summary" : "Request to start a conversation with a seat",
        "operationId" : "Intercom_RequestConverstationToSeat",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "fromSeat",
          "in" : "path",
          "description" : "Seat ID that requests the conversation",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "toSeat",
          "in" : "path",
          "description" : "Seat ID that receives the conversation request",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/intercom/requests/booth/{fromSeat}/{toBooth}" : {
      "post" : {
        "tags" : [ "Intercom" ],
        "summary" : "Request to start a conversation with a seat in a booth",
        "operationId" : "Intercom_RequestConverstationToBooth",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "fromSeat",
          "in" : "path",
          "description" : "Seat ID that requests the conversation",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "toBooth",
          "in" : "path",
          "description" : "Booth ID that receives the conversation request",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/intercom/requests/accept/{seat}" : {
      "post" : {
        "tags" : [ "Intercom" ],
        "summary" : "Accept a conversation request",
        "operationId" : "Intercom_AcceptConversationRequest",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "Seat ID that accepts a conversation request. Can be a seat inside a booth.",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Conversation that has started",
            "schema" : {
              "$ref" : "#/definitions/Conversation"
            }
          }
        }
      }
    },
    "/api/v1/intercom/conversations/{fromSeat}/{toSeat}" : {
      "post" : {
        "tags" : [ "Intercom" ],
        "summary" : "Start a conversation between two seats",
        "operationId" : "Intercom_StartConversation",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "fromSeat",
          "in" : "path",
          "description" : "Seat ID of first seat in the conversation",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "toSeat",
          "in" : "path",
          "description" : "Seat ID of second seat in the conversation",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Conversation that has started",
            "schema" : {
              "$ref" : "#/definitions/Conversation"
            }
          }
        }
      }
    },
    "/api/v1/intercom/conversations/{seat}" : {
      "delete" : {
        "tags" : [ "Intercom" ],
        "summary" : "End a conversation, or decline/cancel a conversation request.",
        "operationId" : "Intercom_EndConversation",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "Seat ID that ends the call",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/notification/connect" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : "Get a client id for long polling requests",
        "operationId" : "ApiNotificationConnectPost",
        "consumes" : [ ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/NotificationId"
            }
          }
        }
      }
    },
    "/api/notification/{client}/nextevent" : {
      "get" : {
        "tags" : [ "Notification" ],
        "summary" : "Make a long polling request for the next event",
        "operationId" : "ApiNotificationByClientNexteventGet",
        "consumes" : [ ],
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of client that makes the request (retrieved by call to connect)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Notification"
            }
          },
          "408" : {
            "description" : "Request Timeout"
          }
        }
      }
    },
    "/api/notification/{client}/modules" : {
      "get" : {
        "tags" : [ "Notification" ],
        "summary" : "Get list of notification modules for client",
        "operationId" : "ApiNotificationByClientModulesGet",
        "consumes" : [ ],
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of client",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "uniqueItems" : false,
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/NotificationModule"
              }
            }
          }
        }
      }
    },
    "/api/notification/{client}/modules/{module}/unsubscribe" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : "Unsubscribe client from notification module",
        "operationId" : "ApiNotificationByClientModulesByModuleUnsubscribePost",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of client",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "module",
          "in" : "path",
          "description" : "Name of module to unsubscribe from",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/notification/{client}/modules/{module}/subscribe" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : "Subscribe client to notification module",
        "operationId" : "ApiNotificationByClientModulesByModuleSubscribePost",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of client",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "module",
          "in" : "path",
          "description" : "Name of module to subscribe to",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/events/discussion/conferencesettingschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the room conference settings have changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ConferenceSettingsChanged event",
            "schema" : {
              "$ref" : "#/definitions/ConferenceSettingsChanged"
            }
          }
        }
      }
    },
    "/api/events/discussion/defaultconferencesettingschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the room's default conference settings have changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DefaultConferenceSettingsChanged event",
            "schema" : {
              "$ref" : "#/definitions/DefaultConferenceSettingsChanged"
            }
          }
        }
      }
    },
    "/api/v1/discussion/seats" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Get the discussion state of all seats in the room",
        "operationId" : "Discussion_GetSeatDiscussionStates",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatDiscussionState"
              }
            }
          }
        }
      }
    },
    "/api/v1/discussion/settings" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Get the current conference settings of the room",
        "operationId" : "Discussion_GetRoomConferenceSettings",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomConferenceSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Change the current conference settings of the room",
        "operationId" : "Discussion_ChangeRoomConferenceSettings",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "settings",
          "in" : "body",
          "description" : "Settings to change towards",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomConferenceSettings"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/settings/default" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Get the default conference settings of the room",
        "operationId" : "Discussion_GetDefaultRoomConferenceSettings",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomConferenceSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Change the default conference settings of the room",
        "operationId" : "Discussion_ChangeDefaultRoomConferenceSettings",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "settings",
          "in" : "body",
          "description" : "Settings to change towards",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomConferenceSettings"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/speakers/previous" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Move to the previous speaker",
        "operationId" : "Discussion_MoveToPreviousSpeaker",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/speakers" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Gets an ordered list of all the seats which are currently speaking.",
        "operationId" : "Discussion_GetSpeakers",
        "responses" : {
          "200" : {
            "description" : "Ordered list of all the seats which are currently speaking.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Discussion" ],
        "summary" : "Clear all delegates and chairmen that are speaking or requesting to speak",
        "operationId" : "Discussion_ClearAll",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/speakers/delegates" : {
      "delete" : {
        "tags" : [ "Discussion" ],
        "summary" : "Clear the delegates that are currently speaking",
        "operationId" : "Discussion_ClearSpeakers",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/speakers/next" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Move to the next speaker",
        "operationId" : "Discussion_MoveToNextSpeaker",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/events/discussion/seatdiscussionstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the discussion state of a seat has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for SeatMicrophoneStateChanged event",
            "schema" : {
              "$ref" : "#/definitions/SeatDiscussionStateChanged"
            }
          }
        }
      }
    },
    "/api/v1/discussion/requests" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Gets an ordered list of all seats which are requesting to speak.",
        "operationId" : "Discussion_GetRequests",
        "responses" : {
          "200" : {
            "description" : "Ordered list of seats which are requesting to speak.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Discussion" ],
        "summary" : "Clear the seats that are currently requesting to speak",
        "operationId" : "Discussion_ClearSpeakerRequests",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/replies" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Gets an ordered list of all the seats which are currently requesting to reply.",
        "operationId" : "Discussion_GetReplies",
        "responses" : {
          "200" : {
            "description" : "Ordered list of all the seats which are currently requesting to reply.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "/api/events/discussion/speakerlistchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the speaker list has changed",
        "responses" : {
          "200" : {
            "description" : "ordered list of seats which are currently speaking.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "/api/events/discussion/requestlistchanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the request list has changed",
        "responses" : {
          "200" : {
            "description" : "ordered list of seats which are currently requesting to speak.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "/api/events/discussion/replylistchanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the reply list has changed",
        "responses" : {
          "200" : {
            "description" : "ordered list of seats which are currently requesting to reply.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "/api/v1/discussion/seats/{seat}" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Get the discussion state of one seat",
        "operationId" : "Discussion_GetSeatDiscussionState",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "ID of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatDiscussionState"
            }
          }
        }
      }
    },
    "/api/v1/discussion/seats/{seat}/microphone" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Toggle the microphone of a seat on / off",
        "operationId" : "Discussion_ToggleSeatMicrophone",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "ID of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/seats/{seat}/reply" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Toggle the reply state of a seat",
        "operationId" : "Discussion_ToggleReply",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "ID of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/seats/{seat}/request" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Toggle the request state of a seat",
        "operationId" : "Discussion_ToggleRequest",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "ID of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/buttons" : {
      "get" : {
        "tags" : [ "Buttons" ],
        "summary" : "Get all buttons in the room",
        "operationId" : "Buttons_GetRoomButtons",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatButton"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "Buttons" ],
        "summary" : "Change some buttons in the room",
        "operationId" : "Buttons_ChangeButtons",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "buttons",
          "in" : "body",
          "description" : "Buttons to change with their new state",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatButton"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Buttons" ],
        "summary" : "Add some custom buttons in the room",
        "operationId" : "Buttons_AddCustomButtons",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "buttons",
          "in" : "body",
          "description" : "Custom buttons to add (button type should be custom)",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatButton"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "Buttons" ],
        "summary" : "Remove some custom buttons in the room",
        "operationId" : "Buttons_RemoveCustomButtons",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "buttons",
          "in" : "body",
          "description" : "Custom buttons to remove (button type should be custom)",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatButton"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/buttons/{seat}" : {
      "get" : {
        "tags" : [ "Buttons" ],
        "summary" : "Get some buttons in the room based on seat number",
        "operationId" : "Buttons_GetSeatButtons",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatButton"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/buttons/push/{loopback}" : {
      "post" : {
        "tags" : [ "Buttons" ],
        "summary" : "Push some buttons in the room",
        "operationId" : "Buttons_PushButtons",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "buttons",
          "in" : "body",
          "description" : "Buttons to change with their new state",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatButton"
            }
          }
        }, {
          "name" : "loopback",
          "in" : "path",
          "description" : "True when cu should handle the button presses internally",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get all leds in the room",
        "operationId" : "Leds_GetRoomLeds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "Leds" ],
        "summary" : "Change some leds in the room",
        "operationId" : "Leds_ChangeLeds",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "leds",
          "in" : "body",
          "description" : "Leds to change with their new state",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatLed"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds/{seat}" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get some leds in the room based on seat number",
        "operationId" : "Leds_GetSeatLeds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds/button/{buttonType}" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get some leds in the room based on led button type",
        "operationId" : "Leds_GetRoomButtonLeds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "buttonType",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "microphone", "prior", "next", "voting", "nameplate", "custom" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds/device/{deviceType}" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get some leds in the room based on led device type",
        "operationId" : "Leds_GetRoomDeviceLeds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "deviceType",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/buttons/type/{buttonType}" : {
      "get" : {
        "tags" : [ "Buttons" ],
        "summary" : "Get some buttons in the room based on button type",
        "operationId" : "Buttons_GetRoomButtonsByType",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "buttonType",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "microphone", "prior", "next", "voting", "nameplate", "custom" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatButton"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds/type/{ledType}" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get some leds in the room based on led type",
        "operationId" : "Leds_GetRoomLedsByType",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "ledType",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "button", "microphone", "device" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/interpretation/activeconfiguration" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the active interpretation configuration data",
        "operationId" : "Interpretation_GetActiveConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfigurationData"
            }
          }
        }
      }
    },
    "/api/v1/interpretation/channels/listeners" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get a list of listeners per language channel in the room",
        "operationId" : "Interpretation_GetChannelListeners",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ChannelListeners"
              }
            }
          }
        }
      }
    },
    "/api/v1/interpretation/channels/qualities" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the current qualities of all language channels in the room",
        "operationId" : "Interpretation_GetChannelQualities",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ChannelQuality"
              }
            }
          }
        }
      }
    },
    "/api/v1/interpretation/desks" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the current state of all desks in the room",
        "operationId" : "Interpretation_GetDeskStates",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DeskState"
              }
            }
          }
        }
      }
    },
    "/api/v1/interpretation/floor/name" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the name of the floor channel that is used for the room",
        "operationId" : "Interpretation_GetFloorName",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/FloorNameData"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Change the name of the floor channel that is used for the room",
        "operationId" : "Interpretation_SetFloorName",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "name",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FloorNameData"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/v1/interpretation/languages" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get a list of languages defined for the room",
        "operationId" : "Interpretation_GetLanguages",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Language"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Change the list of languages defined for the room",
        "operationId" : "Interpretation_SaveLanguages",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "languages",
          "in" : "body",
          "description" : "List of languages to change towards",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SaveLanguagesRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/interpretationconfigurations" : {
      "get" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Get a list of interpretation configurations for the room",
        "operationId" : "InterpretationConfigurations_GetInterpretationConfigurations",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfigurationList"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Create a new interpretation configuration for the room",
        "operationId" : "InterpretationConfigurations_CreateInterpretationConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "data",
          "in" : "body",
          "description" : "Data about the new interpretation configuration to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InterpretationConfigurationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/interpretationconfigurations/{id}" : {
      "get" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Get the details of a specific interpretation configuration in the room",
        "operationId" : "InterpretationConfigurations_GetInterpretationConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the interpretation configuration",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Update the details of a specific interpretation configuration in the room",
        "operationId" : "InterpretationConfigurations_UpdateInterpretationConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the interpretation configuration",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "data",
          "in" : "body",
          "description" : "Data about the interpretation configuration to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InterpretationConfigurationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Delete an existing interpretation configuration from the room",
        "operationId" : "InterpretationConfigurations_DeleteInterpretationConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the interpretation configuration to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/interpretationconfigurations/{id}/activate" : {
      "post" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Change the active interpretation configuration for the room",
        "operationId" : "InterpretationConfigurations_ChangeActiveConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the interpretation configuration to change to",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/events/interpretation/autofloorstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the auto floor state has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for AutoFloorStateChanged event",
            "schema" : {
              "$ref" : "#/definitions/AutoFloorStateChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/channellistenersupdated" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the listeners to a language channel has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ChannelListenersUpdated event",
            "schema" : {
              "$ref" : "#/definitions/ChannelListenersUpdated"
            }
          }
        }
      }
    },
    "/api/events/interpretation/activeconfigurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the active interpretation configuration has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ActiveConfigurationChanged event",
            "schema" : {
              "$ref" : "#/definitions/ActiveInterpretationConfigurationChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/channelqualitychanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the quality of a language channel has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ChannelQualityChanged event",
            "schema" : {
              "$ref" : "#/definitions/ChannelQualityChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskactiveoutputchannelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the active output channel of a desk has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskActiveOutputChannelChanged event",
            "schema" : {
              "$ref" : "#/definitions/DeskActiveOutputChannelChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskactiverelaychannelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the active relay channel of a desk has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskActiveRelayChannelChanged event",
            "schema" : {
              "$ref" : "#/definitions/DeskActiveRelayChannelChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskmicrophonestatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the microphone state of a desk has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskMicrophoneStateChanged event",
            "schema" : {
              "$ref" : "#/definitions/DeskMicrophoneStateChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskslowdownended" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a slowdown request has ended",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskSlowdownEnded event",
            "schema" : {
              "$ref" : "#/definitions/DeskSlowdownEnded"
            }
          }
        }
      }
    },
    "/api/events/interpretation/floornamechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a floor name change was made",
        "responses" : {
          "200" : {
            "description" : "Metadata for FloorNameChanged event",
            "schema" : {
              "$ref" : "#/definitions/FloorNameChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskslowdownrequested" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a slowdown was requested",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskSlowndownRequested event",
            "schema" : {
              "$ref" : "#/definitions/DeskSlowdownRequested"
            }
          }
        }
      }
    },
    "/api/v1/audioroutingconfigurations" : {
      "get" : {
        "tags" : [ "AudioRoutingConfigurations" ],
        "summary" : "Get a list of audio routing configurations defined in the room",
        "operationId" : "AudioRoutingConfigurations_GetAudioRoutingConfigurations",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioRoutingConfigurationList"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "AudioRoutingConfigurations" ],
        "summary" : "Create a new audio routing configuration for the room",
        "operationId" : "AudioRoutingConfigurations_CreateAudioRoutingConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "data",
          "in" : "body",
          "description" : "Data about audio routing configuration to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioRoutingConfigurationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioRoutingConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/audioroutingconfigurations/{id}" : {
      "get" : {
        "tags" : [ "AudioRoutingConfigurations" ],
        "summary" : "Get the details of an audio routing configuration by id",
        "operationId" : "AudioRoutingConfigurations_GetAudioRoutingConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the audio routing configuration",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioRoutingConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "AudioRoutingConfigurations" ],
        "summary" : "Update the details of an existing audio routing configuration",
        "operationId" : "AudioRoutingConfigurations_UpdateAudioRoutingConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the audio routing configuration to update",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "data",
          "in" : "body",
          "description" : "Data about the audio routing configuration to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioRoutingConfigurationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioRoutingConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "AudioRoutingConfigurations" ],
        "summary" : "Delete an existing audio routing configuration from the room",
        "operationId" : "AudioRoutingConfigurations_DeleteAudioRoutingConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the audio routing configuration to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/audioroutingconfigurations/{id}/activate" : {
      "post" : {
        "tags" : [ "AudioRoutingConfigurations" ],
        "summary" : "Change the active audio routing configuration for the room",
        "operationId" : "AudioRoutingConfigurations_ChangeActiveConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the audio routing configuration to change to",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/events/audiorouting/activeconfigurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the active audio routing configuration has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ActiveAudioConfigurationChanged event",
            "schema" : {
              "$ref" : "#/definitions/ActiveAudioConfigurationChanged"
            }
          }
        }
      }
    },
    "/api/events/audiorouting/audioroutingnodestatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the state of an audio routing node has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for AudioRoutingNodesStateChanged event",
            "schema" : {
              "$ref" : "#/definitions/AudioRoutingNodeStateChanged"
            }
          }
        }
      }
    },
    "/api/v1/audiorouting/activeconfiguration" : {
      "get" : {
        "tags" : [ "AudioRouting" ],
        "summary" : "Get the active configuration data",
        "operationId" : "AudioRouting_GetActiveConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioRoutingConfigurationData"
            }
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      },
      "put" : {
        "tags" : [ "AudioRouting" ],
        "summary" : "Save the active audio routing configuration",
        "operationId" : "AudioRouting_SaveActiveConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioRoutingConfigurationData"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      }
    },
    "/api/v1/recording/state" : {
      "get" : {
        "tags" : [ "Recording" ],
        "summary" : "Get the current recording state",
        "responses" : {
          "200" : {
            "description" : "The current recording state",
            "schema" : {
              "$ref" : "#/definitions/RecordingState"
            }
          }
        }
      }
    },
    "/api/v1/recording/start" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Start recording",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/pause" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Pause recording",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/stop" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Stop recording",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/settings" : {
      "get" : {
        "tags" : [ "Recording" ],
        "summary" : "Get the current recording settings",
        "responses" : {
          "200" : {
            "description" : "Current recording settings",
            "schema" : {
              "$ref" : "#/definitions/RecordingSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Recording" ],
        "summary" : "Change the recording settings",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/storage/{type}/files" : {
      "get" : {
        "tags" : [ "Recording" ],
        "summary" : "Get storage info",
        "responses" : {
          "200" : {
            "description" : "Storage info",
            "schema" : {
              "$ref" : "#/definitions/RecordingStorageInfo"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Recording" ],
        "summary" : "Remove a number of recorded files",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RecordingFilesInfo"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "type",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "enum" : [ "internal", "external" ]
      } ]
    },
    "/api/events/recording/recordingstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when recording state has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RecordingSettingsChanged"
            }
          }
        }
      }
    },
    "/api/events/recording/recordingsettingschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when recording settings have changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RecordingStateChanged"
            }
          }
        }
      }
    },
    "/api/events/recording/recordingfailed" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when recording has failed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RecordingFailed"
            }
          }
        }
      }
    },
    "/api/v1/recording/storage/{type}" : {
      "get" : {
        "tags" : [ "Recording" ],
        "summary" : "Get storage files",
        "responses" : {
          "200" : {
            "description" : "Storage info",
            "schema" : {
              "$ref" : "#/definitions/RecordingStorageInfo"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "type",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "enum" : [ "internal", "external" ]
      } ]
    },
    "/api/v1/messaging/seats" : {
      "post" : {
        "tags" : [ "Messaging" ],
        "summary" : "Send a message to a number of seats",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MessageToSeatsModel"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK\n"
          }
        }
      }
    },
    "/api/v1/meeting" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get info about the current meeting",
        "responses" : {
          "200" : {
            "description" : "Meeting info",
            "schema" : {
              "$ref" : "#/definitions/Meeting"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Schedule a meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ScheduleMeetingRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Meeting info",
            "schema" : {
              "$ref" : "#/definitions/Meeting"
            }
          }
        }
      }
    },
    "/api/v1/meeting/prepare" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Prepare the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/start" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Start the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/pause" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Pause the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/resume" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Resume the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/end" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "End the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/resume" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Resume recording",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/meeting/meetingstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when state of the meeting has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MeetingStateChanged"
            }
          }
        }
      }
    },
    "/api/v1/messaging/booths" : {
      "post" : {
        "tags" : [ "Messaging" ],
        "summary" : "Send a message to a number of booths",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MessageToBoothsModel"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK\n"
          }
        }
      }
    },
    "/api/v1/meeting/delegates" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get list of delegates in the meeting",
        "responses" : {
          "200" : {
            "description" : "List of meeting delegates",
            "schema" : {
              "$ref" : "#/definitions/MeetingDelegateList"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Meeting" ],
        "summary" : "Add some delegates in the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MeetingDelegateList"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Change list of delegates in the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MeetingDelegateList"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Meeting" ],
        "summary" : "Clear delegates in the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/delegates/{seat}" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get delegate info for seat",
        "responses" : {
          "200" : {
            "description" : "Delegate info",
            "schema" : {
              "$ref" : "#/definitions/MeetingDelegate"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Meeting" ],
        "summary" : "Remove delegate from the seat",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat where delegate is seated",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/events/meeting/meetingdelegateschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when delegates participating in the meeting has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MeetingDelegatesChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/seats" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get all booths in the room",
        "responses" : {
          "200" : {
            "description" : "Seats in the room",
            "schema" : {
              "$ref" : "#/definitions/BoothList"
            }
          }
        }
      }
    },
    "/api/v1/room" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get info about the room",
        "responses" : {
          "200" : {
            "description" : "Room details",
            "schema" : {
              "$ref" : "#/definitions/Room"
            }
          }
        }
      }
    },
    "/api/v1/room/seats/{seat}/units" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Move a unit to this seat",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SeatUnit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/room/seats/{seat}/label" : {
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Rename a seat label",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RenameSeatRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/room/seats/{seat}/role" : {
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Change the seat role",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ChangeSeatRoleRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/events/room/seatadded" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when seat was added to the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatAdded"
            }
          }
        }
      }
    },
    "/api/events/room/seatremoved" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when seat was added to the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatRemoved"
            }
          }
        }
      }
    },
    "/api/events/room/seatunitschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when units on a seat have changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatUnitsChanged"
            }
          }
        }
      }
    },
    "/api/events/room/seatlabelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when label of a seat has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatLabelChanged"
            }
          }
        }
      }
    },
    "/api/events/room/seatrolechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when role of a seat has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatRoleChanged"
            }
          }
        }
      }
    },
    "/api/events/room/seatstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when state of a seat has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatStateChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/seats/{seat}/capabilities/{capability}/enabled" : {
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Enable a capability for this seat",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Disable a capability for this seat",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      }, {
        "name" : "capability",
        "in" : "path",
        "description" : "Name of the capability",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/events/room/seatcapabilitieschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when capabilities of a seat have changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatCapabilitiesChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/booths" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get all seats in the room",
        "responses" : {
          "200" : {
            "description" : "Seats in the room",
            "schema" : {
              "$ref" : "#/definitions/SeatList"
            }
          }
        }
      }
    },
    "/api/v1/room/booths/{booth}/desks" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Create a desk for booth",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateDeskForBoothRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "booth",
        "in" : "path",
        "description" : "Number of the booth",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/room/booths/{booth}/desks/{desk}" : {
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Remove a desk from the booth",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "booth",
        "in" : "path",
        "required" : true,
        "type" : "integer"
      }, {
        "name" : "desk",
        "in" : "path",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/events/room/boothadded" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when booth was added to the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BoothAdded"
            }
          }
        }
      }
    },
    "/api/events/room/boothchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when booth has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BoothChanged"
            }
          }
        }
      }
    },
    "/api/events/room/boothremoved" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when booth was removed from room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BoothRemoved"
            }
          }
        }
      }
    },
    "/api/v2/resources" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Get a list of all resources",
        "operationId" : "Resources_GetAllResources",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ResourceInfo"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Resources" ],
        "summary" : "Upload a resource",
        "operationId" : "Resources_UploadResource",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "Resource",
          "in" : "formData",
          "description" : "Upload a resource",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v2/resources/{id}" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Get a resource by id",
        "operationId" : "Resources_GetResource",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of resource that was generated when uploading",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "Resources" ],
        "summary" : "Delete a resource",
        "operationId" : "Resources_DeleteResource",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of resource to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/room/layout" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get the room layout",
        "responses" : {
          "200" : {
            "description" : "Details about room layout",
            "schema" : {
              "$ref" : "#/definitions/RoomLayout"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Change the room layout",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomLayout"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions" : {
      "get" : {
        "tags" : [ "Voting" ],
        "summary" : "Get list of voting sessions in current meeting",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VotingSessionList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Schedule a voting session",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ScheduleVotingSessionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VotingSession"
            }
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}" : {
      "get" : {
        "tags" : [ "Voting" ],
        "summary" : "Get voting session details",
        "responses" : {
          "200" : {
            "description" : "Details about voting session",
            "schema" : {
              "$ref" : "#/definitions/VotingSession"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "Id of the voting session",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/audiorouting/nodes" : {
      "put" : {
        "tags" : [ "AudioRouting" ],
        "summary" : "Change the state of a node in the active audio routing matrix",
        "operationId" : "AudioRouting_SetAudioRoutingInputNodeState",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "model",
          "in" : "body",
          "description" : "Data to modify",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ChangeNodeStateModel"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/start" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Start the voting session",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/stop" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Stop the voting session",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/pause" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Pause the voting session",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/resume" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Resume the voting session",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/reschedule" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Reschedule the voting session",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/results" : {
      "get" : {
        "tags" : [ "Voting" ],
        "summary" : "Get the results of a voting session",
        "responses" : {
          "200" : {
            "description" : "Results of voting session",
            "schema" : {
              "$ref" : "#/definitions/VotingResults"
            }
          }
        }
      }
    },
    "/api/events/voting/votingsessionstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when state of voting session has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VotingSessionStateChanged"
            }
          }
        }
      }
    },
    "/api/events/voting/votingparticipantvoted" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when participant of voting session has voted",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VotingParticipantVoted"
            }
          }
        }
      }
    },
    "/api/v1/audio/auxlevels" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the aux input and output levels in the room",
        "responses" : {
          "200" : {
            "description" : "Aux input and output entry levels",
            "schema" : {
              "$ref" : "#/definitions/AuxLevels"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Modify the aux input and/or output levels",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuxLevels"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audio/autogainreduction" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the current value of auto gain reduction for the room",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AutoGainReduction"
            }
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Change the value of auto gain reduction for the room",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AutoGainReduction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      }
    },
    "/api/v1/audiorouting/languagesettings" : {
      "get" : {
        "tags" : [ "AudioRouting" ],
        "summary" : "Get the language settings for audio routing",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioLanguageSettings"
            }
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      },
      "put" : {
        "tags" : [ "AudioRouting" ],
        "summary" : "Change the language settings for audio routing",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioLanguageSettings"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      }
    },
    "/api/v1/audio/defaultchannelselectorvolume" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the default channel selector volume for the room",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DefaultChannelSelectorVolume"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Change the default channel selector volume",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DefaultChannelSelectorVolume"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audio/defaultchannelselectorvolume/apply" : {
      "post" : {
        "tags" : [ "Audio" ],
        "summary" : "Apply the default channel selector volume to the room",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/audio/loudspeakervolume" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the loudspeaker volume for the room",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LoudspeakerVolume"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Change the loudspeaker volume",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LoudspeakerVolume"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/audio/audioinputentrylevelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an aux audio input entry level has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for AudioInputEntryLevelChanged event",
            "schema" : {
              "$ref" : "#/definitions/AudioInputEntryLevelChanged"
            }
          }
        }
      }
    },
    "/api/events/audio/audiooutputentrylevelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an aux audio output entry level has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for AudioOutputEntryLevelChanged event",
            "schema" : {
              "$ref" : "#/definitions/AudioOutputEntryLevelChanged"
            }
          }
        }
      }
    },
    "/api/events/audio/defaultchannelselectorvolumechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the default channel selector volume has been updated",
        "responses" : {
          "200" : {
            "description" : "Metadata for DefaultChannelSelectorVolumeUpdate event",
            "schema" : {
              "$ref" : "#/definitions/DefaultChannelSelectorVolumeChanged"
            }
          }
        }
      }
    },
    "/api/events/audio/loudspeakervolumechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when loudspeaker volume in the room has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LoudspeakerVolumeChanged"
            }
          }
        }
      }
    },
    "/api/v1/audio/dsp" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the active dsp configuration for the room",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioDynamicsProcessor"
            }
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Change the active dsp configuration for the room",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioDynamicsProcessor"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      }
    },
    "/api/events/audio/audiodynamicsprocessorchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when audio dynamics processor has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioDynamicsProcessorChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/regionalsettings/timeformat" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get the current time format for the room",
        "responses" : {
          "200" : {
            "description" : "Time format",
            "schema" : {
              "$ref" : "#/definitions/TimeFormat"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Change the time format for the room",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TimeFormat"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/room/regionalsettings/dateformat" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get the current date format for the room",
        "responses" : {
          "200" : {
            "description" : "Date format",
            "schema" : {
              "$ref" : "#/definitions/DateFormat"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Change the date format for the room",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DateFormat"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/room/timeformatchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when time format was changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/TimeFormatChanged"
            }
          }
        }
      }
    },
    "/api/events/room/dateformatchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when date format was changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DateFormatChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/datetime" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get current date and time of the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomDateTime"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Change current date and time in the room",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomDateTime"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/room/datetimechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when date and time of the room has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomDateTimeChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/ipconfiguration" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get the current ip configuration of the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/IpConfiguration"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Change the ip configuration of the room",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IpConfiguration"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/room/ipconfigurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when ip configuration has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/IpConfigurationChanged"
            }
          }
        }
      }
    },
    "/api/events/audio/autogainreductionchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when audio auto gain reduction has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AutoGainReductionChanged"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "ConferenceSettingsChanged" : {
      "type" : "object",
      "properties" : {
        "settings" : {
          "$ref" : "#/definitions/RoomConferenceSettings"
        }
      }
    },
    "DefaultConferenceSettingsChanged" : {
      "type" : "object",
      "properties" : {
        "settings" : {
          "$ref" : "#/definitions/RoomConferenceSettings"
        }
      }
    },
    "VideoConfigurationInfo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean"
        }
      }
    },
    "VideoConfigurationData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean"
        },
        "inputGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoInputGroup"
          }
        },
        "videoStreams" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoStream"
          }
        },
        "selectorGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoSelectorGroup"
          }
        }
      }
    },
    "VideoInputGroup" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "inputs" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "backupInput" : {
          "format" : "int32",
          "type" : "integer"
        },
        "type" : {
          "enum" : [ "normal", "talking_head", "request" ],
          "type" : "string"
        }
      }
    },
    "VideoSelectorGroup" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "selectors" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      }
    },
    "VideoNodeState" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "type" : "boolean"
        }
      }
    },
    "VideoConfigurationDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean"
        },
        "inputGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoInputGroup"
          }
        },
        "videoStreams" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoStream"
          }
        },
        "selectorGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoSelectorGroup"
          }
        }
      }
    },
    "VideoStream" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "inputGroup" : {
          "format" : "int32",
          "description" : "Specifies which input group is connected to the stream. Equals -1 when no group connected.",
          "type" : "integer"
        },
        "selectorGroups" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "isEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "Conversation" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "ID of seat that initiates the conversation",
          "type" : "integer"
        },
        "toSeat" : {
          "description" : "ID of seat that accepts the conversation",
          "type" : "integer"
        },
        "startDateTime" : {
          "format" : "date-time",
          "description" : "Start date and time of conversation",
          "type" : "string"
        }
      }
    },
    "ConversationRequest" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "ID of seat that requests the conversation",
          "type" : "integer"
        },
        "toType" : {
          "description" : "Type of the receiver of the call",
          "enum" : [ "seat", "booth" ],
          "type" : "string"
        },
        "toId" : {
          "description" : "Seat or booth ID of the receiver of the call",
          "type" : "integer"
        }
      }
    },
    "ConversationRequested" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "Seat ID that requests the call",
          "type" : "integer"
        },
        "toType" : {
          "description" : "Type of the receiver of the call",
          "enum" : [ "seat", "booth" ],
          "type" : "string"
        },
        "toId" : {
          "description" : "Seat or booth ID of the receiver of the call",
          "type" : "integer"
        }
      }
    },
    "ConversationAccepted" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "Seat ID that requested the call",
          "type" : "integer"
        },
        "toSeat" : {
          "description" : "Seat ID that accepted the call",
          "type" : "integer"
        }
      }
    },
    "ConversationEnded" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "Seat ID that requested the call",
          "type" : "integer"
        },
        "toSeat" : {
          "description" : "Seat ID that accepted the call",
          "type" : "integer"
        }
      }
    },
    "ConversationCanceled" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "description" : "Seat ID that canceled the call",
          "type" : "integer"
        }
      }
    },
    "IntercomEnabled" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "Booth or seat",
          "enum" : [ "seat", "booth" ],
          "type" : "string"
        },
        "id" : {
          "description" : "Id of the booth or seat",
          "type" : "integer"
        }
      }
    },
    "IntercomDisabled" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "Booth or seat",
          "enum" : [ "seat", "booth" ],
          "type" : "string"
        },
        "id" : {
          "description" : "Id of the booth or seat",
          "type" : "integer"
        }
      }
    },
    "NotificationId" : {
      "properties" : {
        "connectionId" : {
          "description" : "The client id for notifications",
          "type" : "string"
        }
      }
    },
    "Notification" : {
      "description" : "Notification with event information",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the event",
          "type" : "string"
        },
        "moduleName" : {
          "description" : "Name of the module where the event occurred",
          "type" : "string"
        },
        "timestamp" : {
          "format" : "date-time",
          "description" : "Date and time when the event occurred",
          "type" : "string"
        },
        "data" : {
          "description" : "Information about the event",
          "type" : "object"
        }
      }
    },
    "NotificationModule" : {
      "description" : "Module that exposes notifications",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the module",
          "type" : "string"
        },
        "isSubscribed" : {
          "description" : "True when the client is subscribed to this module",
          "type" : "boolean"
        }
      }
    },
    "RoomConferenceSettings" : {
      "type" : "object",
      "properties" : {
        "maximumNumberOfSpeakers" : {
          "format" : "int32",
          "type" : "integer"
        },
        "microphoneMode" : {
          "enum" : [ "directAccess", "request", "group", "other" ]
        },
        "microphoneActivationType" : {
          "enum" : [ "toggle", "push", "vox" ],
          "type" : "string"
        },
        "canSpeakerOverrideOtherSpeaker" : {
          "type" : "boolean"
        },
        "canSpeakerCancelRequest" : {
          "type" : "boolean"
        },
        "lowHeadphoneEabled" : {
          "type" : "boolean"
        },
        "canSwitchOff" : {
          "type" : "boolean"
        },
        "enableReply" : {
          "type" : "boolean"
        },
        "buttonReply" : {
          "enum" : [ "prior", "next" ]
        },
        "ledColorOn" : {
          "enum" : [ "red", "green" ],
          "type" : "string"
        },
        "ledColorRequest" : {
          "enum" : [ "red", "green" ],
          "type" : "string"
        },
        "ledColorReply" : {
          "enum" : [ "red", "green" ],
          "type" : "string"
        },
        "ledInactive" : {
          "enum" : [ "off", "red", "green" ],
          "type" : "string"
        },
        "ledStateNextInLine" : {
          "enum" : [ "on", "off" ],
          "type" : "string"
        }
      }
    },
    "SeatDiscussionState" : {
      "type" : "object",
      "properties" : {
        "seatNumber" : {
          "format" : "int32",
          "type" : "integer"
        },
        "microphoneState" : {
          "enum" : [ "on", "off" ],
          "type" : "string"
        },
        "isRequestingToSpeak" : {
          "type" : "boolean"
        },
        "isRequestingToReply" : {
          "type" : "boolean"
        },
        "role" : {
          "description" : "The role of the seat",
          "enum" : [ "delegate", "vip", "chairman" ]
        }
      }
    },
    "SeatDiscussionStateChanged" : {
      "type" : "object",
      "properties" : {
        "discussionState" : {
          "$ref" : "#/definitions/SeatDiscussionState"
        }
      }
    },
    "SeatButton" : {
      "description" : "A button somewhere on a seat",
      "type" : "object",
      "properties" : {
        "seatNumber" : {
          "format" : "int32",
          "description" : "Number of seat where te button is located",
          "type" : "integer"
        },
        "button" : {
          "$ref" : "#/definitions/Button",
          "description" : "Definition of the button located on the seat"
        },
        "isPressEnabled" : {
          "description" : "True when button press is enabled",
          "type" : "boolean"
        },
        "isReleaseEnabled" : {
          "description" : "True when button release is enabled",
          "type" : "boolean"
        }
      }
    },
    "Button" : {
      "description" : "Definition of a button",
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "Type of the button",
          "enum" : [ "microphone", "prior", "next", "voting", "nameplate", "reply", "custom" ]
        },
        "index" : {
          "format" : "int32",
          "description" : "Index of the button if there is more than one button",
          "type" : "integer"
        },
        "name" : {
          "description" : "Name of the button when it's a custom button",
          "type" : "string"
        }
      }
    },
    "SeatLed" : {
      "description" : "Seat led with its state",
      "type" : "object",
      "properties" : {
        "seatNumber" : {
          "format" : "int32",
          "description" : "Number of the seat where the led is located",
          "type" : "integer"
        },
        "type" : {
          "description" : "Type of led",
          "enum" : [ "button", "microphone", "device" ],
          "type" : "string"
        },
        "deviceType" : {
          "format" : "int32",
          "description" : "Type of device when led type is 'Device'",
          "type" : "integer"
        },
        "index" : {
          "format" : "int32",
          "description" : "Zero based index of the led if there is more than one led",
          "type" : "integer"
        },
        "state" : {
          "description" : "State of the led",
          "enum" : [ "on", "blinkingSlow", "blinkingMedium", "blinkingFast", "off" ],
          "type" : "string"
        },
        "onColor" : {
          "$ref" : "#/definitions/LedColor",
          "description" : "Color to be used when led is on"
        },
        "offColor" : {
          "$ref" : "#/definitions/LedColor",
          "description" : "Color to be used when led is off"
        }
      }
    },
    "LedColor" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "description" : "Hex RGB value of the color",
          "type" : "string"
        }
      }
    },
    "DeskState" : {
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        },
        "activeRelay" : {
          "format" : "int32",
          "type" : "integer"
        },
        "activeOutput" : {
          "format" : "int32",
          "type" : "integer"
        },
        "currentRelayChannelPresets" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "currentOutputChannelPresets" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "isSlowdownActive" : {
          "description" : "True when someone has requested to slow down",
          "type" : "boolean"
        }
      }
    },
    "Language" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "iso" : {
          "type" : "string"
        }
      }
    },
    "ChannelListeners" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "listeners" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "ChannelQuality" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "quality" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "SendMessageModel" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string"
        },
        "beep" : {
          "type" : "boolean"
        },
        "booths" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      }
    },
    "InterpretationConfigurationDescription" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "InterpretationConfigurationData" : {
      "description" : "Interpretation configuration data",
      "required" : [ "name" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the interpretation configuration",
          "type" : "string"
        },
        "description" : {
          "description" : "Description about the interpretation configuration",
          "type" : "string"
        },
        "isLocked" : {
          "description" : "True when interpretation configuration is locked for editing",
          "type" : "boolean"
        },
        "isAudienceIndicationEnabled" : {
          "description" : "True when audience indication is enabled",
          "type" : "boolean"
        },
        "audienceIndicationUpdateInterval" : {
          "format" : "int32",
          "description" : "Interval in seconds to update the audience indication (when enabled)",
          "type" : "integer"
        },
        "intraBoothConfiguration" : {
          "$ref" : "#/definitions/IntraBoothConfiguration",
          "description" : "The interpretation mode configuration of desks between booths"
        },
        "interBoothInterpretationMode" : {
          "description" : "The interpretation mode of desks within a booth",
          "enum" : [ "mixed", "override", "lock_A_Override_B" ],
          "type" : "string"
        },
        "isSlowdownEnabled" : {
          "description" : "True when slow down button is enabled",
          "type" : "boolean"
        },
        "channels" : {
          "description" : "The language channels defined in this interpretation configuration",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LanguageChannel"
          }
        },
        "deskConfigurations" : {
          "description" : "The individual desk configurations",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InterpretationDeskConfiguration"
          }
        }
      }
    },
    "LanguageChannel" : {
      "type" : "object",
      "properties" : {
        "order" : {
          "format" : "int32",
          "type" : "integer"
        },
        "language" : {
          "type" : "string"
        },
        "displayText" : {
          "type" : "string"
        },
        "routingMode" : {
          "enum" : [ "disabled", "booth", "external", "empty" ]
        },
        "booths" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "autoFloor" : {
          "type" : "boolean"
        },
        "isRecorded" : {
          "type" : "boolean"
        }
      }
    },
    "InterpretationDeskConfiguration" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        },
        "allowedOutputChannels" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "relayChannelPresets" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "outputChannelPresets" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      }
    },
    "InterpretationConfiguration" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "isLocked" : {
          "type" : "boolean"
        },
        "isAudienceIndicationEnabled" : {
          "type" : "boolean"
        },
        "audienceIndicationUpdateInterval" : {
          "format" : "int32",
          "type" : "integer"
        },
        "intraBoothConfiguration" : {
          "$ref" : "#/definitions/IntraBoothConfiguration"
        },
        "interBoothInterpretationMode" : {
          "enum" : [ "mixed", "override", "lock_A_Override_B" ],
          "type" : "string"
        },
        "isSlowdownEnabled" : {
          "type" : "boolean"
        },
        "channels" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LanguageChannel"
          }
        },
        "deskConfigurations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InterpretationDeskConfiguration"
          }
        }
      }
    },
    "AutoFloorStateChanged" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "isActive" : {
          "type" : "boolean"
        },
        "source" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "ChannelListenersUpdated" : {
      "type" : "object",
      "properties" : {
        "listeners" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ChannelListeners"
          }
        }
      }
    },
    "ChannelQualityChanged" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "quality" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskActiveChannelChanged" : {
      "type" : "object",
      "properties" : {
        "relay" : {
          "format" : "int32",
          "type" : "integer"
        },
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskActiveOutputChannelChanged" : {
      "type" : "object",
      "properties" : {
        "relay" : {
          "format" : "int32",
          "type" : "integer"
        },
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskActiveRelayChannelChanged" : {
      "type" : "object",
      "properties" : {
        "relay" : {
          "format" : "int32",
          "type" : "integer"
        },
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskMicrophoneStateChanged" : {
      "type" : "object",
      "properties" : {
        "newMicrophoneState" : {
          "enum" : [ "on", "off", "mute", "multiple_on" ]
        },
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskSlowdownEnded" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "FloorNameChanged" : {
      "type" : "object",
      "properties" : {
        "roomId" : {
          "type" : "string"
        },
        "floorName" : {
          "type" : "string"
        },
        "timeStamp" : {
          "format" : "date-time",
          "type" : "string"
        }
      }
    },
    "SaveLanguagesRequest" : {
      "required" : [ "languages" ],
      "type" : "object",
      "properties" : {
        "languages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Language"
          }
        }
      }
    },
    "FloorNameData" : {
      "required" : [ "name" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "DeskSlowdownRequested" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "InterpretationConfigurationList" : {
      "type" : "object",
      "properties" : {
        "configurations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InterpretationConfigurationDescription"
          }
        }
      }
    },
    "IntraBoothConfiguration" : {
      "type" : "object",
      "properties" : {
        "isMultipleChannelActivationAllowed" : {
          "type" : "boolean"
        },
        "interpretationMode" : {
          "enum" : [ "mixed", "override" ],
          "type" : "string"
        }
      }
    },
    "AudioRoutingConfigurationData" : {
      "description" : "Audio routing configuration data",
      "required" : [ "name" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the audio routing configuration",
          "type" : "string"
        },
        "description" : {
          "description" : "Description of the audio routing configuration",
          "type" : "string"
        },
        "inputGroups" : {
          "description" : "Audio input groups",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioInputGroup"
          }
        },
        "channels" : {
          "description" : "Audio channels (including language channels)",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Channel"
          }
        },
        "outputGroups" : {
          "description" : "Audio output groups",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioOutputGroup"
          }
        },
        "isLocked" : {
          "description" : "True when configuration is locked for editing",
          "type" : "boolean"
        },
        "isMultipleFloor" : {
          "description" : "True when configuration has multiple floors",
          "type" : "boolean"
        }
      }
    },
    "AudioInputGroup" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "enum" : [ "floor", "ambiance", "language", "user" ],
          "type" : "string"
        },
        "inputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioInput"
          }
        }
      }
    },
    "Channel" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "inputNodes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioRoutingNode"
          }
        },
        "outputGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "AudioOutputGroup" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "enum" : [ "floor", "language", "user" ],
          "type" : "string"
        },
        "outputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioOutput"
          }
        }
      }
    },
    "AudioRoutingNode" : {
      "type" : "object",
      "properties" : {
        "audioInputGroupName" : {
          "type" : "string"
        },
        "state" : {
          "enum" : [ "on", "off", "backup" ],
          "type" : "string"
        },
        "mixValue" : {
          "format" : "int32",
          "type" : "integer"
        },
        "isLocked" : {
          "type" : "boolean"
        }
      }
    },
    "AudioRoutingConfiguration" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "inputGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioInputGroup"
          }
        },
        "channels" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Channel"
          }
        },
        "outputGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioOutputGroup"
          }
        },
        "isPredefined" : {
          "type" : "boolean"
        },
        "isLocked" : {
          "type" : "boolean"
        },
        "isMultipleFloor" : {
          "type" : "boolean"
        }
      }
    },
    "AudioInput" : {
      "type" : "object",
      "properties" : {
        "nodeId" : {
          "format" : "int32",
          "type" : "integer"
        },
        "inputType" : {
          "enum" : [ "auxBalanced", "auxUnbalanced", "dante", "microphone", "sine" ],
          "type" : "string"
        },
        "inputNumber" : {
          "format" : "int32",
          "type" : "integer"
        },
        "gain" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "AudioOutput" : {
      "type" : "object",
      "properties" : {
        "nodeId" : {
          "format" : "int32",
          "type" : "integer"
        },
        "outputType" : {
          "enum" : [ "auxBalanced", "auxUnbalanced", "dante", "speaker" ],
          "type" : "string"
        },
        "outputNumber" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "AudioRoutingConfigurationDescription" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "isPredefined" : {
          "type" : "boolean"
        }
      }
    },
    "ChangeNodeStateModel" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "enum" : [ "on", "off", "backup" ],
          "type" : "string"
        },
        "mixValue" : {
          "format" : "int32",
          "type" : "integer"
        },
        "isLocked" : {
          "type" : "boolean"
        },
        "group" : {
          "description" : "Input group of the node",
          "type" : "string"
        },
        "channel" : {
          "description" : "Channel of the node",
          "type" : "string"
        }
      }
    },
    "ActiveAudioConfigurationChanged" : {
      "type" : "object",
      "properties" : {
        "configurationId" : {
          "type" : "string"
        }
      }
    },
    "AudioInputEntryLevelChanged" : {
      "type" : "object",
      "properties" : {
        "auxInputNumber" : {
          "format" : "int32",
          "type" : "integer"
        },
        "level" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "AudioOutputEntryLevelChanged" : {
      "type" : "object",
      "properties" : {
        "auxOutputNumber" : {
          "format" : "int32",
          "type" : "integer"
        },
        "level" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "ActiveInterpretationConfigurationChanged" : {
      "type" : "object",
      "properties" : {
        "configurationId" : {
          "type" : "string"
        }
      }
    },
    "AudioRoutingNodeStateChanged" : {
      "type" : "object",
      "properties" : {
        "systemChannel" : {
          "type" : "string"
        },
        "node" : {
          "$ref" : "#/definitions/AudioRoutingNode"
        }
      }
    },
    "AutoGainReduction" : {
      "title" : "Root Type for AutoGainReduction",
      "description" : "The root of the AutoGainReduction type's schema.",
      "type" : "object",
      "properties" : {
        "value" : {
          "enum" : [ "off", "low", "medium", "high" ]
        }
      },
      "example" : "{\n    \"value\": \"medium\"\n}"
    },
    "AuxLevel" : {
      "title" : "Root Type for AuxLevel",
      "description" : "The root of the AuxLevel type's schema.",
      "type" : "object",
      "properties" : {
        "number" : {
          "format" : "int32",
          "type" : "integer"
        },
        "value" : {
          "format" : "int32",
          "type" : "integer"
        }
      },
      "example" : {
        "number" : 3,
        "value" : 43
      }
    },
    "AuxLevels" : {
      "title" : "Root Type for AuxLevels",
      "description" : "The root of the AuxLevels type's schema.",
      "type" : "object",
      "properties" : {
        "inputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuxLevel"
          }
        },
        "outputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuxLevel"
          }
        }
      }
    },
    "AudioInputList" : {
      "type" : "object",
      "properties" : {
        "inputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioInput"
          }
        }
      }
    },
    "AudioOutputList" : {
      "type" : "object",
      "properties" : {
        "outputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioOutput"
          }
        }
      }
    },
    "AudioLanguageSettings" : {
      "type" : "object",
      "properties" : {
        "maxLanguages" : {
          "description" : "Maximum number of languages",
          "type" : "integer"
        }
      }
    },
    "AudioRoutingConfigurationList" : {
      "type" : "object",
      "properties" : {
        "configurations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AudioRoutingConfigurationDescription"
          }
        }
      }
    },
    "RecordingState" : {
      "title" : "Root Type for RecordingState",
      "description" : "The root of the RecordingState type's schema.",
      "type" : "object",
      "properties" : {
        "state" : {
          "enum" : [ "idle", "active", "paused", "error" ]
        }
      },
      "example" : "{\n    \"state\": \"active\"\n}"
    },
    "RecordingStorageInfo" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "description" : "Reflects the state of the storage.",
          "enum" : [ "free", "almostFull", "full", "invalid" ]
        },
        "fullSize" : {
          "format" : "int64",
          "description" : "The full capacity of the storage in kilobytes (0 if not connected)",
          "type" : "integer"
        },
        "freeSize" : {
          "format" : "int64",
          "description" : "The remaining capacity of the storage in kilobytes (0 if not connected)",
          "type" : "integer"
        }
      }
    },
    "RecordingFilesInfo" : {
      "type" : "object",
      "properties" : {
        "files" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RecordingStateChanged" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "$ref" : "#/definitions/RecordingState"
        }
      }
    },
    "RecordingSettingsChanged" : {
      "type" : "object",
      "properties" : {
        "settings" : {
          "$ref" : "#/definitions/RecordingSettings"
        }
      }
    },
    "RecordingSettings" : {
      "type" : "object",
      "properties" : {
        "storageType" : {
          "description" : "The storage type on which the files are stored",
          "enum" : [ "internal", "external" ]
        },
        "bitRate" : {
          "description" : "The bit rate to be used for recording",
          "enum" : [ "64", "128", "192", "256" ]
        },
        "autoDelete" : {
          "description" : "Auto delete oldest files when no space left",
          "type" : "boolean"
        },
        "autoSplit" : {
          "description" : "Auto split recordings into separate files",
          "type" : "boolean"
        },
        "autoSplitTime" : {
          "description" : "Time (in seconds) after which an audio recording will be split into a new file",
          "type" : "boolean"
        },
        "prefix" : {
          "description" : "File name prefix",
          "type" : "string"
        },
        "suffix" : {
          "description" : "File name suffix",
          "type" : "string"
        },
        "channels" : {
          "description" : "Channels to be recorded (identified by system channel ID)",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "RecordingFailed" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "MessageToSeatsModel" : {
      "title" : "Root Type for MessageToSeatsModel",
      "description" : "Model for sending message to number of seats",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "Content of the message that should be displayed",
          "type" : "string"
        },
        "beep" : {
          "description" : "True when audible beep should be played",
          "type" : "boolean"
        },
        "seats" : {
          "description" : "List of seat numbers where the message should be sent to",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      },
      "example" : {
        "message" : "some text",
        "beep" : true,
        "seats" : [ 1, 2, 3 ]
      }
    },
    "Meeting" : {
      "description" : "Details about current meeting",
      "type" : "object",
      "properties" : {
        "state" : {
          "description" : "The state of the meeting",
          "enum" : [ "scheduled", "prepared", "running", "paused", "ended" ]
        },
        "delegates" : {
          "description" : "Delegates participating in meeting",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingDelegate"
          }
        },
        "startTime" : {
          "format" : "date-time",
          "description" : "Time when meeting has started",
          "type" : "string"
        },
        "endTime" : {
          "format" : "date-time",
          "description" : "Time when meeting has ended",
          "type" : "string"
        },
        "title" : {
          "description" : "Title of the meeting",
          "type" : "string"
        }
      }
    },
    "MeetingDelegate" : {
      "title" : "Root Type for MeetingDelegate",
      "description" : "Delegate participating in a meeting",
      "type" : "object",
      "properties" : {
        "firstName" : {
          "description" : "First name of the delegate",
          "type" : "string"
        },
        "lastName" : {
          "description" : "Last name of the delegate",
          "type" : "string"
        },
        "seatNumber" : {
          "format" : "int32",
          "description" : "Number of seat where delegate is seated",
          "type" : "integer"
        }
      },
      "example" : "{\n    \"firstName\": \"Pieter\",\n    \"lastName\": \"Deparcq\",\n    \"seatNumber\": 3\n}"
    },
    "ScheduleMeetingRequest" : {
      "title" : "Root Type for ScheduleMeetingRequest",
      "description" : "Request for scheduling a meeting",
      "type" : "object",
      "properties" : {
        "title" : {
          "description" : "Title of the meeting",
          "type" : "string"
        }
      },
      "example" : "{\n    \"title\": \"Test meeting title\"\n}"
    },
    "MeetingStateChanged" : {
      "type" : "object",
      "properties" : {
        "meeting" : {
          "$ref" : "#/definitions/Meeting"
        }
      }
    },
    "MessageToBoothsModel" : {
      "title" : "Root Type for MessageToSeatsModel",
      "description" : "Model for sending message to number of seats",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "Content of the message that should be displayed",
          "type" : "string"
        },
        "beep" : {
          "description" : "True when audible beep should be played",
          "type" : "boolean"
        },
        "booths" : {
          "description" : "List of booth numbers where the message should be sent to",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      },
      "example" : {
        "message" : "This is an example message",
        "beep" : true,
        "booth" : 1
      }
    },
    "MeetingDelegateList" : {
      "description" : "List of meeting delegates",
      "type" : "object",
      "properties" : {
        "delegates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingDelegate"
          }
        }
      }
    },
    "MeetingDelegatesChanged" : {
      "type" : "object",
      "properties" : {
        "delegates" : {
          "$ref" : "#/definitions/MeetingDelegateList"
        }
      }
    },
    "Seat" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Id of the seat",
          "type" : "integer"
        },
        "label" : {
          "description" : "Label of the seat",
          "type" : "string"
        },
        "state" : {
          "description" : "State of the seat",
          "enum" : [ "normal", "broken" ]
        },
        "role" : {
          "description" : "Role of the seat",
          "enum" : [ "delegate", "vip", "chairman" ]
        },
        "units" : {
          "description" : "Units located on the seat",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SeatUnit"
          }
        },
        "capabilities" : {
          "description" : "Capabilities of the seat",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SeatCapability"
          }
        }
      }
    },
    "SeatUnit" : {
      "description" : "Limited info about unit on seat",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Id of the unit",
          "type" : "integer"
        },
        "serial" : {
          "description" : "Serial number of the unit",
          "type" : "string"
        }
      }
    },
    "SeatList" : {
      "type" : "object",
      "properties" : {
        "seats" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Seat"
          }
        }
      }
    },
    "Room" : {
      "title" : "Root Type for Room",
      "description" : "Details about the room",
      "type" : "object",
      "properties" : {
        "ip" : {
          "description" : "IP address of the room",
          "type" : "string"
        },
        "mac" : {
          "description" : "Mac address of the CU",
          "type" : "string"
        },
        "state" : {
          "description" : "State of the room",
          "enum" : [ "meeting", "init", "test" ]
        },
        "numberOfSeats" : {
          "description" : "Number of seats in the room",
          "type" : "integer"
        }
      },
      "example" : {
        "ip" : "192.168.0.100",
        "mac" : "00:0E:3D:10:A0:93",
        "state" : "meeting",
        "numberOfSeats" : 50
      }
    },
    "RenameSeatRequest" : {
      "type" : "object",
      "properties" : {
        "label" : {
          "type" : "string"
        }
      }
    },
    "ChangeSeatRoleRequest" : {
      "type" : "object",
      "properties" : {
        "role" : {
          "enum" : [ "delegate", "vip", "chairman" ]
        }
      }
    },
    "SeatAdded" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat"
        }
      }
    },
    "SeatRemoved" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "type" : "integer"
        }
      }
    },
    "SeatUnitsChanged" : {
      "description" : "Units of a seat have changed",
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat",
          "description" : "Seat that has changed"
        }
      }
    },
    "SeatLabelChanged" : {
      "description" : "Label of a seat has changed",
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat",
          "description" : "Seat that has changed"
        }
      }
    },
    "SeatRoleChanged" : {
      "description" : "Role of a seat has changed",
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat",
          "description" : "Seat that has changed"
        }
      }
    },
    "SeatStateChanged" : {
      "description" : "State of a seat has changed",
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat",
          "description" : "Seat that has changed"
        }
      }
    },
    "SeatCapability" : {
      "title" : "Root Type for SeatCapability",
      "description" : "The root of the SeatCapability type's schema.",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the capability",
          "type" : "string"
        },
        "enabled" : {
          "description" : "True when capability is enabled",
          "type" : "boolean"
        }
      },
      "example" : "{\n    \"name\": \"discussion\",\n    \"enabled\": true\n}"
    },
    "SeatCapabilitiesChanged" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat",
          "description" : "Seat that has changed"
        }
      }
    },
    "Desk" : {
      "title" : "Root Type for Desk",
      "description" : "The root of the Desk type's schema.",
      "type" : "object",
      "properties" : {
        "number" : {
          "description" : "Number of the desk",
          "type" : "integer"
        },
        "seat" : {
          "description" : "Seat that is located on desk",
          "type" : "integer"
        }
      },
      "example" : {
        "number" : 1,
        "seat" : 3
      }
    },
    "Booth" : {
      "description" : "Booth where translation is done by interpreters for certain language",
      "type" : "object",
      "properties" : {
        "desks" : {
          "description" : "Desks that are part of the booth",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Desk"
          }
        },
        "number" : {
          "description" : "Unique number of booth",
          "type" : "integer"
        }
      }
    },
    "BoothList" : {
      "description" : "List of booths",
      "type" : "object",
      "properties" : {
        "booths" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Booth"
          }
        }
      }
    },
    "CreateDeskForBoothRequest" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "description" : "Number of the seat to place at the desk",
          "type" : "integer"
        }
      }
    },
    "BoothAdded" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "$ref" : "#/definitions/Booth"
        }
      }
    },
    "BoothRemoved" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "type" : "integer"
        }
      }
    },
    "BoothChanged" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "$ref" : "#/definitions/Booth"
        }
      }
    },
    "ResourceInfo" : {
      "description" : "Info about a resource",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Id of the resource",
          "type" : "string"
        },
        "filename" : {
          "description" : "File name of the resource",
          "type" : "string"
        },
        "mimeType" : {
          "description" : "Mime type of the resource",
          "type" : "string"
        },
        "length" : {
          "format" : "int64",
          "description" : "Size of the resource file in bytes",
          "type" : "integer"
        },
        "uploadDate" : {
          "format" : "date-time",
          "description" : "Date when file was uploaded",
          "type" : "string"
        }
      }
    },
    "RoomLayoutNode" : {
      "title" : "Root Type for RoomLayoutNode",
      "description" : "Node in room layout that gives position (x, y) to a seat in the room",
      "type" : "object",
      "properties" : {
        "x" : {
          "format" : "int32",
          "description" : "X coordinate in number of pixels of node",
          "type" : "integer"
        },
        "y" : {
          "format" : "int32",
          "description" : "Y coordinate in number of pixels of node",
          "type" : "integer"
        },
        "width" : {
          "format" : "int32",
          "description" : "Width in pixels of the node",
          "type" : "integer"
        },
        "height" : {
          "format" : "int32",
          "description" : "Height in pixels of the node",
          "type" : "integer"
        },
        "seat" : {
          "format" : "int32",
          "description" : "Number of the seat that the node is referencing",
          "type" : "integer"
        }
      },
      "example" : "{\r\n  \"x\": 0,\r\n  \"y\": 0,\r\n  \"width\": 0,\r\n  \"height\": 0,\r\n  \"seat\": 0\r\n}"
    },
    "RoomLayoutBackground" : {
      "title" : "Root Type for RoomLayoutBackground",
      "description" : "The root of the RoomLayoutBackground type's schema.",
      "type" : "object",
      "properties" : {
        "resourceId" : {
          "description" : "Id of resource that contains the background image",
          "type" : "string"
        },
        "width" : {
          "format" : "int32",
          "description" : "Width in pixels of the background image",
          "type" : "integer"
        },
        "height" : {
          "format" : "int32",
          "description" : "Height in pixels of the background image",
          "type" : "integer"
        },
        "horizontalOffset" : {
          "format" : "int32",
          "description" : "Horizontal offset of background image",
          "type" : "integer"
        },
        "verticalOffset" : {
          "format" : "int32",
          "description" : "Vertical offset of background image",
          "type" : "integer"
        },
        "color" : {
          "description" : "Color of background (hex value)",
          "type" : "string"
        }
      },
      "example" : "{\n    \"resourceId\": \"string\",\n    \"width\": 0,\n    \"height\": 0,\n    \"horizontalOffset\": 0,\n    \"verticalOffset\": 0\n}"
    },
    "RoomLayout" : {
      "description" : "Layout of the room",
      "type" : "object",
      "properties" : {
        "width" : {
          "description" : "Width in pixels of the room layout",
          "type" : "integer"
        },
        "height" : {
          "description" : "Height in pixels of the room layout",
          "type" : "integer"
        },
        "background" : {
          "$ref" : "#/definitions/RoomLayoutBackground",
          "description" : "Background of room layout"
        },
        "nodes" : {
          "description" : "Nodes in the room that give a position to seats",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoomLayoutNode"
          }
        }
      }
    },
    "VotingSession" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique identifier of the voting session",
          "type" : "string"
        },
        "state" : {
          "description" : "State of the voting session",
          "enum" : [ "scheduled", "running", "paused", "ended" ]
        },
        "startTime" : {
          "format" : "date-time",
          "description" : "Start date and time of the voting session",
          "type" : "string"
        },
        "endTime" : {
          "format" : "date-time",
          "description" : "End date and time of the voting session",
          "type" : "string"
        },
        "votes" : {
          "description" : "Votes that were cast during voting session",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Vote"
          }
        },
        "options" : {
          "description" : "Voting options that are available during voting session",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingOption"
          }
        },
        "title" : {
          "description" : "Title of the voting session",
          "type" : "string"
        }
      }
    },
    "Vote" : {
      "description" : "Vate cast during a voting session",
      "type" : "object",
      "properties" : {
        "seat" : {
          "description" : "Seat that has casted the vote",
          "type" : "integer"
        },
        "votingOption" : {
          "description" : "Voting option that was selected",
          "type" : "integer"
        }
      }
    },
    "VotingResults" : {
      "description" : "Results of a voting session",
      "type" : "object",
      "properties" : {
        "voted" : {
          "description" : "Number of votes cast",
          "type" : "integer"
        },
        "notVoted" : {
          "description" : "Number of participants that did not vote",
          "type" : "integer"
        },
        "total" : {
          "description" : "Total number of participants",
          "type" : "integer"
        },
        "optionResults" : {
          "description" : "Results for each voting option",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingOptionResult"
          }
        }
      }
    },
    "VotingOptionResult" : {
      "title" : "Root Type for VotingOptionResult",
      "description" : "Result for a specific voting option",
      "type" : "object",
      "properties" : {
        "option" : {
          "format" : "int32",
          "description" : "Number of voting option",
          "type" : "integer"
        },
        "result" : {
          "format" : "int32",
          "description" : "Number of votes for this option",
          "type" : "integer"
        }
      },
      "example" : "{\n    \"option\": 1,\n    \"result\": 10\n}"
    },
    "VotingOption" : {
      "description" : "Voting option that can be voted for",
      "type" : "object",
      "properties" : {
        "number" : {
          "description" : "Number of the voting option",
          "type" : "integer"
        },
        "description" : {
          "description" : "Description of the voting option",
          "type" : "string"
        },
        "color" : {
          "description" : "Color of the voting option (hex value)",
          "type" : "string"
        },
        "abstain" : {
          "description" : "True when this counts as abstain vote",
          "type" : "boolean"
        }
      }
    },
    "VotingSessionList" : {
      "description" : "List of voting sessions",
      "type" : "object",
      "properties" : {
        "sessions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingSession"
          }
        }
      }
    },
    "ScheduleVotingSessionRequest" : {
      "description" : "Request for scheduling voting session",
      "type" : "object",
      "properties" : {
        "title" : {
          "description" : "Title of the voting session"
        },
        "options" : {
          "description" : "Voting options available for voting session",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingOption"
          }
        }
      }
    },
    "VotingSessionStateChanged" : {
      "type" : "object",
      "properties" : {
        "session" : {
          "$ref" : "#/definitions/VotingSession"
        }
      }
    },
    "VotingParticipantVoted" : {
      "type" : "object",
      "properties" : {
        "session" : {
          "$ref" : "#/definitions/VotingSession"
        }
      }
    },
    "LoudspeakerVolume" : {
      "type" : "object",
      "properties" : {
        "gain" : {
          "type" : "integer"
        }
      }
    },
    "DefaultChannelSelectorVolumeChanged" : {
      "type" : "object",
      "properties" : {
        "defaultChannelSelectorVolumeInfo" : {
          "$ref" : "#/definitions/DefaultChannelSelectorVolume"
        }
      }
    },
    "DefaultChannelSelectorVolume" : {
      "type" : "object",
      "properties" : {
        "gain" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "LoudspeakerVolumeChanged" : {
      "type" : "object",
      "properties" : {
        "gain" : {
          "type" : "integer"
        }
      }
    },
    "AudioDynamicsProcessor" : {
      "type" : "object",
      "properties" : {
        "compressorThreshold" : {
          "description" : "compressor threshold [unit 0.1dBFS]",
          "type" : "integer"
        },
        "compressorRatio" : {
          "description" : "compressor ratio [unit 0.01]",
          "type" : "integer"
        },
        "compressorAttackTime" : {
          "description" : "compressor attack time [unit µs]",
          "type" : "integer"
        },
        "compressorReleaseTime" : {
          "description" : "compressor release time [unit µs]",
          "type" : "integer"
        },
        "limiterTreshold" : {
          "description" : "limiter threshold [unit 0.1 dBFS]",
          "type" : "integer"
        },
        "limiterAttackTime" : {
          "description" : "limiter attack time [unit µs]",
          "type" : "integer"
        },
        "limiterReleaseTime" : {
          "description" : "limiter release time [unit µs]",
          "type" : "integer"
        },
        "noiseGateThreshold" : {
          "description" : "noise gate threshold [unit 0.1 dBFS]",
          "type" : "integer"
        },
        "noiseGateMinimumGain" : {
          "description" : "noise gate minimum gain [unit 0.1 dB]",
          "type" : "integer"
        },
        "noiseGateAttackTime" : {
          "description" : "noise gate attack time [unit µs]",
          "type" : "integer"
        },
        "noiseGateHoldTime" : {
          "description" : "noise gate hold time [unit µs]",
          "type" : "integer"
        },
        "makeUpGain" : {
          "description" : "make up gain [unit 0.1 dB]",
          "type" : "integer"
        },
        "noiseGateReleaseTime" : {
          "description" : "noise gate release time [unit µs]",
          "type" : "integer"
        }
      }
    },
    "AudioDynamicsProcessorChanged" : {
      "type" : "object",
      "properties" : {
        "processor" : {
          "$ref" : "#/definitions/AudioDynamicsProcessor"
        }
      }
    },
    "TimeFormat" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "enum" : [ "hh_mm_24", "hh_mm_12" ]
        }
      }
    },
    "DateFormat" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "enum" : [ "yyyy_mm_dd", "mm_dd_yyyy", "dd_mm_yyyy" ]
        }
      }
    },
    "TimeFormatChanged" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "$ref" : "#/definitions/TimeFormat"
        }
      }
    },
    "DateFormatChanged" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "$ref" : "#/definitions/DateFormat"
        }
      }
    },
    "RoomDateTimeChanged" : {
      "type" : "object",
      "properties" : {
        "dateTime" : {
          "$ref" : "#/definitions/RoomDateTime"
        }
      }
    },
    "IpConfiguration" : {
      "type" : "object",
      "properties" : {
        "hostName" : {
          "description" : "Hostname",
          "type" : "string"
        },
        "addressMode" : {
          "description" : "Address mode",
          "enum" : [ "static", "dhcp" ]
        },
        "ipAddress" : {
          "description" : "IP address (empty when using dhcp)",
          "type" : "string"
        },
        "subnetMask" : {
          "description" : "Subnet mask (empty when using dhcp)",
          "type" : "string"
        },
        "gateway" : {
          "description" : "Gateway (empty when using dhcp)",
          "type" : "string"
        },
        "firstDnsServer" : {
          "description" : "First DNS Server (empty when using dhcp)",
          "type" : "string"
        },
        "secondDnsServer" : {
          "description" : "Second DNS server (empty when using dhcp)",
          "type" : "string"
        }
      }
    },
    "IpConfigurationChanged" : {
      "type" : "object",
      "properties" : {
        "configuration" : {
          "$ref" : "#/definitions/IpConfiguration"
        }
      }
    },
    "AutoGainReductionChanged" : {
      "description" : "Event for audio auto gain reduction changes",
      "type" : "object",
      "properties" : {
        "reduction" : {
          "$ref" : "#/definitions/AutoGainReduction"
        }
      }
    },
    "RoomDateTime" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "format" : "date-time",
          "type" : "string"
        }
      }
    }
  },
  "tags" : [ {
    "name" : "Notification",
    "description" : "Description about notification module\n"
  }, {
    "name" : "Events",
    "description" : "Description about events module\n"
  }, {
    "name" : "Resources",
    "description" : "Description about resources module"
  }, {
    "name" : "Room",
    "description" : "Description about the room module"
  }, {
    "name" : "Discussion",
    "description" : "Description about discussion module"
  }, {
    "name" : "Audio",
    "description" : "Description about audio module"
  }, {
    "name" : "AudioRouting",
    "description" : "Description about audiorouting module"
  }, {
    "name" : "AudioRoutingConfigurations",
    "description" : "Description about audiorouting configurations module"
  }, {
    "name" : "Video",
    "description" : "Description about video module"
  }, {
    "name" : "VideoConfigurations",
    "description" : "Description about video configurations module"
  }, {
    "name" : "Interpretation",
    "description" : "Description about interpretation module"
  }, {
    "name" : "InterpretationConfigurations",
    "description" : "Description about interpretation configurations module"
  }, {
    "name" : "Recording",
    "description" : "Description about recording module"
  }, {
    "name" : "Messaging",
    "description" : "Description about messaging module"
  }, {
    "name" : "Intercom",
    "description" : "Description about intercom module"
  }, {
    "name" : "Buttons",
    "description" : "Description about buttons module"
  }, {
    "name" : "Leds",
    "description" : "Description about leds module"
  }, {
    "name" : "Meeting",
    "description" : "Description about meeting module"
  }, {
    "name" : "Voting",
    "description" : "Description about voting module"
  } ]
}