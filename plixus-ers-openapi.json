{
  "swagger" : "2.0",
  "info" : {
    "title" : "Plixus Core API 1.0",
    "description" : "\n\n\n# Introduction\nThis introduction describes the basics of the REST API for Plixus Core on the Central Unit (CU).\n## Before you start\nTelevic Conference's Plixus Core API (for the central unit) was created to create custom solutions and integrate with your own API.  With the Plixus API you can perform two types of functions:\n* **Publication** of events occuring in the meeting room   \n* **External control** of the meeting room\n\n## Event notifications\nThe Plixus Core API uses a **Publish/Subscribe** mechanism, this means that external clients that connect to the API can choose to which events they subscribe and get information from. The API contains commands to subscribe or unsubscribe from each of the modules. Each module contains specific functionality to manage and configure meetings. The following modules are available:\n\n* **Audio**: module to configure general, system wide audio settings\n* **AudioDynamicsProcessor**: module for all runtime modifications of your active audio dynamics processor configuration\n* **AudioDynamicsProcessorConfigurations**: module to create, edit audio dynamics processor configurations\n* **AudioRouting**: module for all runtime modifications of your active audio routing configuration\n* **AudioRoutingConfigurations**: module to create, edit and delete audio routing configurations\n* **Buttons**: module to manage all buttons events in your meeting room\n> Button events may not always take place, because certain operations in CoCon such as voting sessions, use specific buttons. Only when the session is ended the buttons become available again.\n* **Discussion**: module with operator functionality. Change and retrieve microphone states or change conference settings\n* **Intercom**: module to set up calls between microphone units\n* **Interpretation**: module for runtime modifications and information of the active interpretation configuration\n* **InterpretationConfigurations**: module to create, edit and delete interpretation configurations\n* **InterpretationExternal**: module for runtime modifications and information of the active external interpretation configuration\n* **Leds**: module to manage all LED events in your meeting room\n> LED events may not always take place, because certain operations in CoCon such as voting sessions use certain LEDs. Only when the voting session is ended, LED events become available.\n* **Meeting**: module to manage general meeting functions such as meeting state\n* **Messaging**: module to send messages to seats and booths\n* **Recording**: module to manage recording on the Central Unit\n* **Resources**: module to manage all resources present in your setup\n* **Room**: module to manage the meeting room, initialize units, create booths and manage the room layout\n* **System**: module for general system wide settings such as licensing and date and time format\n* **Users**: module for user management with authentication, user roles and permissions\n* **Video**: module for runtime modifications of video configuration to route the video inputs and outputs to one of the 6 available video streams\n* **VideoConfigurations**: module to create, edit and delete video configurations\n* **Voting**: module for basic management of voting sessions\n* **WirelessAccessPoints**: module to manage the wireless access points that are connected to the system\n* **WirelessAuthentication**: module to manage the wireless authentication method used by the wireless access point\n* **WirelessChannels**: module to manage the wireless channels used by the wireless access point\n\n# Set up and use the Plixus Core API\n## General\nThe Plixus Core API consists of a number of URI's (*Uniform Resource Indentifier*) which are exchanged between the API client and the Plixus engine over a TCP/IP-connection. The Plixus Central Unit hosts the API and is available on the IP address of the Central Unit.\nThe API uses two (or more) parallel HTTP-connections:\n* A **Notification** connection that the client and the CU keep open in case any information needs to be transferred from the CU to the client.\n\n\n* Any other connection that is used to transfer **information from the client to the CU**.\n\nThe client needs to initialize the notification connection and it is kept open by both sides. Two scenarios can occur:\n* The CU has information to send to the client and therefore uses the notification connection. When the information is transferred, the connection is closed (as per the HTTP standard). Therefore, the client needs to create a new notification connection. The CU guarantees that no information is lost during this time period where the client is not connected to the CU. \n> Note that you need to create a new notification connection within 60 seconds. If not, the CU discards the client data.\n* The HTTP-connection times out before the CU has any information to send to the client. At this point, the client needs to create a new notification connection. Also in this scenario, the CU guarantees that no information is lost.\n## REST/JSON example\nBelow you can find a short description and example how to create and use the API connection with the CU using the **REST/JSON format**. \nThe first URI you need to send to the Plixus API is the **connect URI**, which you can find in the Notification module (/api/notification/connect). This returns a JSON string as reply, which looks like the following example:\n\n``` *{\"connectionId\":\"3f5b8afe-6efb-4428-8762-e39d42a0762d\"}*  ```\n    \nThis returns the **Id** of the connection that you need to use to open the notification connection and make a new polling request. When the connection is established, the CU can send updates to the client. After the client receives information from the CU, it must re-establish the connection with the CU.\n\n## Server return values\nFor feedback of the API communication between the client and the CU, the API uses **HTTP response codes**.\n",
    "version" : "1.0",
    "x-logo" : {
      "url" : "https://www.televic.com/themes/televic/images/logos/televic-group.svg",
      "altText" : "Televic logo"
    }
  },
  "host" : "localhost:9012",
  "schemes" : [ "http" ],
  "paths" : {
    "/api/events/intercom/conversationrequested" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an intercom conversation was requested",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom request event",
            "schema" : {
              "$ref" : "#/definitions/ConversationRequested"
            }
          }
        }
      }
    },
    "/api/events/intercom/conversationaccepted" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a seat has accepted an intercom request",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom accept event",
            "schema" : {
              "$ref" : "#/definitions/ConversationAccepted"
            }
          }
        }
      }
    },
    "/api/events/intercom/conversationended" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an intercom conversation has ended",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom end event",
            "schema" : {
              "$ref" : "#/definitions/ConversationEnded"
            }
          }
        }
      }
    },
    "/api/events/intercom/conversationcanceled" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an intercom conversation was canceled",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom end event",
            "schema" : {
              "$ref" : "#/definitions/ConversationCanceled"
            }
          }
        }
      }
    },
    "/api/events/intercom/enabled" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when intercom capability was enabled for a seat",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom enabled event",
            "schema" : {
              "$ref" : "#/definitions/IntercomEnabled"
            }
          }
        }
      }
    },
    "/api/events/intercom/disabled" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the intercom capability was disabled for a seat",
        "responses" : {
          "200" : {
            "description" : "Metadata for Intercom enabled event",
            "schema" : {
              "$ref" : "#/definitions/IntercomDisabled"
            }
          }
        }
      }
    },
    "/api/v1/video/activeconfiguration" : {
      "get" : {
        "tags" : [ "Video" ],
        "summary" : "Returns the active configuration",
        "operationId" : "Video_GetActiveVideoConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VideoConfigurationData"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "Video" ],
        "summary" : "Modify the active video configuration",
        "operationId" : "Video_SaveActiveVideoConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoConfigurationData"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/video/inputnodes/{inputGroup}/{stream}" : {
      "put" : {
        "tags" : [ "Video" ],
        "summary" : "Set or clear the connection of a video input group to a video stream.",
        "operationId" : "Video_SetInputNodeState",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "inputGroup",
          "in" : "path",
          "description" : "input group id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "stream",
          "in" : "path",
          "description" : "stream id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoNodeState"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/video/selectornodes/{stream}/{selectorGroup}" : {
      "put" : {
        "tags" : [ "Video" ],
        "summary" : "Set or clear the connection between a video stream and a video selector group.",
        "operationId" : "Video_SetSelectorNodeState",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "stream",
          "in" : "path",
          "description" : "input group id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "selectorGroup",
          "in" : "path",
          "description" : "stream id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoNodeState"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/videoconfigurations" : {
      "get" : {
        "tags" : [ "VideoConfigurations" ],
        "summary" : "Get a list of all video configurations of the room",
        "operationId" : "VideoConfigurations_GetVideoConfigurations",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/VideoConfigurationInfo"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "VideoConfigurations" ],
        "summary" : "Create a new video configuration",
        "operationId" : "VideoConfigurations_CreateVideoConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoConfigurationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VideoConfigurationDetails"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/videoconfigurations/{id}" : {
      "get" : {
        "tags" : [ "VideoConfigurations" ],
        "summary" : "Get details of a specific video configuration",
        "operationId" : "VideoConfigurations_GetVideoConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VideoConfigurationDetails"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "VideoConfigurations" ],
        "summary" : "Update the details of an existing configuration",
        "operationId" : "VideoConfigurations_UpdateVideoConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "data",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VideoConfigurationData"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "VideoConfigurations" ],
        "summary" : "Delete an existing video configuration from the room",
        "operationId" : "VideoConfigurations_DeleteVideoConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/video/streams/{stream}/enabled" : {
      "put" : {
        "tags" : [ "Video" ],
        "summary" : "Make a video stream available for delegates.",
        "operationId" : "video_EnableStream",
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "stream does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Video" ],
        "summary" : "Make a video stream unavailable for delegates.",
        "operationId" : "video_DisableStream",
        "responses" : {
          "204" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "stream does not exist"
          }
        }
      },
      "parameters" : [ {
        "name" : "stream",
        "in" : "path",
        "description" : "Id of the stream",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/intercom/seats" : {
      "get" : {
        "tags" : [ "Intercom" ],
        "summary" : "Get the seats which have enabled intercom capability",
        "operationId" : "Intercom_GetSeats",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "/api/v1/intercom/booths" : {
      "get" : {
        "tags" : [ "Intercom" ],
        "summary" : "Get the booths which have enabled intercom capability",
        "operationId" : "Intercom_GetBooths",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      }
    },
    "/api/v1/intercom/seats/{seatId}/enabled" : {
      "put" : {
        "tags" : [ "Intercom" ],
        "summary" : "Enable intercom for a seat",
        "operationId" : "Intercom_EnableForSeat",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seatId",
          "in" : "path",
          "description" : "id of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Intercom" ],
        "summary" : "Disable intercom for a seat",
        "operationId" : "Intercom_DisableForSeat",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seatId",
          "in" : "path",
          "description" : "id of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/intercom/booths/{boothId}/enabled" : {
      "put" : {
        "tags" : [ "Intercom" ],
        "summary" : "Enable intercom for a booth",
        "operationId" : "Intercom_EnableForBooth",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "boothId",
          "in" : "path",
          "description" : "id of the booth",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Intercom" ],
        "summary" : "Disable intercom for a booth",
        "operationId" : "Intercom_DisableForBooth",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "boothId",
          "in" : "path",
          "description" : "id of the booth",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/intercom/conversations" : {
      "get" : {
        "tags" : [ "Intercom" ],
        "summary" : "Get a list of active conversations",
        "operationId" : "Intercom_GetConversations",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Conversation"
              }
            }
          }
        }
      }
    },
    "/api/v1/intercom/requests" : {
      "get" : {
        "tags" : [ "Intercom" ],
        "summary" : "Gets an ordered list of all seats which are requesting to speak.",
        "operationId" : "Intercom_GetRequests",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "Ordered list of seats which are requesting to speak.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ConversationRequest"
              }
            }
          }
        }
      }
    },
    "/api/v1/intercom/requests/seat/{fromSeat}/{toSeat}" : {
      "post" : {
        "tags" : [ "Intercom" ],
        "summary" : "Request to start a conversation with a seat",
        "operationId" : "Intercom_RequestConverstationToSeat",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "fromSeat",
          "in" : "path",
          "description" : "Seat ID that requests the conversation",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "toSeat",
          "in" : "path",
          "description" : "Seat ID that receives the conversation request",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/intercom/requests/booth/{fromSeat}/{toBooth}" : {
      "post" : {
        "tags" : [ "Intercom" ],
        "summary" : "Request to start a conversation with a seat in a booth",
        "operationId" : "Intercom_RequestConverstationToBooth",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "fromSeat",
          "in" : "path",
          "description" : "Seat ID that requests the conversation",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "toBooth",
          "in" : "path",
          "description" : "Booth ID that receives the conversation request",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/intercom/requests/accept/{seat}" : {
      "post" : {
        "tags" : [ "Intercom" ],
        "summary" : "Accept a conversation request",
        "operationId" : "Intercom_AcceptConversationRequest",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "Seat ID that accepts a conversation request. Can be a seat inside a booth.",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Conversation that has started",
            "schema" : {
              "$ref" : "#/definitions/Conversation"
            }
          }
        }
      }
    },
    "/api/v1/intercom/conversations/{fromSeat}/{toSeat}" : {
      "post" : {
        "tags" : [ "Intercom" ],
        "summary" : "Start a conversation between two seats",
        "operationId" : "Intercom_StartConversation",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "fromSeat",
          "in" : "path",
          "description" : "Seat ID of first seat in the conversation",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "toSeat",
          "in" : "path",
          "description" : "Seat ID of second seat in the conversation",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Conversation that has started",
            "schema" : {
              "$ref" : "#/definitions/Conversation"
            }
          }
        }
      }
    },
    "/api/v1/intercom/conversations/{seat}" : {
      "delete" : {
        "tags" : [ "Intercom" ],
        "summary" : "End a conversation, or decline/cancel a conversation request.",
        "operationId" : "Intercom_EndConversation",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "Seat ID that ends the call",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/events/diagnostics/deviceadded" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Metadata for DeviceAdded event",
            "schema" : {
              "$ref" : "#/definitions/DeviceAdded"
            }
          }
        }
      }
    },
    "/api/events/diagnostics/devicedeleted" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Metadata for DeviceDeleted event",
            "schema" : {
              "$ref" : "#/definitions/DeviceDeleted"
            }
          }
        }
      }
    },
    "/api/events/diagnostics/healthStateChanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Metadata for HealthStateChanged event",
            "schema" : {
              "$ref" : "#/definitions/HealthStateChanged"
            }
          }
        }
      }
    },
    "/api/events/diagnostics/neighboursChanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Metadata for NeighboursChanged event",
            "schema" : {
              "$ref" : "#/definitions/NeighboursChanged"
            }
          }
        }
      }
    },
    "/api/v1/devices/types" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Get a translation of device firmware type to commercial names",
        "operationId" : "ApiV1DevicesTypesGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "uniqueItems" : false,
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DeviceNameInfo"
              }
            }
          }
        }
      }
    },
    "/api/v1/diagnostics/devices" : {
      "get" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Get a list of devices detected in the system",
        "operationId" : "ApiV1DiagnosticsDevicesGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "uniqueItems" : false,
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DeviceInfo"
              }
            }
          }
        }
      }
    },
    "/api/v1/diagnostics/devices/details" : {
      "get" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Get a list of the details of each device detected in the system",
        "operationId" : "ApiV1DiagnosticsDevicesDetailsGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "uniqueItems" : false,
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DeviceDetails"
              }
            }
          }
        }
      }
    },
    "/api/v1/diagnostics/devices/{serial}" : {
      "get" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Get details about a device in the system",
        "operationId" : "ApiV1DiagnosticsDevicesBySerialGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "description" : "",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/DeviceDetails"
            }
          }
        }
      }
    },
    "/api/v1/diagnostics/devices/{serial}/errors" : {
      "delete" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Clear error counters of a device in the system",
        "operationId" : "ApiV1DiagnosticsDevicesBySerialErrorsDelete",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "description" : "Unique serial number of the device",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/diagnostics/devices/errors" : {
      "delete" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Clear error counters of all devices in the system",
        "operationId" : "ApiV1DiagnosticsDevicesErrorsDelete",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/diagnostics/devices/{serial}/highlightstate" : {
      "get" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Get the highlight state of a device",
        "operationId" : "ApiV1DiagnosticsDevicesBySerialHighlightstateGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "description" : "Unique serial number of the device",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/HighlightState"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Change the highlight state of a device",
        "operationId" : "ApiV1DiagnosticsDevicesBySerialHighlightstatePut",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "description" : "Unique serial number of the device",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "body",
          "description" : "New state to apply",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HighlightState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      },
      "delete" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Stop highlighting a device",
        "operationId" : "ApiV1DiagnosticsDevicesBySerialHighlightstateDelete",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/diagnostics/devices/highlightstate" : {
      "put" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Change the highlight state of all devices in the system",
        "operationId" : "ApiV1DiagnosticsDevicesHighlightstatePut",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "state",
          "in" : "body",
          "description" : "New state to apply",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HighlightState"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      },
      "delete" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Stop highlighting all devices in the system",
        "operationId" : "ApiV1DiagnosticsDevicesHighlightstateDelete",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/diagnostics/devices/{serial}/test" : {
      "post" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Test a device in the system",
        "operationId" : "ApiV1DiagnosticsDevicesBySerialTestPost",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "description" : "Unique serial number of the device",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "req",
          "in" : "body",
          "description" : "Request with information about the test to execute",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeviceTestRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      },
      "delete" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Stop testing a device in the system",
        "operationId" : "ApiV1DiagnosticsDevicesBySerialTestDelete",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "description" : "Unique serial number of the device",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/diagnostics/test/enabled" : {
      "get" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Get test mode status",
        "operationId" : "ApiV1DiagnosticsTestGet",
        "consumes" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/TestEnabled"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Enable test mode in the CU",
        "operationId" : "ApiV1DiagnosticsTestPost",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      },
      "delete" : {
        "tags" : [ "Diagnostics" ],
        "summary" : "Disable test mode in the CU",
        "operationId" : "ApiV1DiagnosticsTestDelete",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/notification/connect" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : "Get a client id for long polling requests",
        "operationId" : "ApiNotificationConnectPost",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/NotificationId"
            }
          }
        }
      }
    },
    "/api/notification/{client}/nextevent" : {
      "get" : {
        "tags" : [ "Notification" ],
        "summary" : "Make a long polling request for the next event",
        "operationId" : "ApiNotificationByClientNexteventGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of client that makes the request (retrieved by call to connect)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Notification"
            }
          },
          "408" : {
            "description" : "Request Timeout"
          }
        }
      }
    },
    "/api/notification/{client}/modules" : {
      "get" : {
        "tags" : [ "Notification" ],
        "summary" : "Get list of notification modules for client",
        "operationId" : "ApiNotificationByClientModulesGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of client",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/NotificationModuleList"
            }
          }
        }
      }
    },
    "/api/notification/{client}/modules/{module}/unsubscribe" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : "Unsubscribe client from notification module",
        "operationId" : "ApiNotificationByClientModulesByModuleUnsubscribePost",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of client",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "module",
          "in" : "path",
          "description" : "Name of module to unsubscribe from",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/notification/{client}/modules/{module}/subscribe" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : "Subscribe client to notification module",
        "operationId" : "ApiNotificationByClientModulesByModuleSubscribePost",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of client",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "module",
          "in" : "path",
          "description" : "Name of module to subscribe to",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/devicelicenses/{devicetype}" : {
      "get" : {
        "tags" : [ "DeviceLicensing" ],
        "summary" : "Get a mapping of the serial numbers and applied licenses of all ConfideaNG devices",
        "operationId" : "ApiV1DeviceLicensesDeviceTypeGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ConfideaLicenseWithSerialList"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "DeviceLicensing" ],
        "summary" : "Make changes to the existing configuration",
        "operationId" : "ApiV1DeviceLicensesDeviceTypePut",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "license",
          "in" : "body",
          "description" : "List of devices who's licenses should specifically be modified. Only these device will be affected by this call.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConfideaLicenseWithSerialList"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      },
      "post" : {
        "tags" : [ "DeviceLicensing" ],
        "summary" : "Create a completely new configuration",
        "operationId" : "ApiV1DeviceLicensesDeviceTypePost",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "The complete configuration that should be applied. Any devices that are not present in this list will be set to a default license with only a single microphone button enabled.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConfideaLicenseWithSerialList"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      },
      "parameters" : [ {
        "name" : "devicetype",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "enum" : [ "confidea" ]
      } ]
    },
    "/api/v1/devicelicenses/{devicetype}/left" : {
      "get" : {
        "tags" : [ "DeviceLicensing" ],
        "summary" : "Get an overview of the available Confidea licenses and how many are still available",
        "operationId" : "ApiV1DeviceLicensesLeftGet",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/ConfideaLicensesLeft"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "devicetype",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "enum" : [ "confidea" ]
      } ]
    },
    "/api/v1/devicelicenses/{devicetype}/{serial}" : {
      "get" : {
        "tags" : [ "DeviceLicensing" ],
        "summary" : "Get the license that has been applied to a specific device",
        "operationId" : "ApiV1DeviceLicensesDeviceTypeSerialGet",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Licenses applied to Confidea device with specific serial",
            "schema" : {
              "$ref" : "#/definitions/ConfideaLicense"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "devicetype",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "enum" : [ "confidea" ]
      }, {
        "name" : "serial",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/events/discussion/conferencesettingschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the room conference settings have changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ConferenceSettingsChanged event",
            "schema" : {
              "$ref" : "#/definitions/ConferenceSettingsChanged"
            }
          }
        }
      }
    },
    "/api/events/discussion/defaultconferencesettingschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the room's default conference settings have changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DefaultConferenceSettingsChanged event",
            "schema" : {
              "$ref" : "#/definitions/DefaultConferenceSettingsChanged"
            }
          }
        }
      }
    },
    "/api/v1/discussion/seats" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Get the discussion state of all seats in the room",
        "operationId" : "Discussion_GetSeatDiscussionStates",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatDiscussionState"
              }
            }
          }
        }
      }
    },
    "/api/v1/discussion/settings" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Get the current conference settings of the room",
        "operationId" : "Discussion_GetRoomConferenceSettings",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomConferenceSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Change the current conference settings of the room",
        "operationId" : "Discussion_ChangeRoomConferenceSettings",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "settings",
          "in" : "body",
          "description" : "Settings to change towards",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomConferenceSettings"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/settings/default" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Get the default conference settings of the room",
        "operationId" : "Discussion_GetDefaultRoomConferenceSettings",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomConferenceSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Change the default conference settings of the room",
        "operationId" : "Discussion_ChangeDefaultRoomConferenceSettings",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "settings",
          "in" : "body",
          "description" : "Settings to change towards",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomConferenceSettings"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/speakers/previous" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Move to the previous speaker",
        "operationId" : "Discussion_MoveToPreviousSpeaker",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/speakers" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Gets an ordered list of all the seats which are currently speaking.",
        "operationId" : "Discussion_GetSpeakers",
        "responses" : {
          "200" : {
            "description" : "Ordered list of all the seats which are currently speaking.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Discussion" ],
        "summary" : "Clear all delegates and chairmen that are speaking or requesting to speak",
        "operationId" : "Discussion_ClearAll",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/speakers/delegates" : {
      "delete" : {
        "tags" : [ "Discussion" ],
        "summary" : "Clear the delegates that are currently speaking",
        "operationId" : "Discussion_ClearSpeakers",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/speakers/next" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Move to the next speaker",
        "operationId" : "Discussion_MoveToNextSpeaker",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/events/discussion/seatdiscussionstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the discussion state of a seat has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for SeatDiscussionStateChanged event",
            "schema" : {
              "$ref" : "#/definitions/SeatDiscussionStateChanged"
            }
          }
        }
      }
    },
    "/api/v1/discussion/requests" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Gets an ordered list of all seats which are requesting to speak.",
        "operationId" : "Discussion_GetRequests",
        "responses" : {
          "200" : {
            "description" : "Ordered list of seats which are requesting to speak.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Change the request list",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RequestList"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Not ok"
          }
        }
      },
      "delete" : {
        "tags" : [ "Discussion" ],
        "summary" : "Clear the seats that are currently requesting to speak",
        "operationId" : "Discussion_ClearSpeakerRequests",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/replies" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Gets an ordered list of all the seats which are currently requesting to reply.",
        "operationId" : "Discussion_GetReplies",
        "responses" : {
          "200" : {
            "description" : "Ordered list of all the seats which are currently requesting to reply.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Change the reply list",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ReplyList"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/events/discussion/speakerlistchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the speaker list has changed",
        "responses" : {
          "200" : {
            "description" : "ordered list of seats which are currently speaking.",
            "schema" : {
              "$ref" : "#/definitions/SpeakerListChanged"
            }
          }
        }
      }
    },
    "/api/events/discussion/requestlistchanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the request list has changed",
        "responses" : {
          "200" : {
            "description" : "ordered list of seats which are currently requesting to speak.",
            "schema" : {
              "$ref" : "#/definitions/RequestListChanged"
            }
          }
        }
      }
    },
    "/api/events/discussion/replylistchanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the reply list has changed",
        "responses" : {
          "200" : {
            "description" : "ordered list of seats which are currently requesting to reply.",
            "schema" : {
              "$ref" : "#/definitions/ReplyListChanged"
            }
          }
        }
      }
    },
    "/api/v1/discussion/seats/{seat}" : {
      "get" : {
        "tags" : [ "Discussion" ],
        "summary" : "Get the discussion state of one seat",
        "operationId" : "Discussion_GetSeatDiscussionState",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "ID of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatDiscussionState"
            }
          }
        }
      }
    },
    "/api/v1/discussion/seats/{seat}/microphone" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Toggle the microphone of a seat on / off",
        "operationId" : "Discussion_ToggleSeatMicrophone",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "ID of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/seats/{seat}/reply" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Toggle the reply state of a seat",
        "operationId" : "Discussion_ToggleReply",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "ID of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/discussion/seats/{seat}/request" : {
      "put" : {
        "tags" : [ "Discussion" ],
        "summary" : "Toggle the request state of a seat",
        "operationId" : "Discussion_ToggleRequest",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "description" : "ID of the seat",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/buttons" : {
      "get" : {
        "tags" : [ "Buttons" ],
        "summary" : "Get all buttons in the room",
        "operationId" : "Buttons_GetRoomButtons",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatButton"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "Buttons" ],
        "summary" : "Change some buttons in the room",
        "operationId" : "Buttons_ChangeButtons",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "buttons",
          "in" : "body",
          "description" : "Buttons to change with their new state",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatButton"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Buttons" ],
        "summary" : "Add some custom buttons in the room",
        "operationId" : "Buttons_AddCustomButtons",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "buttons",
          "in" : "body",
          "description" : "Custom buttons to add (button type should be custom)",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatButton"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "Buttons" ],
        "summary" : "Remove some custom buttons in the room",
        "operationId" : "Buttons_RemoveCustomButtons",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "buttons",
          "in" : "body",
          "description" : "Custom buttons to remove (button type should be custom)",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatButton"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/buttons/{seat}" : {
      "get" : {
        "tags" : [ "Buttons" ],
        "summary" : "Get some buttons in the room based on seat number",
        "operationId" : "Buttons_GetSeatButtons",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatButton"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/buttons/push/{loopback}" : {
      "post" : {
        "tags" : [ "Buttons" ],
        "summary" : "Push some buttons in the room",
        "operationId" : "Buttons_PushButtons",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "buttons",
          "in" : "body",
          "description" : "Buttons to change with their new state",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatButton"
            }
          }
        }, {
          "name" : "loopback",
          "in" : "path",
          "description" : "True when cu should handle the button presses internally",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get all leds in the room",
        "operationId" : "Leds_GetRoomLeds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "Leds" ],
        "summary" : "Change some leds in the room",
        "operationId" : "Leds_ChangeLeds",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "leds",
          "in" : "body",
          "description" : "Leds to change with their new state",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SeatLed"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds/{seat}" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get some leds in the room based on seat number",
        "operationId" : "Leds_GetSeatLeds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "seat",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds/button/{buttonType}" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get some leds in the room based on led button type",
        "operationId" : "Leds_GetRoomButtonLeds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "buttonType",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "microphone", "prior", "next", "voting", "nameplate", "custom" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds/device/{deviceType}" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get some leds in the room based on led device type",
        "operationId" : "Leds_GetRoomDeviceLeds",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "deviceType",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/buttons/type/{buttonType}" : {
      "get" : {
        "tags" : [ "Buttons" ],
        "summary" : "Get some buttons in the room based on button type",
        "operationId" : "Buttons_GetRoomButtonsByType",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "buttonType",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "microphone", "prior", "next", "voting", "nameplate", "custom" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatButton"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/leds/type/{ledType}" : {
      "get" : {
        "tags" : [ "Leds" ],
        "summary" : "Get some leds in the room based on led type",
        "operationId" : "Leds_GetRoomLedsByType",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "ledType",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "button", "microphone", "device" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SeatLed"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/interpretation/activeconfiguration" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the active interpretation configuration data",
        "operationId" : "Interpretation_GetActiveConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfigurationData"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Change the active interpretation configuration",
        "operationId" : "Interpretation_SetActiveConfiguration",
        "produces" : [ "text/json", "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InterpretationConfigurationData"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/interpretation/channels/listeners" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get a list of listeners per language channel in the room",
        "operationId" : "Interpretation_GetChannelListeners",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ChannelListeners"
              }
            }
          }
        }
      }
    },
    "/api/v1/interpretation/channels/qualities" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the current qualities of all language channels in the room",
        "operationId" : "Interpretation_GetChannelQualities",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ChannelQuality"
              }
            }
          }
        }
      }
    },
    "/api/v1/interpretation/desks" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the current state of all desks in the room",
        "operationId" : "Interpretation_GetDeskStates",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/InterpreterDeskState"
              }
            }
          }
        }
      }
    },
    "/api/v1/interpretation/floor/name" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the name of the floor channel that is used for the room",
        "operationId" : "Interpretation_GetFloorName",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/FloorNameData"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Change the name of the floor channel that is used for the room",
        "operationId" : "Interpretation_SetFloorName",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "name",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FloorNameData"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/v1/interpretation/languages" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get a list of languages defined for the room",
        "operationId" : "Interpretation_GetLanguages",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Language"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Change the list of languages defined for the room",
        "operationId" : "Interpretation_SaveLanguages",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "languages",
          "in" : "body",
          "description" : "List of languages to change towards",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SaveLanguagesRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/interpretationconfigurations" : {
      "get" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Get a list of all interpretation configurations of the room",
        "operationId" : "InterpretationConfigurations_GetInterpretationConfigurations",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfigurationList"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Create a new interpretation configuration for the room",
        "operationId" : "InterpretationConfigurations_CreateInterpretationConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "data",
          "in" : "body",
          "description" : "Data about the new interpretation configuration to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InterpretationConfigurationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/interpretationconfigurations/{id}" : {
      "get" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Get details of a specific interpretation configuration",
        "operationId" : "InterpretationConfigurations_GetInterpretationConfiguration",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the interpretation configuration",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "put" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Update the details of a specific interpretation configuration in the room",
        "operationId" : "InterpretationConfigurations_UpdateInterpretationConfiguration",
        "consumes" : [ "application/json", "text/json" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the interpretation configuration",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "data",
          "in" : "body",
          "description" : "Data about the interpretation configuration to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InterpretationConfigurationData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpretationConfiguration"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Delete an existing interpretation configuration from the room",
        "operationId" : "InterpretationConfigurations_DeleteInterpretationConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the interpretation configuration to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/interpretationconfigurations/{id}/activate" : {
      "post" : {
        "tags" : [ "InterpretationConfigurations" ],
        "summary" : "Change the active interpretation configuration for the room",
        "operationId" : "InterpretationConfigurations_ChangeActiveConfiguration",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the interpretation configuration to change to",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/events/interpretation/autofloorstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the auto floor state has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for AutoFloorStateChanged event",
            "schema" : {
              "$ref" : "#/definitions/AutoFloorStateChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/channellistenersupdated" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the listeners to a language channel has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ChannelListenersUpdated event",
            "schema" : {
              "$ref" : "#/definitions/ChannelListenersUpdated"
            }
          }
        }
      }
    },
    "/api/events/interpretation/activeconfigurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the active interpretation configuration has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ActiveConfigurationChanged event",
            "schema" : {
              "$ref" : "#/definitions/ActiveInterpretationConfigurationChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/channelqualitychanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the quality of a language channel has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ChannelQualityChanged event",
            "schema" : {
              "$ref" : "#/definitions/ChannelQualityChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskactiveoutputchannelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the active output channel of a desk has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskActiveOutputChannelChanged event",
            "schema" : {
              "$ref" : "#/definitions/DeskActiveOutputChannelChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskactiverelaychannelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the active relay channel of a desk has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskActiveRelayChannelChanged event",
            "schema" : {
              "$ref" : "#/definitions/DeskActiveRelayChannelChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskmicrophonestatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the microphone state of a desk has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskMicrophoneStateChanged event",
            "schema" : {
              "$ref" : "#/definitions/DeskMicrophoneStateChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskslowdownended" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a slowdown request has ended",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskSlowdownEnded event",
            "schema" : {
              "$ref" : "#/definitions/DeskSlowdownEnded"
            }
          }
        }
      }
    },
    "/api/events/interpretation/floornamechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a floor name change was made",
        "responses" : {
          "200" : {
            "description" : "Metadata for FloorNameChanged event",
            "schema" : {
              "$ref" : "#/definitions/FloorNameChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/deskslowdownrequested" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a slowdown was requested",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskSlowndownRequested event",
            "schema" : {
              "$ref" : "#/definitions/DeskSlowdownRequested"
            }
          }
        }
      }
    },
    "/api/v1/recording/state" : {
      "get" : {
        "tags" : [ "Recording" ],
        "summary" : "Get the current recording state",
        "responses" : {
          "200" : {
            "description" : "The current recording state",
            "schema" : {
              "$ref" : "#/definitions/RecordingState"
            }
          }
        }
      }
    },
    "/api/v1/recording/start" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Start recording",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/pause" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Pause recording",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/stop" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Stop recording",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/settings" : {
      "get" : {
        "tags" : [ "Recording" ],
        "summary" : "Get the current recording settings",
        "responses" : {
          "200" : {
            "description" : "Current recording settings",
            "schema" : {
              "$ref" : "#/definitions/RecordingSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Recording" ],
        "summary" : "Change the recording settings",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "settings that should be applied",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RecordingSettings"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/storage/{type}/files" : {
      "get" : {
        "tags" : [ "Recording" ],
        "summary" : "Get storage info",
        "responses" : {
          "200" : {
            "description" : "Storage info",
            "schema" : {
              "$ref" : "#/definitions/RecordingFilesInfo"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "type",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "enum" : [ "internal", "external" ]
      } ]
    },
    "/api/events/recording/recordingstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when recording state has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RecordingStateChanged"
            }
          }
        }
      }
    },
    "/api/events/recording/recordingsettingschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when recording settings have changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RecordingSettingsChanged"
            }
          }
        }
      }
    },
    "/api/events/recording/recordingfailed" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when recording has failed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RecordingFailed"
            }
          }
        }
      }
    },
    "/api/v1/recording/storage/{type}" : {
      "get" : {
        "tags" : [ "Recording" ],
        "summary" : "Get info about the recording storage medium",
        "responses" : {
          "200" : {
            "description" : "Storage info",
            "schema" : {
              "$ref" : "#/definitions/RecordingStorageInfo"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "type",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "enum" : [ "internal", "external" ]
      } ]
    },
    "/api/v1/messaging/seats" : {
      "post" : {
        "tags" : [ "Messaging" ],
        "summary" : "Send a message to a number of seats",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MessageToSeatsModel"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK\n"
          }
        }
      }
    },
    "/api/v1/meeting" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get info about the current meeting",
        "responses" : {
          "200" : {
            "description" : "Meeting info",
            "schema" : {
              "$ref" : "#/definitions/Meeting"
            }
          }
        }
      }
    },
    "/api/v1/meeting/prepare" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Prepare a meeting from a template",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Meeting info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MeetingTemplate"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Meeting"
            }
          }
        }
      }
    },
    "/api/v1/meeting/start" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Start the currently prepared meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/pause" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Pause the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/resume" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Resume the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/end" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "End the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/recording/resume" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Resume recording",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/meeting/meetingstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when state of the meeting has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MeetingStateChanged"
            }
          }
        }
      }
    },
    "/api/v1/messaging/booths" : {
      "post" : {
        "tags" : [ "Messaging" ],
        "summary" : "Send a message to a number of booths",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MessageToBoothsModel"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK\n"
          }
        }
      }
    },
    "/api/v1/meeting/delegates" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get list of delegates in the meeting",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "List of meeting delegates",
            "schema" : {
              "$ref" : "#/definitions/MeetingDelegateList"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Meeting" ],
        "summary" : "Change the delegates in the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MeetingDelegateList"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Add some delegates to the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MeetingDelegateList"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Meeting" ],
        "summary" : "Clear delegates in the meeting",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/delegates/{seat}" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get delegate info for seat",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Delegate info",
            "schema" : {
              "$ref" : "#/definitions/MeetingDelegate"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Meeting" ],
        "summary" : "Puts a delegate on a seat",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Delegate info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MeetingDelegate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      },
      "delete" : {
        "tags" : [ "Meeting" ],
        "summary" : "Remove delegate from the seat",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat where delegate is seated",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/events/meeting/meetingdelegateschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when delegates list in the meeting  has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MeetingDelegatesChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/seats" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get all seats in the room, excluding interpreter desks.",
        "responses" : {
          "200" : {
            "description" : "Seats in the room",
            "schema" : {
              "$ref" : "#/definitions/SeatList"
            }
          }
        }
      }
    },
    "/api/v1/room/seats/{seat}/units" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Move a unit to this seat",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SeatUnit"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/room/seats/{seat}/label" : {
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Rename a seat label",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RenameSeatRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/room/seats/{seat}/role" : {
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Change the seat role",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ChangeSeatRoleRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/events/room/seatadded" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when seat was added to the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatAdded"
            }
          }
        }
      }
    },
    "/api/events/room/seatremoved" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when seat was added to the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatRemoved"
            }
          }
        }
      }
    },
    "/api/v1/room/seats/{seat}/capabilities/{capability}/enabled" : {
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Enable a capability for this seat",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Disable a capability for this seat",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      }, {
        "name" : "capability",
        "in" : "path",
        "description" : "Name of the capability",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/room/booths" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get all booths in the room",
        "responses" : {
          "200" : {
            "description" : "Booths in the room",
            "schema" : {
              "$ref" : "#/definitions/BoothList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Add a new booth",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/v1/room/booths/{booth}/desks" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Create a desk for booth",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateDeskForBoothRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "booth",
        "in" : "path",
        "description" : "Number of the booth",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/room/booths/{booth}/desks/{desk}" : {
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Remove a desk from the booth",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "booth",
        "in" : "path",
        "required" : true,
        "type" : "integer"
      }, {
        "name" : "desk",
        "in" : "path",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/events/room/boothadded" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when booth was added to the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BoothAdded"
            }
          }
        }
      }
    },
    "/api/events/room/boothchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when booth has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BoothChanged"
            }
          }
        }
      }
    },
    "/api/events/room/boothremoved" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when booth was removed from room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BoothRemoved"
            }
          }
        }
      }
    },
    "/api/v1/room/layout" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get the local room layout",
        "description" : "The local room layout is used when:\n    - no meetings are active\n    - meetings using the local meeting template",
        "responses" : {
          "200" : {
            "description" : "Details about room layout",
            "schema" : {
              "$ref" : "#/definitions/RoomLayout"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Change the local room layout",
        "description" : "The local room layout is used when:\n    - no meetings are active\n    - meetings using the local meeting template",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomLayout"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions" : {
      "get" : {
        "tags" : [ "Voting" ],
        "summary" : "Get list of voting sessions in current meeting",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VotingSessionList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Schedule a voting session",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ScheduleVotingSessionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VotingSessionId"
            },
            "examples" : {
              "application/json" : {
                "title" : "Start to vote!",
                "options" : [ {
                  "number" : 2,
                  "description" : "yes",
                  "color" : "green",
                  "abstain" : false
                }, {
                  "number" : 3,
                  "description" : "abstain",
                  "color" : "yellow",
                  "abstain" : true
                }, {
                  "number" : 4,
                  "description" : "no",
                  "color" : "red",
                  "abstain" : false
                } ],
                "settings" : {
                  "hideIndividualVotingResults" : true,
                  "hideVotingResultsForParticipantsDuringVote" : false
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}" : {
      "get" : {
        "tags" : [ "Voting" ],
        "summary" : "Get voting session details",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Details about voting session",
            "schema" : {
              "$ref" : "#/definitions/VotingSession"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "Id of the voting session",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/voting/sessions/{id}/start" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Start the voting session",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the voting session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/stop" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Stop the voting session",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the voting session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/pause" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Pause the voting session",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the voting session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/resume" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Resume the voting session",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the voting session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/reschedule" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Reschedule the voting session",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the voting session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/results" : {
      "get" : {
        "tags" : [ "Voting" ],
        "summary" : "Get the results of a voting session",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the voting session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Results of voting session",
            "schema" : {
              "$ref" : "#/definitions/VotingResults"
            }
          }
        }
      }
    },
    "/api/events/voting/votingsessionstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when state of voting session has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VotingSessionStateChanged"
            }
          }
        }
      }
    },
    "/api/v1/audio/auxlevels" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the aux input and output levels in the room",
        "responses" : {
          "200" : {
            "description" : "Aux input and output entry levels",
            "schema" : {
              "$ref" : "#/definitions/AuxLevels"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Modify the aux input and/or output levels",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuxLevels"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audio/autogainreduction" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the current value of auto gain reduction for the room",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AutoGainReduction"
            }
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Change the value of auto gain reduction for the room",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AutoGainReduction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          },
          "405" : {
            "description" : "Invalid license"
          }
        }
      }
    },
    "/api/v1/audio/defaultchannelselectorvolume" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the default channel selector volume for the room",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DefaultChannelSelectorVolume"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Change the default channel selector volume",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DefaultChannelSelectorVolume"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audio/defaultchannelselectorvolume/apply" : {
      "post" : {
        "tags" : [ "Audio" ],
        "summary" : "Apply the default channel selector volume to the room",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/api/v1/audio/loudspeakervolume" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the loudspeaker volume for the room",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LoudspeakerVolume"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Change the loudspeaker volume",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LoudspeakerVolume"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/audio/audioinputentrylevelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an aux audio input entry level has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for AudioInputEntryLevelChanged event",
            "schema" : {
              "$ref" : "#/definitions/AudioInputEntryLevelChanged"
            }
          }
        }
      }
    },
    "/api/events/audio/audiooutputentrylevelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when an aux audio output entry level has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for AudioOutputEntryLevelChanged event",
            "schema" : {
              "$ref" : "#/definitions/AudioOutputEntryLevelChanged"
            }
          }
        }
      }
    },
    "/api/events/audio/defaultchannelselectorvolumechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the default channel selector volume has been updated",
        "responses" : {
          "200" : {
            "description" : "Metadata for DefaultChannelSelectorVolumeUpdate event",
            "schema" : {
              "$ref" : "#/definitions/DefaultChannelSelectorVolumeChanged"
            }
          }
        }
      }
    },
    "/api/events/audio/loudspeakervolumechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when loudspeaker volume in the room has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LoudspeakerVolumeChanged"
            }
          }
        }
      }
    },
    "/api/events/audio/autogainreductionchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when audio auto gain reduction has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AutoGainReductionChanged"
            }
          }
        }
      }
    },
    "/api/v1/resources" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Get a list of all resources",
        "operationId" : "Resources_GetAllResources",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ResourceInfo"
              }
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "Resources" ],
        "summary" : "Upload a resource",
        "operationId" : "Resources_UploadResource",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "Resource",
          "in" : "formData",
          "description" : "Upload a resource",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ResourceInfo"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/events/system/dateformatchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when date format was changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DateFormatChanged"
            }
          }
        }
      }
    },
    "/api/events/system/ipconfigurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when ip configuration has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/IpConfigurationChanged"
            }
          }
        }
      }
    },
    "/api/events/system/datetimechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when date and time of the room has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomDateTimeChanged"
            }
          }
        }
      }
    },
    "/api/events/system/timeformatchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when time format was changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/TimeFormatChanged"
            }
          }
        }
      }
    },
    "/api/events/system/loglevelchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when log level has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LogLevelChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/info" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get info about the room",
        "responses" : {
          "200" : {
            "description" : "Room details",
            "schema" : {
              "$ref" : "#/definitions/Room"
            }
          }
        }
      }
    },
    "/api/v1/users/authenticate" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Authenticate a user",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserLoginRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User authenticated",
            "schema" : {
              "$ref" : "#/definitions/UserLoginResponse"
            }
          },
          "401" : {
            "description" : "Login failed"
          }
        }
      }
    },
    "/api/v1/users/roles" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get list of user roles",
        "responses" : {
          "200" : {
            "description" : "List of user roles",
            "schema" : {
              "$ref" : "#/definitions/UserRoleList"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Change role permissions",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRoleList"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "Current user is not allowed to change user roles"
          }
        }
      }
    },
    "/api/v1/users/{id}/password" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Change or set the password of a user",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserPassword"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "401" : {
            "description" : "Current user is not allowed to change this user's password"
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "Id of the user",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/notification/{client}/modules/subscribe" : {
      "post" : {
        "tags" : [ "Notification" ],
        "summary" : "Subscribe to a list of modules",
        "parameters" : [ {
          "name" : "client",
          "in" : "path",
          "description" : "Unique id of the client",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "body",
          "in" : "body",
          "description" : "List of modules to subscribe to",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NotificationModuleList"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/room/seats/reorder" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Start reordering seats inside the room.",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Stop reordering seats inside the room.",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/room/interpreterdesks" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get a list of all interpreter desks in the room.",
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "$ref" : "#/definitions/InterpreterDeskList"
            }
          }
        }
      }
    },
    "/api/v1/room/interpreterdesks/reorder" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Starts reordering interpreter desks into booths in the room.",
        "responses" : {
          "200" : {
            "description" : "Ok."
          }
        }
      },
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Stop reordering interpreter desks.",
        "responses" : {
          "200" : {
            "description" : "Ok."
          }
        }
      }
    },
    "/api/v1/voting/sessions/{id}/close" : {
      "post" : {
        "tags" : [ "Voting" ],
        "summary" : "Close the voting session",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the voting session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/voting/votingresults" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Voting results event",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/VotingResults"
            }
          }
        }
      }
    },
    "/api/events/room/seatchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when capabilities of a seat have changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatChanged"
            }
          }
        }
      }
    },
    "/api/events/room/interpreterdeskadded/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when interpreter desk was added to the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpreterDeskAdded"
            }
          }
        }
      }
    },
    "/api/events/room/interpreterdeskremoved/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when interpreter desk was added to the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpreterDeskRemoved"
            }
          }
        }
      }
    },
    "/api/events/room/interpreterdeskchanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when interpreter desk has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpreterDeskChanged"
            }
          }
        }
      }
    },
    "/api/v1/resources/{id}" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Get a resource by id",
        "operationId" : "Resources_GetResource",
        "consumes" : [ ],
        "produces" : [ "image/jpg", "image/jpeg", "image/png", "image/gif", "application/pdf", "application/json", "text/xml", "text/plain", "multipart/form-data" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of resource that was generated when uploading",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "format" : "binary",
              "type" : "string"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "delete" : {
        "tags" : [ "Resources" ],
        "summary" : "Delete a resource",
        "operationId" : "Resources_DeleteResource",
        "consumes" : [ ],
        "produces" : [ ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of resource to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/events/system/logarchiveready" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when log archive is ready for download",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LogArchiveReady"
            }
          }
        }
      }
    },
    "/api/events/system/updateprogress" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event that informs about the update progress",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UpdateProgress"
            }
          }
        }
      }
    },
    "/api/v1/devices/{serial}" : {
      "delete" : {
        "tags" : [ "Devices" ],
        "summary" : "Delete a device, which is offline",
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "description" : "serial number of the device which needs to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Unable to delete device"
          }
        }
      }
    },
    "/api/v1/room/seats/discussion" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get all discussion capable seats in the room",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/SeatList"
            }
          }
        }
      }
    },
    "/api/v1/resources/{id}/info" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Get info about a given resource file.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of resource that was generated when uploading\n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ResourceInfo"
            }
          }
        }
      }
    },
    "/api/events/room/layoutchanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the room layout has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomLayoutChanged"
            }
          }
        }
      }
    },
    "/api/events/interpretation/languageschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the languages list has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for FloorNameChanged event",
            "schema" : {
              "$ref" : "#/definitions/LanguagesChanged"
            }
          }
        }
      }
    },
    "/api/v1/room/booths/{booth}" : {
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Deletes a booth",
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "booth does not exist"
          }
        }
      },
      "parameters" : [ {
        "name" : "booth",
        "in" : "path",
        "description" : "Number of the booth",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/room/seats/{seat}/reorder" : {
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Set seat as not reordered",
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "seat not found"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Number of seat",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/room/booths/{booth}/move/{newbooth}" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Move a booth to another position.",
        "description" : "This effectively changes the booth ID of this booth, but possibly of all the booths ordered after the new booth ID (insert)",
        "parameters" : [ {
          "name" : "booth",
          "in" : "path",
          "description" : "current booth id",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "newbooth",
          "in" : "path",
          "description" : "new booth id",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "booth not found"
          }
        }
      }
    },
    "/api/v1/room/seats/reorder/clear" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Clears the reordering",
        "description" : "This means the reordering will start from scratch.",
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Not allowed to clear reordering"
          }
        }
      }
    },
    "/api/v1/room/interpreterdesks/reorder/clear/" : {
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Clears the reordering",
        "description" : "This means the reordering will start from scratch.",
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Not allowed to clear reordering"
          }
        }
      }
    },
    "/api/v1/room/interpreterdesks/{desk}/reorder/" : {
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Set interpreter desk as not reordered",
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "desk not found"
          }
        }
      },
      "parameters" : [ {
        "name" : "desk",
        "in" : "path",
        "description" : "seat ID of the interpreter desk",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/events/room/seatschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when various seats have changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SeatChanged"
            }
          }
        }
      }
    },
    "/api/events/room/interpreterdeskschanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when various interpreter desks have changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InterpreterDeskChanged"
            }
          }
        }
      }
    },
    "/api/events/system/operatingmodechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event that informs about operating mode changes",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/OperatingMode"
            }
          }
        }
      }
    },
    "/api/events/system/splashscreenchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when splash screen resource  was changed",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/events/system/splashscreenremoved" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when splash screen resource ID was removed",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/events/users/userroleschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when user roles have changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UserRoleList"
            }
          }
        }
      }
    },
    "/api/v1/meeting/archive" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get a list of past meetings, stored in the meeting archive",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/MeetingArchiveList"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Meeting" ],
        "summary" : "Delete all meetings from the meeting archive, including the corresponding recorded audio files",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/v1/meeting/archive/{archiveName}/info" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get general meeting info of the archived meeting.",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Meeting"
            }
          },
          "400" : {
            "description" : "Meeting archive folder not found."
          }
        }
      },
      "parameters" : [ {
        "name" : "archiveName",
        "in" : "path",
        "description" : "name of the archive folder on the system.",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/archive/{archiveName}/votingsessions" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get voting sessions info of the archived meeting.",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/MeetingArchiveVotingSessionList"
            }
          },
          "400" : {
            "description" : "Meeting archive folder not found."
          }
        }
      },
      "parameters" : [ {
        "name" : "archiveName",
        "in" : "path",
        "description" : "name of the archive folder on the system.",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/events/system/defaultinterfacelanguagechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the default interface language has changed.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DefaultInterfaceLanguage"
            }
          }
        }
      }
    },
    "/api/v1/devices/" : {
      "delete" : {
        "tags" : [ "Devices" ],
        "summary" : "Delete all offline devices",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/v1/meeting/archive/{archiveName}" : {
      "delete" : {
        "tags" : [ "Meeting" ],
        "summary" : "Delete the meeting archive, including the corresponding recorded audio files",
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Meeting archive not found"
          }
        }
      },
      "parameters" : [ {
        "name" : "archiveName",
        "in" : "path",
        "description" : "name of the archive folder on the system.",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/events/meeting/meetingarchivedeleted" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a meeting archive was deleted",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MeetingArchiveDeleted"
            }
          }
        }
      }
    },
    "/api/events/meeting/meetingarchivesdeleted/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when all meeting archives were deleted",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/events/interpretation/deskstatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the state (relay, output channel, mic state) of a desk has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for DeskActiveOutputChannelChanged event",
            "schema" : {
              "$ref" : "#/definitions/InterpreterDeskState"
            }
          }
        }
      }
    },
    "/api/events/system/camerasettingschanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event that informs about camera settings changes",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CameraSettings"
            }
          }
        }
      }
    },
    "/api/events/system/licensechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when license was changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LicenseList"
            }
          }
        }
      }
    },
    "/api/events/system/servicestatechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the state of a service was changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceState"
            }
          }
        }
      }
    },
    "/api/events/video/activeconfigurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the active video configuration has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for ActiveConfigurationChanged event",
            "schema" : {
              "$ref" : "#/definitions/VideoConfigurationData"
            }
          }
        }
      }
    },
    "/api/v1/delegates" : {
      "get" : {
        "tags" : [ "Delegates" ],
        "summary" : "Get the list of all delegates",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DelegateList"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Delegates" ],
        "summary" : "Sets new delegate list",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DelegateList"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/v1/meeting/template" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get the current default meeting template",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/MeetingTemplate"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Meeting" ],
        "summary" : "Set default meeting template",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MeetingTemplate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/events/meeting/meetingtemplatechanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the default meeting template was changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MeetingTemplate"
            }
          }
        }
      }
    },
    "/api/v1/wirelessaccesspoints" : {
      "get" : {
        "tags" : [ "WirelessAccessPoints" ],
        "summary" : "Get a list of all wireless access points connected to the system",
        "operationId" : "WirelessAccessPoints_GetWirelessAccessPoints",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WirelessAccessPoint"
              }
            }
          }
        }
      }
    },
    "/api/v1/wirelessaccesspoints/{serial}/couple" : {
      "put" : {
        "tags" : [ "WirelessAccessPoints" ],
        "summary" : "Set the coupled state of the wireless access point",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WirelessAccessPointCoupleRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "serial",
        "in" : "path",
        "description" : "Device serial",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/wirelessaccesspoints/{serial}/operatingmode" : {
      "put" : {
        "tags" : [ "WirelessAccessPoints" ],
        "summary" : "Change the operating mode of the wireless access point",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Operating mode",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WirelessOperatingMode"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "serial",
        "in" : "path",
        "description" : "Device serial",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/wirelessaccesspoints/defaultoperatingmode" : {
      "get" : {
        "tags" : [ "WirelessAccessPoints" ],
        "summary" : "Get the default operating mode of wireless access points in the system",
        "operationId" : "WirelessAccessPoints_GetDefaultOperatingMode",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WirelessOperatingMode"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "WirelessAccessPoints" ],
        "summary" : "Change the default operating mode of wireless access points in the system",
        "operationId" : "WirelessAccessPoints_ChangeDefaultOperatingMode",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Default operating mode",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WirelessOperatingMode"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/wirelessaccesspoints/wirelessaccesspointadded" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a wireless access point was added",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WirelessAccessPointAdded"
            }
          }
        }
      }
    },
    "/api/events/wirelessaccesspoints/wirelessaccesspointchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a wireless access point was changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WirelessAccessPointChanged"
            }
          }
        }
      }
    },
    "/api/events/wirelessaccesspoints/wirelessaccesspointremoved" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when a wireless access point was removed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WirelessAccessPointRemoved"
            }
          }
        }
      }
    },
    "/api/events/wirelessaccesspoints/defaultoperatingmodechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the default operating mode of wireless access points has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WirelessOperatingMode"
            }
          }
        }
      }
    },
    "/api/v1/wirelessaccesspoints/takeover" : {
      "post" : {
        "tags" : [ "WirelessAccessPoints" ],
        "summary" : "Take-over the wireless access point",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WirelessTakeoverRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/events/meeting/badge" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when badge is inserted/removed from a device",
        "responses" : {
          "200" : {
            "description" : "Metadata for AudioOutputEntryLevelChanged event",
            "schema" : {
              "$ref" : "#/definitions/BadgeEvent"
            }
          }
        }
      }
    },
    "/api/events/delegates/delegateschanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when delegates list has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DelegateList"
            }
          }
        }
      }
    },
    "/api/v1/devices/{serial}/replace" : {
      "put" : {
        "tags" : [ "Devices" ],
        "summary" : "Replace the device with the given serial number by another device",
        "parameters" : [ {
          "name" : "serial",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DeviceReplaceRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Ok, no content"
          },
          "400" : {
            "description" : "bad request"
          }
        }
      }
    },
    "/api/events/system/configarchiveready/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when config archive is ready for download",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ConfigArchiveReady"
            }
          }
        }
      }
    },
    "/api/v1/recording/storage/{type}/files/remove" : {
      "post" : {
        "tags" : [ "Recording" ],
        "summary" : "Remove the specified audio recording files.",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RecordingFilesInfo"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "enum" : [ "internal", "external" ]
        } ],
        "responses" : {
          "204" : {
            "description" : "Ok"
          }
        }
      },
      "parameters" : [ {
        "name" : "type",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "enum" : [ "internal", "external" ]
      } ]
    },
    "/api/v1/room/seats/external" : {
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Create an external seat",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Seat"
            }
          }
        }
      }
    },
    "/api/v1/room/seats/external/{seat}" : {
      "delete" : {
        "tags" : [ "Room" ],
        "responses" : {
          "204" : {
            "description" : "Ok"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "Seat ID of external seat",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/voting/sessions/{id}/externalvote" : {
      "put" : {
        "tags" : [ "Voting" ],
        "summary" : "Inject an external vote (from an external delegate) into the voting session",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ExternalVote"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Vote not possible."
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "voting session id",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/published" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get a list of published meetings",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "schema" : {
              "$ref" : "#/definitions/PublishedMeetingInfoList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "publish a meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PublishedMeeting"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/v1/wirelesschannels" : {
      "get" : {
        "tags" : [ "WirelessChannels" ],
        "summary" : "Get the list of all available wireless channels",
        "operationId" : "WirelessChannels_GetWirelessChannels",
        "produces" : [ "text/json", "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WirelessChannel"
              }
            }
          }
        }
      }
    },
    "/api/v1/wirelesschannels/region" : {
      "get" : {
        "tags" : [ "WirelessChannels" ],
        "summary" : "Get the region setting of the access point",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WirelessRegion"
            }
          }
        }
      }
    },
    "/api/events/wirelesschannels/channelsChanged" : {
      "get" : {
        "tags" : [ "WirelessChannels" ],
        "summary" : "Event when the properties of a wireless channel changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/WirelessChannel"
              }
            }
          }
        }
      }
    },
    "/api/v1/interpretationexternal" : {
      "get" : {
        "tags" : [ "InterpretationExternal" ],
        "summary" : "Get the current external interpretation configuration",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ExternalLanguageChannelList"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "InterpretationExternal" ],
        "summary" : "Set the current external interpretation configuration",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "The external interpretation configuration to be applied",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ExternalLanguageChannelList"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/published/{meetingId}" : {
      "delete" : {
        "tags" : [ "Meeting" ],
        "summary" : "delete a published meeting",
        "responses" : {
          "204" : {
            "description" : "ok"
          }
        }
      },
      "parameters" : [ {
        "name" : "meetingId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/published/{meetingId}/prepare" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Prepare a cloud meeting",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Meeting"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "meetingId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/events/meeting/publishedmeetingsupdate" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the list of published meetings has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for PublishedMeetingsUpdate event",
            "schema" : {
              "$ref" : "#/definitions/PublishedMeetingInfoList"
            }
          }
        }
      }
    },
    "/api/events/interpretationexternal/configurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the external interpretation settings changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ExternalLanguageChannelList"
            }
          }
        }
      }
    },
    "/api/v1/wirelessauthentication/operatingMode" : {
      "get" : {
        "tags" : [ "WirelessAuthentication" ],
        "summary" : "Get the wireless operating mode currently in use",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WirelessOperatingMode"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "WirelessAuthentication" ],
        "summary" : "Set the wireless authentication mode",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "The authentication mode to be set",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WirelessOperatingMode"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/wirelessauthentication/authenticateddevices" : {
      "get" : {
        "tags" : [ "WirelessAuthentication" ],
        "summary" : "Get the list of authenticated devices",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "WirelessAuthentication" ],
        "summary" : "Remove the complete list of authenticated devices",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/wirelessauthentication/authenticateddevices/{serial}" : {
      "delete" : {
        "tags" : [ "WirelessAuthentication" ],
        "summary" : "Remove a device from the authenticated devices list",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "parameters" : [ {
        "name" : "serial",
        "in" : "path",
        "description" : "Device serial",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/events/wirelessauthentication/operatingModeChanged" : {
      "get" : {
        "tags" : [ "WirelessAuthentication" ],
        "summary" : "Event when the operating mode of a wireless access point has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/WirelessOperatingMode"
            }
          }
        }
      }
    },
    "/api/events/wirelessauthentication/authenticatedDevicesChanged" : {
      "get" : {
        "tags" : [ "WirelessAuthentication" ],
        "summary" : "Event when the list of authenticated devices changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/api/v1/wirelesschannels/{channelNumber}/enabled" : {
      "put" : {
        "tags" : [ "WirelessChannels" ],
        "summary" : "Enable or disable a channel",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Enable or disable a channel",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WirelessChannelEnableRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "403" : {
            "description" : "Returned when trying to disable the last enabled channel"
          }
        }
      },
      "parameters" : [ {
        "name" : "channelNumber",
        "in" : "path",
        "description" : "Channel number to enable or disable",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/events/meeting/meetingspeakerschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when speakers of the active meeting are changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for MeetingSpeakersChanged event",
            "schema" : {
              "$ref" : "#/definitions/MeetingSpeakers"
            }
          }
        }
      }
    },
    "/api/events/meeting/meetingparticipantschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when participants of the active meeting are changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for MeetingParticipantsChanged event",
            "schema" : {
              "$ref" : "#/definitions/MeetingParticipants"
            }
          }
        }
      }
    },
    "/api/events/diagnostics/powerStatusChanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Metadata for powerStatusChanged event",
            "schema" : {
              "$ref" : "#/definitions/PowerStatusChanged"
            }
          }
        }
      }
    },
    "/api/events/diagnostics/wirelessLinkStatusChanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Metadata for wirelessLinkStatusChanged event",
            "schema" : {
              "$ref" : "#/definitions/WirelessLinkStatusChanged"
            }
          }
        }
      }
    },
    "/api/v1/meeting/participants" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get the participants of the current meeting",
        "responses" : {
          "200" : {
            "description" : "ok",
            "schema" : {
              "$ref" : "#/definitions/MeetingParticipants"
            }
          },
          "404" : {
            "description" : "no meeting ongoing"
          }
        }
      }
    },
    "/api/v1/meeting/speakers" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get the speakers of the current meeting",
        "responses" : {
          "200" : {
            "description" : "ok",
            "schema" : {
              "$ref" : "#/definitions/MeetingSpeakers"
            }
          },
          "404" : {
            "description" : "no meeting ongoing"
          }
        }
      }
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/requesttospeak" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant requests to speak",
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "400" : {
            "description" : "unable to process command"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/cancelrequesttospeak" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant cancels request to speak",
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "400" : {
            "description" : "unable to process command"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/leavemeeting" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to leave the meeting",
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "400" : {
            "description" : "unable to process command"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/joinmeeting" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant want to join the meeting",
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "400" : {
            "description" : "unable to process command"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/stopspeaking" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to stop speaking",
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "400" : {
            "description" : "unable to process command"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/devices/wireless/shutdown" : {
      "post" : {
        "tags" : [ "Devices" ],
        "summary" : "Shutdown all connected wireless devices",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/wirelesschannels/countries" : {
      "get" : {
        "tags" : [ "WirelessChannels" ],
        "summary" : "Get a list of all available countries for the region of the device",
        "operationId" : "WirelessChannels_GetCountries",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Country"
              }
            }
          }
        }
      }
    },
    "/api/v1/wirelesschannels/country" : {
      "get" : {
        "tags" : [ "WirelessChannels" ],
        "summary" : "Get the configured country for the access point",
        "operationId" : "WirelessChannels_GetCountry",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Country"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "WirelessChannels" ],
        "summary" : "Set the current country for the access point",
        "operationId" : "WirelessChannels_PutCountry",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Country"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/agenda" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get the agenda of the current meeting",
        "responses" : {
          "200" : {
            "description" : "ok",
            "schema" : {
              "$ref" : "#/definitions/MeetingAgenda"
            }
          },
          "204" : {
            "description" : "no meeting ongoing"
          }
        }
      }
    },
    "/api/events/meeting/meetingagendachanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when agenda of the active meeting has changed",
        "responses" : {
          "200" : {
            "description" : "Metadata for MeetingAgendaChanged event",
            "schema" : {
              "$ref" : "#/definitions/MeetingAgenda"
            }
          }
        }
      }
    },
    "/api/v1/devices/standbyscreen/types" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Get the types of standby screens which the system supports",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/StandbyScreenTypeDescription"
              }
            }
          }
        }
      }
    },
    "/api/v1/devices/standbyscreen/{type}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Get the standby screen configuration",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "The device type to get the standbyscreen settings from (\"confideaflex\", \"unicos7\", \"unicos10\", \"unibox\")",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StandbyScreenSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Devices" ],
        "summary" : "Set the standby screen configuration",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "The standby screen configuration to be applied",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StandbyScreenSettings"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "The device type to set the standbyscreen settings for (\"confideaflex\", \"unicos7\", \"unicos10\", \"unibox\")",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/votingballot" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to vote",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudVotingBallotCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "400" : {
            "description" : "unable to process command"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/batteryChargingDiagnostics/batteries" : {
      "get" : {
        "tags" : [ "BatteryChargingDiagnostics" ],
        "summary" : "Get the charging batteries",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BatteryChargingDetails"
              }
            }
          }
        }
      }
    },
    "/api/events/batteryChargingDiagnostics/batteryStateChanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Metadata for BatteryStateChanged",
            "schema" : {
              "$ref" : "#/definitions/BatteryChargingDetails"
            }
          }
        }
      }
    },
    "/api/v1/network/8021x" : {
      "get" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Get current 802.1X settings",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Network8021XSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Update 802.1X settings",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Network8021XSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/network/8021x/privateKeyPassword" : {
      "post" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Submit a private key password",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PrivateKeyPassword"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "No private key to unlock"
          },
          "401" : {
            "description" : "Invalid password"
          }
        }
      }
    },
    "/api/v1/network/8021x/ca" : {
      "post" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Upload a CA certificate",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "ca",
          "in" : "formData",
          "description" : "Upload a CA certificate",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Invalid certificate content"
          }
        }
      },
      "delete" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Delete CA certificate",
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/network/8021x/privateKey" : {
      "post" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Upload client private key",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "formData",
          "description" : "Upload a private key",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success"
          },
          "202" : {
            "description" : "Indicates the PEM file was accepted, but needs unlocking. Password is required."
          },
          "400" : {
            "description" : "Invalid key content"
          }
        }
      },
      "delete" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Delete client key",
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/network/8021x/certificate" : {
      "post" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Upload client certificate",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "cert",
          "in" : "formData",
          "description" : "Upload a certificate",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Invalid certificate content"
          }
        }
      },
      "delete" : {
        "tags" : [ "Network8021X" ],
        "summary" : "Delete client certificate",
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/startaudiorecording" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to start audio recording",
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - no recording capable central unit\n - no recording space (left)\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/stopaudiorecording" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to stop audio recording",
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - no recording capable central unit\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/activatenextspeaker" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants activate a next speaker",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudNextSpeakerCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/activatenextreply" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants activate a next reply",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudNextReplyCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/activateagendaitem" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants activate an agenda item",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudAgendaItemIdCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/startvoting" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants start a voting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudAgendaItemIdCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - agenda item not active\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/stopvoting" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants stop a voting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudAgendaItemIdCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - agenda item not active\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/hidevotingresults" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to hide the voting results",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudAgendaItemIdCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - agenda item not active\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/events/customerapi/tokenschanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "Metadata for tokenschanged event",
            "schema" : {
              "$ref" : "#/definitions/ApiTokens"
            }
          }
        }
      }
    },
    "/api/v1/customerapi/token/{uuid}" : {
      "put" : {
        "tags" : [ "CustomerApi" ],
        "summary" : "Change name of an API token",
        "parameters" : [ {
          "name" : "uuid",
          "in" : "path",
          "description" : "uuid of token ",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "body",
          "in" : "body",
          "description" : "New name of the API token",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiTokenName"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Name changed successfully",
            "schema" : {
              "$ref" : "#/definitions/ApiToken"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CustomerApi" ],
        "summary" : "Revoke an API token",
        "parameters" : [ {
          "name" : "uuid",
          "in" : "path",
          "description" : "uuid to remove",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Token deleted successfully"
          },
          "400" : {
            "description" : "Token uuid not found"
          }
        }
      }
    },
    "/api/v1/customerapi/tokens" : {
      "get" : {
        "tags" : [ "CustomerApi" ],
        "summary" : "Get a list of the existing API tokens, active and revoked",
        "responses" : {
          "200" : {
            "description" : "List of API tokens",
            "schema" : {
              "$ref" : "#/definitions/ApiTokens"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "CustomerApi" ],
        "summary" : "Create a new API token",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Name of the new API token",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiTokenName"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Token created",
            "schema" : {
              "$ref" : "#/definitions/ApiToken"
            }
          }
        }
      }
    },
    "/api/events/audiobasic/routingconfigurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioBasicRoutingConfiguration"
            }
          }
        }
      }
    },
    "/api/events/audiobasic/dynamicspresetchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioBasicDynamicsPreset"
            }
          }
        }
      }
    },
    "/api/events/audiobasic/dynamicsconfigurationchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioBasicDynamicsConfiguration"
            }
          }
        }
      }
    },
    "/api/v1/audio/seats/{seat}/defaultinputsensitivityoffset/" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the default input sensitivity offset",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InputSensitivityOffset"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Set default input sensitivity offset of the seat",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InputSensitivityOffset"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "seat id",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/audio/seats/{seat}/inputsensitivityoffset/" : {
      "get" : {
        "tags" : [ "Audio" ],
        "summary" : "Get the active input sensitivity offset",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/InputSensitivityOffset"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Audio" ],
        "summary" : "Set input sensitivity offset of the seat, temporarily (not saved to config).",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InputSensitivityOffset"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      },
      "parameters" : [ {
        "name" : "seat",
        "in" : "path",
        "description" : "seat id",
        "required" : true,
        "type" : "integer"
      } ]
    },
    "/api/v1/audiobasic/routing/configuration" : {
      "get" : {
        "tags" : [ "AudioBasic" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioBasicRoutingConfiguration"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AudioBasic" ],
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioBasicRoutingConfiguration"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audiobasic/routing/microphonesAlwaysActive" : {
      "get" : {
        "tags" : [ "AudioBasic" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SwitchValue"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AudioBasic" ],
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SwitchValue"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audiobasic/routing/loudspeakersAlwaysActive" : {
      "get" : {
        "tags" : [ "AudioBasic" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SwitchValue"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AudioBasic" ],
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SwitchValue"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audiobasic/routing/mixMinus" : {
      "get" : {
        "tags" : [ "AudioBasic" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SwitchValue"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AudioBasic" ],
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SwitchValue"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audiobasic/dynamics/preset" : {
      "get" : {
        "tags" : [ "AudioBasic" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioBasicDynamicsPreset"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AudioBasic" ],
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioBasicDynamicsPreset"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/audiobasic/dynamics/configuration" : {
      "get" : {
        "tags" : [ "AudioBasic" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioBasicDynamicsConfiguration"
            }
          }
        }
      }
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/adhocagendaitem/" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants add an adhoc agenda item",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudAddAdHocAgendaItemCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/removefromspeakerlist" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to remove a speaker from the speaker list",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudGenericParticipantCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/removefromrequestlist/" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to remove a speaker from the request list",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudGenericParticipantCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/addtospeakerlist" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to add a speaker to the speaker list",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudGenericParticipantCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/addtorequestlist" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant wants to add a speaker to the request list",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudGenericParticipantCommand"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "precondition failed:\n - participant not authorized (no chairperson)"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/meeting/participants/cloud/{cloudParticipantId}/joinmeetinghybrid" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "cloud participant want to join the meeting",
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "400" : {
            "description" : "unable to process command"
          }
        }
      },
      "parameters" : [ {
        "name" : "cloudParticipantId",
        "in" : "path",
        "description" : "cloud id of the participant",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/audiobasic/routing/bassCut/" : {
      "get" : {
        "tags" : [ "AudioBasic" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SwitchValue"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AudioBasic" ],
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SwitchValue"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/interpretation/maxchannels" : {
      "get" : {
        "tags" : [ "Interpretation" ],
        "summary" : "Get the maximum number of channels which can be used on the system in its current configuration",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MaxChannelsData"
            }
          }
        }
      }
    },
    "/api/v1/room/layouts" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get the a list of room layout info which can be used in Confero meetings",
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "Details about room layout",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RoomLayoutId"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Room" ],
        "summary" : "Add a new room layout which can be used by Confero meetings",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomLayout"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "can happen when the room layout uses an ID which is already in use by another room layout"
          }
        }
      }
    },
    "/api/v1/room/layouts/{id}" : {
      "get" : {
        "tags" : [ "Room" ],
        "summary" : "Get the Confero room layout with the given id",
        "responses" : {
          "200" : {
            "description" : "ok, returns layout",
            "schema" : {
              "$ref" : "#/definitions/RoomLayout"
            }
          },
          "412" : {
            "description" : "room layout with given id does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "Update the Confero room layout with the given ID",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomLayout"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "room layout with the given id does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Room" ],
        "summary" : "Delete the Confero roomlayout with given id",
        "responses" : {
          "204" : {
            "description" : "ok"
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "roomlayout id",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/system/timezone" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get current timezone.",
        "responses" : {
          "200" : {
            "description" : "Return timezone name.",
            "schema" : {
              "$ref" : "#/definitions/RoomTimezone"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Set current timezone name.",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomTimezone"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return current timezone name.",
            "schema" : {
              "$ref" : "#/definitions/RoomTimezone"
            }
          },
          "400" : {
            "description" : "Invalid timezone",
            "schema" : {
              "$ref" : "#/definitions/RoomTimezoneError"
            }
          }
        }
      }
    },
    "/api/v1/system/camerasettings" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the current camera settings",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CameraSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change the camera settings",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CameraSettings"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/certificate/certificate" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Upload server certificate",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "cert",
          "in" : "formData",
          "description" : "Upload a certificate",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Invalid certificate content"
          }
        }
      },
      "delete" : {
        "tags" : [ "System" ],
        "summary" : "Delete client certificate",
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      },
      "head" : {
        "tags" : [ "System" ],
        "summary" : "Check if a certificate is present",
        "responses" : {
          "200" : {
            "description" : "Certificate exists"
          },
          "404" : {
            "description" : "Certificate does not exist"
          }
        }
      }
    },
    "/api/v1/system/certificate/certificate/info" : {
      "get" : {
        "tags" : [ "System" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Certificate information",
            "schema" : {
              "$ref" : "#/definitions/CertificateInfo"
            }
          },
          "404" : {
            "description" : "No certificate present"
          }
        }
      }
    },
    "/api/v1/system/certificate/privateKey" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Upload system private key",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "key",
          "in" : "formData",
          "description" : "Upload a private key",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "201" : {
            "description" : "Success"
          },
          "202" : {
            "description" : "Indicates the PEM file was accepted, but needs unlocking. Password is required."
          },
          "400" : {
            "description" : "Invalid key content"
          }
        }
      },
      "delete" : {
        "tags" : [ "System" ],
        "summary" : "Delete system private key",
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      },
      "head" : {
        "tags" : [ "System" ],
        "responses" : {
          "200" : {
            "description" : "Private key exists"
          },
          "404" : {
            "description" : "Private key does not exist"
          }
        }
      }
    },
    "/api/v1/system/certificate/privateKeyPassword" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Submit a private key password",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PrivateKeyPassword"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "No private key to unlock"
          },
          "401" : {
            "description" : "Invalid password"
          }
        }
      }
    },
    "/api/v1/system/configuration" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the current system configuration",
        "operationId" : "System_GetConfiguration",
        "consumes" : [ ],
        "responses" : {
          "204" : {
            "description" : "configuration archive is being created"
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Upload the new system configuration",
        "operationId" : "System_UploadConfiguration",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "Configuration",
          "in" : "formData",
          "description" : "Upload the configuration",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Wrong format"
          }
        }
      }
    },
    "/api/v1/system/configuration/download" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the configuration archive",
        "produces" : [ "application/x-compressed-tar" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "format" : "binary",
              "type" : "string"
            }
          },
          "400" : {
            "description" : "will occur when a request for the config archive was not made before this call."
          }
        }
      }
    },
    "/api/v1/system/dateformat" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the current date format for the room",
        "responses" : {
          "200" : {
            "description" : "Date format",
            "schema" : {
              "$ref" : "#/definitions/DateFormat"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change the date format for the room",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DateFormat"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/datetime" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get current date and time of the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/RoomDateTime"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change current date and time in the room",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomDateTime"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/defaultinterfacelanguage" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the default interface language",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DefaultInterfaceLanguage"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change the default interface language",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DefaultInterfaceLanguage"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Unsupported language"
          }
        }
      }
    },
    "/api/v1/system/info" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get information about the system",
        "responses" : {
          "200" : {
            "description" : "System info",
            "schema" : {
              "$ref" : "#/definitions/SystemInfo"
            }
          }
        }
      }
    },
    "/api/v1/system/ipconfiguration" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the current ip configuration of the room",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/IpConfiguration"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change the ip configuration of the room",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IpConfiguration"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/license" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get info about the current license",
        "consumes" : [ ],
        "produces" : [ "application/json", "text/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/LicenseList"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Upload a license",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "Resource",
          "in" : "formData",
          "description" : "Upload a resource",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object"
            }
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      }
    },
    "/api/v1/system/log/" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get a url to download all log files",
        "responses" : {
          "200" : {
            "description" : "Ok. Event will be sent with download url from the moment the achive is ready to be downloaded."
          }
        }
      }
    },
    "/api/v1/system/log/level" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the current loglevel",
        "responses" : {
          "200" : {
            "description" : "Log level",
            "schema" : {
              "$ref" : "#/definitions/LogLevel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change the log level",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LogLevel"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/operatingmode" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the current operating mode.",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/OperatingMode"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change the operating mode",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Operating mode to be set",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OperatingMode"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Unable to change operating mode."
          }
        }
      }
    },
    "/api/v1/system/reboot" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Reboot the system",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/reset" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Reset the system to factory defaults",
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/services/" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Retrieve a list of services available on the system",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceList"
            },
            "examples" : { }
          }
        }
      }
    },
    "/api/v1/system/services/{name}/stop" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Stop the specified service",
        "operationId" : "Services_StopService",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "description" : "Name of the service to stop. Only services listed by /api/v1/system/services/ will work.",
        "required" : true,
        "type" : "string",
        "enum" : [ "Core", "LegacyRestApi", "PlixusCamera", "We", "PlixusCustomerApi" ]
      } ]
    },
    "/api/v1/system/services/{name}/start" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Start the specified service",
        "operationId" : "Services_StartService",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "description" : "Name of the service to start. Only services listed by /api/v1/system/services/ will work.",
        "required" : true,
        "type" : "string",
        "enum" : [ "Core", "LegacyRestApi", "PlixusCamera", "We", "PlixusCustomerApi" ]
      } ]
    },
    "/api/v1/system/services/{name}/restart" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Restart the specified service",
        "operationId" : "Services_RestartService",
        "consumes" : [ ],
        "produces" : [ ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "An invalid or missing input parameter will result in a bad request"
          }
        }
      },
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "description" : "Name of the service to restart. Only services listed by /api/v1/system/services/ will work.",
        "required" : true,
        "type" : "string",
        "enum" : [ "Core", "LegacyRestApi", "PlixusCamera", "We", "PlixusCustomerApi" ]
      } ]
    },
    "/api/v1/system/services/{name}" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the state of the given service",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/ServiceState"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "description" : "Name of the service to get the state from. Only services listed by /api/v1/system/services/ will work.",
        "required" : true,
        "type" : "string",
        "enum" : [ "Core", "LegacyRestApi", "PlixusCamera", "We", "PlixusCustomerApi" ]
      } ]
    },
    "/api/v1/system/setupwizard" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the setup wizard state",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SetupWizard"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change the setup wizard state",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SetupWizard"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          }
        }
      }
    },
    "/api/v1/system/splashscreen" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the resource of the splash screen",
        "produces" : [ "image/png", "image/jpg", "image/jpeg" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "format" : "binary",
              "type" : "string"
            }
          },
          "204" : {
            "description" : "No splashscreen was defined yet."
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Upload a splash screen resource",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "Resource",
          "in" : "formData",
          "description" : "Upload a resource",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      },
      "delete" : {
        "tags" : [ "System" ],
        "summary" : "Deleted the resource of the splash screen",
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      }
    },
    "/api/v1/system/timeformat" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get the current time format for the room",
        "responses" : {
          "200" : {
            "description" : "Time format",
            "schema" : {
              "$ref" : "#/definitions/TimeFormat"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Change the time format for the room",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TimeFormat"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/update" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Update the system with the files specified in the body",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Update file name",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateFileNameList"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/update/files" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get all update files which are currently on the system",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/UpdateFileList"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Upload an update file to the system",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "The update file to upload",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/v1/system/update/files/{fileName}" : {
      "post" : {
        "tags" : [ "System" ],
        "summary" : "Update file info",
        "parameters" : [ {
          "name" : "fileName",
          "in" : "path",
          "description" : "file name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "body",
          "in" : "body",
          "description" : "Info of the file indicated by fileName.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateFileInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          }
        }
      },
      "parameters" : [ {
        "name" : "fileName",
        "in" : "path",
        "description" : "file name",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/system/update/progress" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Gets the current update progress",
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/FullUpdateProgress"
            }
          },
          "400" : {
            "description" : "System is not updating"
          }
        }
      }
    },
    "/api/events/system/timezonechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Timezone changed event.",
        "responses" : {
          "200" : {
            "description" : "Timezone changed event.",
            "schema" : {
              "$ref" : "#/definitions/RoomTimezoneChanged"
            }
          }
        }
      }
    },
    "/api/v1/system/ntpserver" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Get current ntp server address.",
        "responses" : {
          "200" : {
            "description" : "Ntp server address.",
            "schema" : {
              "$ref" : "#/definitions/RoomNtpServer"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Set ntp server address.",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Set ntp server address.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoomNtpServer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ntp server address.",
            "schema" : {
              "$ref" : "#/definitions/RoomNtpServer"
            }
          },
          "400" : {
            "description" : "Invalid ntp server address.",
            "schema" : {
              "$ref" : "#/definitions/RoomNtpServerError"
            }
          }
        }
      }
    },
    "/api/events/system/ntpserverchanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Ntp server address changed event.",
        "responses" : {
          "200" : {
            "description" : "Ntp server address changed event.",
            "schema" : {
              "$ref" : "#/definitions/RoomNtpServerChanged"
            }
          }
        }
      }
    },
    "/api/v1/meeting/adhoc" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get the current adhoc meeting",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AdhocMeeting"
            }
          },
          "412" : {
            "description" : "No adhoc meeting ongoing"
          }
        }
      },
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "Prepare and start an ad hoc meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NewAdhocMeeting"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK, meeting ID",
            "schema" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/add-participant" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "add a participant during the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingAddParticipantAction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "412" : {
            "description" : "no open meeting"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/remove-participant" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "remove a participant during the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingRemoveParticipantAction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "412" : {
            "description" : "no open meeting"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/set-participant-badge" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "set the participant badge during the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingSetParticipantBadgeAction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "412" : {
            "description" : "no open meeting, non existing participant"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/remove-participant-badge" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "remove the participant badge during the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingRemoveParticipantBadgeAction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "412" : {
            "description" : "no open meeting, non existing participant"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/set-participant-name" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "set the participant name during the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingSetParticipantNameAction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "412" : {
            "description" : "no open meeting, non existing participant"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/start-discussion" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "start a discussion topic in the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingStartDiscussionAction"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK, returns discussion id",
            "schema" : {
              "type" : "string"
            }
          },
          "412" : {
            "description" : "no open meeting"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/stop-discussion" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "stop a discussion topic in the meeting",
        "description" : "This effectively removes the discussion title from all devices, websites",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingStopDiscussionAction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "412" : {
            "description" : "no open meeting"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/set-participant-presence" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "set participant presence in the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingSetParticipantPresenceAction"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK, returns discussion id",
            "schema" : {
              "type" : "string"
            }
          },
          "412" : {
            "description" : "no open meeting, non existing participant"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/start-voting" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "start a voting in the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingStartVotingAction"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK, returns voting id",
            "schema" : {
              "type" : "string"
            }
          },
          "412" : {
            "description" : "no open meeting"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/stop-voting" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "stop a voting in the meeting",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingStopVotingAction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "412" : {
            "description" : "no open meeting"
          }
        }
      }
    },
    "/api/v1/meeting/adhoc/actions/hide-voting-results" : {
      "post" : {
        "tags" : [ "Meeting" ],
        "summary" : "hide voting results in the meeting",
        "description" : "This effectively removes the voting results, title, etc from all devices, websites",
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AdhocMeetingHideVotingResultsAction"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "412" : {
            "description" : "no open meeting"
          }
        }
      }
    },
    "/api/v1/meeting/voting-results" : {
      "get" : {
        "tags" : [ "Meeting" ],
        "summary" : "Get voting result of active voting in the meeting",
        "responses" : {
          "200" : {
            "description" : "Meeting info",
            "schema" : {
              "$ref" : "#/definitions/AdhocMeetingVotingResult"
            }
          }
        }
      }
    },
    "/api/events/meeting/adhocmeetingparticipantpresencechanged" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Event when the presence of an adhoc meeting participant has changed",
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AdHocMeetingParticipantPresenceChanged"
            }
          }
        }
      }
    },
    "/api/v1/audioadvanced/configurations" : {
      "get" : {
        "tags" : [ "AudioAdvanced" ],
        "summary" : "Get a list of available advanced audio configurations",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AudioAdvancedConfiguration"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AudioAdvanced" ],
        "summary" : "Create a new advanced audio configuration",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "Properties of the advanced audio configuration to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioAdvancedConfigurationCreate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the newly created advanced audio configuration.",
            "schema" : {
              "$ref" : "#/definitions/AudioAdvancedConfiguration"
            }
          }
        }
      }
    },
    "/api/v1/audioadvanced/configurations/{configuration}" : {
      "get" : {
        "tags" : [ "AudioAdvanced" ],
        "summary" : "Get a specific advanced audio configuration",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioAdvancedConfiguration"
            }
          },
          "404" : {
            "description" : "The specified configuration was not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "AudioAdvanced" ],
        "summary" : "Delete a specific advanced audio configuration",
        "produces" : [ "application/json" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "The specified configuration cannot be removed, because it is a default configuration or it is currently active"
          },
          "404" : {
            "description" : "The specified configuration was not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "AudioAdvanced" ],
        "summary" : "Allows to rename or activate a configuration. Note that the \"userDefined\" property cannot be changed",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "description" : "The data to be changed",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AudioAdvancedConfiguration"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "The specified configuration was not found"
          }
        }
      },
      "parameters" : [ {
        "name" : "configuration",
        "in" : "path",
        "description" : "The addressed configuration UUID",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/api/v1/audioadvanced/configurations/active" : {
      "get" : {
        "tags" : [ "AudioAdvanced" ],
        "summary" : "Get the active advanced audio configuration",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioAdvancedConfiguration"
            }
          }
        }
      }
    },
    "/api/events/audioadvanced/configurationAdded/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Notify the client that a new advanced audio configuration was added",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioAdvancedConfiguration"
            }
          }
        }
      }
    },
    "/api/events/audioadvanced/activeConfigurationChanged/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Notify the client that the active advanced audio configuration changed",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioAdvancedConfiguration"
            }
          }
        }
      }
    },
    "/api/events/audioadvanced/configurationRemoved/" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Notify the client that an advanced audio configuration was removed",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/AudioAdvancedConfigurationRemoved"
            }
          }
        }
      }
    },
    "/api/v1/room/layouts/{id}/background-image" : {
      "put" : {
        "tags" : [ "Room" ],
        "summary" : "set background image resource of room layout",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "text/json" ],
        "parameters" : [ {
          "name" : "Resource",
          "in" : "formData",
          "description" : "Upload a resource",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "204" : {
            "description" : "ok"
          },
          "412" : {
            "description" : "room layout does not exist"
          }
        }
      },
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "RoomLayout ID",
        "required" : true,
        "type" : "string"
      } ]
    }
  },
  "definitions" : {
    "ConfideaLicenseWithSerial" : {
      "description" : "Mapping of a confidea license with the serial of the device it has been applied to",
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "The serial of the device formatted as hex string",
          "type" : "string"
        },
        "license" : {
          "$ref" : "#/definitions/ConfideaLicense"
        }
      }
    },
    "ConfideaLicense" : {
      "description" : "Licenses that should be applied to a ConfideaNG device",
      "type" : "object",
      "properties" : {
        "dualDelegate" : {
          "description" : "Type of dual delegate license requested",
          "enum" : [ "1D1I", "2D2I", "1D2I" ],
          "type" : "string"
        },
        "interpretation" : {
          "description" : "Is an interpretation license requested (uses 2 licenses if dualDelegate != 1D1I)",
          "type" : "boolean"
        },
        "badge" : {
          "description" : "Is a badge license requested (uses 2 licenses if dualDelegate != 1D1I)",
          "type" : "boolean"
        },
        "voting" : {
          "description" : "Is a voting license requested (uses 2 licenses if dualDelegate != 1D1I)",
          "type" : "boolean"
        },
        "bluetooth" : {
          "description" : "Is a bluetooth audio license requested (mutually exclusive with dualdelegate other than 1D1I)",
          "type" : "boolean"
        }
      }
    },
    "ConfideaLicensesLeft" : {
      "description" : "Overview of maximum available confidea licenses and how many are still free",
      "type" : "object",
      "properties" : {
        "badgeLicensesMax" : {
          "format" : "int32",
          "description" : "The maximum amount of badge licenses available",
          "type" : "integer"
        },
        "badgeLicenseLeft" : {
          "format" : "int32",
          "description" : "The amount of badge licenses currently available",
          "type" : "integer"
        },
        "bluetoothLicensesMax" : {
          "format" : "int32",
          "description" : "The maximum amount of bluetooth audio licenses available",
          "type" : "integer"
        },
        "bluetoothLicenseLeft" : {
          "format" : "int32",
          "description" : "The amount of bluetooth audio licenses currently available",
          "type" : "integer"
        },
        "dualDelegateLicensesMax" : {
          "format" : "int32",
          "description" : "The maximum amount of dual elegate licenses available",
          "type" : "integer"
        },
        "dualDelegateLicenseLeft" : {
          "format" : "int32",
          "description" : "The amount of dual elegate licenses currently available",
          "type" : "integer"
        },
        "interpretationLicensesMax" : {
          "format" : "int32",
          "description" : "The maximum amount of interpretation licenses available",
          "type" : "integer"
        },
        "interpretationLicenseLeft" : {
          "format" : "int32",
          "description" : "The amount of interpretation licenses currently available",
          "type" : "integer"
        },
        "votingLicensesMax" : {
          "format" : "int32",
          "description" : "The maximum amount of voting licenses available",
          "type" : "integer"
        },
        "votingLicenseLeft" : {
          "format" : "int32",
          "description" : "The amount of voting licenses currently available",
          "type" : "integer"
        }
      }
    },
    "DeviceNameInfo" : {
      "description" : "Translation from hardware type to commercial name of device",
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "description" : "Id of the device as integer",
          "type" : "integer"
        },
        "type" : {
          "description" : "Id of the device formatted as hex string",
          "type" : "string"
        },
        "name" : {
          "description" : "Commercial name of the device",
          "type" : "string"
        },
        "family" : {
          "description" : "Commercial name of the device's family",
          "type" : "string"
        }
      }
    },
    "DeviceInfo" : {
      "description" : "Summary information about a device",
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "Unique serial number of the device",
          "type" : "string"
        },
        "firmwareType" : {
          "description" : "Type of device",
          "type" : "string"
        },
        "bootStatus" : {
          "description" : "Boot status of the device",
          "enum" : [ "Offline", "Golden", "Application" ],
          "type" : "string"
        },
        "healthStatus" : {
          "description" : "Health status of the device",
          "enum" : [ "Offline", "Error", "Warning", "Online" ],
          "type" : "string"
        },
        "testStatus" : {
          "description" : "True if the device is being tested",
          "type" : "boolean"
        },
        "neighbours" : {
          "description" : "Serial number of neighbour devices",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "highlightState" : {
          "$ref" : "#/definitions/HighlightState"
        }
      }
    },
    "HighlightState" : {
      "description" : "Highlight state of a device",
      "type" : "object",
      "properties" : {
        "ledState" : {
          "description" : "State of the led that should be highlighted",
          "enum" : [ "Off", "On", "Blinking" ],
          "type" : "string"
        },
        "ledColor" : {
          "description" : "Color of the led that should be highlighted",
          "enum" : [ "Green", "Red" ],
          "type" : "string"
        }
      }
    },
    "DeviceDetails" : {
      "description" : "Detailed information about a device",
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "Unique serial number of the device",
          "type" : "string"
        },
        "bootStatus" : {
          "description" : "Booth status of the devie",
          "enum" : [ "Offline", "Golden", "Application" ],
          "type" : "string"
        },
        "healthStatus" : {
          "description" : "Health status of the device",
          "enum" : [ "Offline", "Error", "Warning", "Online" ],
          "type" : "string"
        },
        "testStatus" : {
          "description" : "True if the device is being tested",
          "type" : "boolean"
        },
        "bootErrorStatus" : {
          "description" : "Booth error status of the devie",
          "enum" : [ "NoError", "WatchDog", "CRCError", "ExternalReconfiguration", "ExternalStatusAssertion" ],
          "type" : "string"
        },
        "firmwareType" : {
          "description" : "Firmware type of device",
          "type" : "string"
        },
        "firmwareVersionGolden" : {
          "description" : "Firmware version of golden",
          "type" : "string"
        },
        "firmwareVersionApplication" : {
          "description" : "Firmware version of application",
          "type" : "string"
        },
        "softwareVersionApplication" : {
          "description" : "Software version of application",
          "type" : "string"
        },
        "neighbours" : {
          "description" : "Serial number of neighbour devices",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "ports" : {
          "description" : "Information about device network ports",
          "uniqueItems" : false,
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkPort"
          }
        },
        "childDevices" : {
          "description" : "List of child devices that are part of this device",
          "uniqueItems" : false,
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DeviceDetails"
          }
        },
        "hardwareUnits" : {
          "description" : "List of hardware units",
          "uniqueItems" : false,
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HardwareUnit"
          }
        },
        "highlightState" : {
          "$ref" : "#/definitions/HighlightState"
        },
        "wirelessLinkStatus" : {
          "$ref" : "#/definitions/WirelessLinkStatus",
          "description" : "The wireless link status reported by the device"
        },
        "powerStatus" : {
          "$ref" : "#/definitions/PowerStatus",
          "description" : "General power status of the device"
        }
      }
    },
    "NetworkPort" : {
      "description" : "Details about a device network port",
      "type" : "object",
      "properties" : {
        "number" : {
          "format" : "int32",
          "description" : "Number of the network port",
          "type" : "integer"
        },
        "voltage" : {
          "format" : "double",
          "description" : "Voltage of the port",
          "type" : "number"
        },
        "current" : {
          "format" : "double",
          "description" : "Current of the port",
          "type" : "number"
        },
        "linkErrorCount" : {
          "format" : "int32",
          "description" : "Number of link errors counted on the port",
          "type" : "integer"
        },
        "packetErrorCount" : {
          "format" : "int32",
          "description" : "Number of packet errors counted on the port",
          "type" : "integer"
        },
        "isConnected" : {
          "description" : "True when this port is currently connected to another device",
          "type" : "boolean"
        },
        "isNetworkExtender" : {
          "description" : "True when this port is used for extending the network",
          "type" : "boolean"
        }
      }
    },
    "HardwareUnit" : {
      "description" : "Details about a hardware unit",
      "type" : "object",
      "properties" : {
        "extensions" : {
          "description" : "List of unit extensions defining this hardware unit",
          "uniqueItems" : false,
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UnitExtension"
          }
        }
      }
    },
    "UnitExtension" : {
      "description" : "Details about a unit extension defining a hardware unit",
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "Type of the unit extension",
          "type" : "string"
        },
        "properties" : {
          "description" : "List of properties of the unit extension",
          "uniqueItems" : false,
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UnitExtensionProperty"
          }
        }
      }
    },
    "UnitExtensionProperty" : {
      "description" : "Property of a single unit extension",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the property",
          "type" : "string"
        },
        "value" : {
          "description" : "Value of the property",
          "type" : "string"
        }
      }
    },
    "DeviceTestRequest" : {
      "description" : "Request for testing a device",
      "type" : "object",
      "properties" : {
        "testMicrophone" : {
          "description" : "True when microphone should be tested",
          "type" : "boolean"
        },
        "testSpeakers" : {
          "description" : "True when speakers should be tested",
          "type" : "boolean"
        },
        "testLED" : {
          "description" : "True when LED's should be tested",
          "type" : "boolean"
        }
      }
    },
    "TestEnabled" : {
      "properties" : {
        "testModeEnabled" : {
          "description" : "True if test mode is enabled",
          "type" : "boolean"
        }
      }
    },
    "NotificationId" : {
      "properties" : {
        "connectionId" : {
          "description" : "The client id for notifications",
          "type" : "string"
        }
      }
    },
    "Notification" : {
      "description" : "Notification with event information",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the event",
          "type" : "string"
        },
        "moduleName" : {
          "description" : "Name of the module where the event occurred",
          "type" : "string"
        },
        "timestamp" : {
          "format" : "date-time",
          "description" : "Date and time when the event occurred",
          "type" : "string"
        },
        "data" : {
          "description" : "Information about the event",
          "type" : "object"
        }
      }
    },
    "NotificationModule" : {
      "description" : "Module that exposes notifications",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the module",
          "type" : "string"
        },
        "isSubscribed" : {
          "description" : "True when the client is subscribed to this module",
          "type" : "boolean"
        }
      }
    },
    "DeviceAdded" : {
      "description" : "Event when device is detected in the room",
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "Device serial of newly added device",
          "type" : "string"
        }
      }
    },
    "DeviceDeleted" : {
      "description" : "Event when device was deleted from room",
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "Device serial",
          "type" : "string"
        }
      }
    },
    "HealthStateChanged" : {
      "description" : "Event when the HealthState of a device changed",
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "Unique serial number of the device",
          "type" : "string"
        },
        "healthStatus" : {
          "description" : "Health status of the device",
          "enum" : [ "Offline", "Error", "Warning", "Online" ],
          "type" : "string"
        }
      }
    },
    "NeighboursChanged" : {
      "description" : "Event when the neighbours of a device changed",
      "properties" : {
        "serial" : {
          "description" : "Unique serial number of the device",
          "type" : "string"
        },
        "neighbours" : {
          "description" : "Serial number of neighbour device",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ConfideaLicenseWithSerialList" : {
      "description" : "List of ConfideaLicenses with mapped serial",
      "type" : "object",
      "properties" : {
        "list" : {
          "description" : "The list of Licenses mapped with serials",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConfideaLicenseWithSerial"
          }
        }
      }
    },
    "ConferenceSettingsChanged" : {
      "type" : "object",
      "properties" : {
        "settings" : {
          "$ref" : "#/definitions/RoomConferenceSettings"
        }
      }
    },
    "DefaultConferenceSettingsChanged" : {
      "type" : "object",
      "properties" : {
        "settings" : {
          "$ref" : "#/definitions/RoomConferenceSettings"
        }
      }
    },
    "VideoConfigurationInfo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean"
        }
      }
    },
    "VideoConfigurationData" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean"
        },
        "inputGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoInputGroup"
          }
        },
        "videoStreams" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoStream"
          }
        },
        "selectorGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoSelectorGroup"
          }
        }
      }
    },
    "VideoInputGroup" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "inputs" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "backupInput" : {
          "format" : "int32",
          "type" : "integer"
        },
        "type" : {
          "enum" : [ "normal", "talking_head", "request" ],
          "type" : "string"
        }
      }
    },
    "VideoSelectorGroup" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "selectors" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      }
    },
    "VideoNodeState" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "type" : "boolean"
        }
      }
    },
    "VideoConfigurationDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "locked" : {
          "type" : "boolean"
        },
        "inputGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoInputGroup"
          }
        },
        "videoStreams" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoStream"
          }
        },
        "selectorGroups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VideoSelectorGroup"
          }
        }
      }
    },
    "VideoStream" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "inputGroup" : {
          "format" : "int32",
          "description" : "Specifies which input group is connected to the stream. Equals -1 when no group connected.",
          "type" : "integer"
        },
        "selectorGroups" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "isEnabled" : {
          "type" : "boolean"
        }
      }
    },
    "Conversation" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "ID of seat that initiates the conversation",
          "type" : "integer"
        },
        "toSeat" : {
          "description" : "ID of seat that accepts the conversation",
          "type" : "integer"
        },
        "startDateTime" : {
          "format" : "date-time",
          "description" : "Start date and time of conversation",
          "type" : "string"
        }
      }
    },
    "ConversationRequest" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "ID of seat that requests the conversation",
          "type" : "integer"
        },
        "toType" : {
          "description" : "Type of the receiver of the call",
          "enum" : [ "seat", "booth" ],
          "type" : "string"
        },
        "toId" : {
          "description" : "Seat or booth ID of the receiver of the call",
          "type" : "integer"
        }
      }
    },
    "ConversationRequested" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "Seat ID that requests the call",
          "type" : "integer"
        },
        "toType" : {
          "description" : "Type of the receiver of the call",
          "enum" : [ "seat", "booth" ],
          "type" : "string"
        },
        "toId" : {
          "description" : "Seat or booth ID of the receiver of the call",
          "type" : "integer"
        }
      }
    },
    "ConversationAccepted" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "Seat ID that requested the call",
          "type" : "integer"
        },
        "toSeat" : {
          "description" : "Seat ID that accepted the call",
          "type" : "integer"
        }
      }
    },
    "ConversationEnded" : {
      "type" : "object",
      "properties" : {
        "fromSeat" : {
          "description" : "Seat ID that requested the call",
          "type" : "integer"
        },
        "toSeat" : {
          "description" : "Seat ID that accepted the call",
          "type" : "integer"
        }
      }
    },
    "ConversationCanceled" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "description" : "Seat ID that canceled the call",
          "type" : "integer"
        }
      }
    },
    "IntercomEnabled" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "Booth or seat",
          "enum" : [ "seat", "booth" ],
          "type" : "string"
        },
        "id" : {
          "description" : "Id of the booth or seat",
          "type" : "integer"
        }
      }
    },
    "IntercomDisabled" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "Booth or seat",
          "enum" : [ "seat", "booth" ],
          "type" : "string"
        },
        "id" : {
          "description" : "Id of the booth or seat",
          "type" : "integer"
        }
      }
    },
    "SeatDiscussionState" : {
      "type" : "object",
      "properties" : {
        "seatNumber" : {
          "format" : "int32",
          "type" : "integer"
        },
        "microphoneState" : {
          "enum" : [ "on", "off" ],
          "type" : "string"
        },
        "isRequestingToSpeak" : {
          "type" : "boolean"
        },
        "isRequestingToReply" : {
          "type" : "boolean"
        },
        "role" : {
          "description" : "The role of the seat",
          "enum" : [ "delegate", "vip", "chairman" ]
        }
      }
    },
    "SeatDiscussionStateChanged" : {
      "type" : "object",
      "properties" : {
        "discussionState" : {
          "$ref" : "#/definitions/SeatDiscussionState"
        }
      }
    },
    "SeatButton" : {
      "description" : "A button somewhere on a seat",
      "type" : "object",
      "properties" : {
        "seatNumber" : {
          "format" : "int32",
          "description" : "Number of seat where te button is located",
          "type" : "integer"
        },
        "button" : {
          "$ref" : "#/definitions/Button",
          "description" : "Definition of the button located on the seat"
        },
        "isPressEnabled" : {
          "description" : "True when button press is enabled",
          "type" : "boolean"
        },
        "isReleaseEnabled" : {
          "description" : "True when button release is enabled",
          "type" : "boolean"
        }
      }
    },
    "Button" : {
      "description" : "Definition of a button",
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "Type of the button",
          "enum" : [ "microphone", "prior", "next", "voting", "nameplate", "reply", "custom" ]
        },
        "index" : {
          "format" : "int32",
          "description" : "Index of the button if there is more than one button",
          "type" : "integer"
        },
        "name" : {
          "description" : "Name of the button when it's a custom button",
          "type" : "string"
        }
      }
    },
    "SeatLed" : {
      "description" : "Seat led with its state",
      "type" : "object",
      "properties" : {
        "seatNumber" : {
          "format" : "int32",
          "description" : "Number of the seat where the led is located",
          "type" : "integer"
        },
        "type" : {
          "description" : "Type of led",
          "enum" : [ "button", "microphone", "device" ],
          "type" : "string"
        },
        "deviceType" : {
          "format" : "int32",
          "description" : "Type of device when led type is 'Device'",
          "type" : "integer"
        },
        "index" : {
          "format" : "int32",
          "description" : "Zero based index of the led if there is more than one led",
          "type" : "integer"
        },
        "state" : {
          "description" : "State of the led",
          "enum" : [ "on", "blinkingSlow", "blinkingMedium", "blinkingFast", "off" ],
          "type" : "string"
        },
        "onColor" : {
          "$ref" : "#/definitions/LedColor",
          "description" : "Color to be used when led is on"
        },
        "offColor" : {
          "$ref" : "#/definitions/LedColor",
          "description" : "Color to be used when led is off"
        }
      }
    },
    "LedColor" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "description" : "Hex RGB value of the color",
          "type" : "string"
        }
      }
    },
    "Language" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "iso" : {
          "type" : "string"
        }
      }
    },
    "ChannelListeners" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "listeners" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "ChannelQuality" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "quality" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "SendMessageModel" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string"
        },
        "beep" : {
          "type" : "boolean"
        },
        "booths" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      }
    },
    "InterpretationConfigurationDescription" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "InterpretationConfigurationData" : {
      "description" : "Interpretation configuration data",
      "required" : [ "name" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the interpretation configuration",
          "type" : "string"
        },
        "description" : {
          "description" : "Description about the interpretation configuration",
          "type" : "string"
        },
        "isLocked" : {
          "description" : "True when interpretation configuration is locked for editing",
          "type" : "boolean"
        },
        "isAudienceIndicationEnabled" : {
          "description" : "True when audience indication is enabled",
          "type" : "boolean"
        },
        "audienceIndicationUpdateInterval" : {
          "format" : "int32",
          "description" : "Interval in seconds to update the audience indication (when enabled)",
          "type" : "integer"
        },
        "intraBoothConfiguration" : {
          "$ref" : "#/definitions/IntraBoothConfiguration",
          "description" : "The interpretation mode configuration of desks between booths"
        },
        "interBoothInterpretationMode" : {
          "description" : "The interpretation mode of desks within a booth",
          "enum" : [ "mixed", "override", "lock_A_Override_B" ],
          "type" : "string"
        },
        "isSlowdownEnabled" : {
          "description" : "True when slow down button is enabled",
          "type" : "boolean"
        },
        "channels" : {
          "description" : "The language channels defined in this interpretation configuration",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LanguageChannel"
          }
        },
        "deskConfigurations" : {
          "description" : "The individual desk configurations",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InterpretationDeskConfiguration"
          }
        }
      }
    },
    "LanguageChannel" : {
      "type" : "object",
      "properties" : {
        "order" : {
          "format" : "int32",
          "type" : "integer"
        },
        "language" : {
          "type" : "string"
        },
        "displayText" : {
          "type" : "string"
        },
        "routingMode" : {
          "enum" : [ "disabled", "booth", "external", "empty" ]
        },
        "booths" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "autoFloor" : {
          "type" : "boolean"
        },
        "isRecorded" : {
          "type" : "boolean"
        }
      }
    },
    "InterpretationDeskConfiguration" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        },
        "allowedOutputChannels" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "relayChannelPresets" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "outputChannelPresets" : {
          "type" : "array",
          "items" : {
            "format" : "int32",
            "type" : "integer"
          }
        }
      }
    },
    "InterpretationConfiguration" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "format" : "int32",
          "type" : "integer"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "isLocked" : {
          "type" : "boolean"
        },
        "isAudienceIndicationEnabled" : {
          "type" : "boolean"
        },
        "audienceIndicationUpdateInterval" : {
          "format" : "int32",
          "type" : "integer"
        },
        "intraBoothConfiguration" : {
          "$ref" : "#/definitions/IntraBoothConfiguration"
        },
        "interBoothInterpretationMode" : {
          "enum" : [ "mixed", "override", "lock_A_Override_B" ],
          "type" : "string"
        },
        "isSlowdownEnabled" : {
          "type" : "boolean"
        },
        "channels" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LanguageChannel"
          }
        },
        "deskConfigurations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InterpretationDeskConfiguration"
          }
        }
      }
    },
    "AutoFloorStateChanged" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "isActive" : {
          "type" : "boolean"
        },
        "source" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "ChannelListenersUpdated" : {
      "type" : "object",
      "properties" : {
        "listeners" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ChannelListeners"
          }
        }
      }
    },
    "ChannelQualityChanged" : {
      "type" : "object",
      "properties" : {
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "quality" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskActiveChannelChanged" : {
      "type" : "object",
      "properties" : {
        "relay" : {
          "format" : "int32",
          "type" : "integer"
        },
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskActiveOutputChannelChanged" : {
      "type" : "object",
      "properties" : {
        "relay" : {
          "format" : "int32",
          "type" : "integer"
        },
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskActiveRelayChannelChanged" : {
      "type" : "object",
      "properties" : {
        "relay" : {
          "format" : "int32",
          "type" : "integer"
        },
        "channel" : {
          "format" : "int32",
          "type" : "integer"
        },
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskMicrophoneStateChanged" : {
      "type" : "object",
      "properties" : {
        "newMicrophoneState" : {
          "enum" : [ "on", "off", "mute", "multiple_on" ]
        },
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "DeskSlowdownEnded" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "FloorNameChanged" : {
      "type" : "object",
      "properties" : {
        "roomId" : {
          "type" : "string"
        },
        "floorName" : {
          "type" : "string"
        },
        "timeStamp" : {
          "format" : "date-time",
          "type" : "string"
        }
      }
    },
    "SaveLanguagesRequest" : {
      "required" : [ "languages" ],
      "type" : "object",
      "properties" : {
        "languages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Language"
          }
        }
      }
    },
    "FloorNameData" : {
      "required" : [ "name" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        }
      }
    },
    "DeskSlowdownRequested" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "format" : "int32",
          "type" : "integer"
        },
        "desk" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "InterpretationConfigurationList" : {
      "type" : "object",
      "properties" : {
        "configurations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InterpretationConfigurationDescription"
          }
        }
      }
    },
    "IntraBoothConfiguration" : {
      "type" : "object",
      "properties" : {
        "isMultipleChannelActivationAllowed" : {
          "type" : "boolean"
        },
        "interpretationMode" : {
          "enum" : [ "mixed", "override" ],
          "type" : "string"
        }
      }
    },
    "AudioInputEntryLevelChanged" : {
      "type" : "object",
      "properties" : {
        "auxInputNumber" : {
          "format" : "int32",
          "type" : "integer"
        },
        "level" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "AudioOutputEntryLevelChanged" : {
      "type" : "object",
      "properties" : {
        "auxOutputNumber" : {
          "format" : "int32",
          "type" : "integer"
        },
        "level" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "ActiveInterpretationConfigurationChanged" : {
      "type" : "object",
      "properties" : {
        "configurationId" : {
          "type" : "string"
        }
      }
    },
    "AutoGainReduction" : {
      "title" : "Root Type for AutoGainReduction",
      "description" : "The root of the AutoGainReduction type's schema.",
      "type" : "object",
      "properties" : {
        "value" : {
          "enum" : [ "off", "low", "medium", "high" ]
        }
      },
      "example" : "{\n    \"value\": \"medium\"\n}"
    },
    "AuxLevel" : {
      "title" : "Root Type for AuxLevel",
      "description" : "The root of the AuxLevel type's schema.",
      "type" : "object",
      "properties" : {
        "number" : {
          "format" : "int32",
          "type" : "integer"
        },
        "value" : {
          "format" : "int32",
          "type" : "integer"
        },
        "mute" : {
          "type" : "boolean"
        }
      },
      "example" : {
        "number" : 3,
        "value" : 43,
        "mute" : false
      }
    },
    "AuxLevels" : {
      "title" : "Root Type for AuxLevels",
      "description" : "The root of the AuxLevels type's schema.",
      "type" : "object",
      "properties" : {
        "inputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuxLevel"
          }
        },
        "outputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AuxLevel"
          }
        }
      }
    },
    "RecordingState" : {
      "title" : "Root Type for RecordingState",
      "description" : "The root of the RecordingState type's schema.",
      "type" : "object",
      "properties" : {
        "state" : {
          "enum" : [ "idle", "active", "paused", "error" ]
        }
      },
      "example" : "{\n    \"state\": \"active\"\n}"
    },
    "RecordingStorageInfo" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "description" : "Reflects the state of the storage.",
          "enum" : [ "free", "almostFull", "full", "invalid" ]
        },
        "fullSize" : {
          "format" : "int64",
          "description" : "The full capacity of the storage in kilobytes (0 if not connected)",
          "type" : "integer"
        },
        "freeSize" : {
          "format" : "int64",
          "description" : "The remaining capacity of the storage in kilobytes (0 if not connected)",
          "type" : "integer"
        }
      }
    },
    "RecordingFilesInfo" : {
      "type" : "object",
      "properties" : {
        "files" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RecordingStateChanged" : {
      "type" : "object",
      "properties" : {
        "state" : {
          "$ref" : "#/definitions/RecordingState"
        }
      }
    },
    "RecordingSettingsChanged" : {
      "type" : "object",
      "properties" : {
        "settings" : {
          "$ref" : "#/definitions/RecordingSettings"
        }
      }
    },
    "RecordingSettings" : {
      "type" : "object",
      "properties" : {
        "storageType" : {
          "description" : "The storage type on which the files are stored",
          "enum" : [ "internal", "external" ]
        },
        "bitRate" : {
          "description" : "The bit rate to be used for recording",
          "enum" : [ "rate64", "rate128", "rate192", "rate256" ]
        },
        "autoDelete" : {
          "description" : "Auto delete oldest files when no space left",
          "type" : "boolean"
        },
        "autoSplit" : {
          "description" : "Auto split recordings into separate files",
          "type" : "boolean"
        },
        "autoSplitTime" : {
          "description" : "Time (in seconds) after which an audio recording will be split into a new file",
          "type" : "integer"
        },
        "prefix" : {
          "description" : "File name prefix",
          "type" : "string"
        },
        "suffix" : {
          "description" : "File name suffix",
          "type" : "string"
        },
        "channels" : {
          "description" : "Channels to be recorded (identified by system channel ID)",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "RecordingFailed" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "MessageToSeatsModel" : {
      "title" : "Root Type for MessageToSeatsModel",
      "description" : "Model for sending message to number of seats",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "Content of the message that should be displayed",
          "type" : "string"
        },
        "beep" : {
          "description" : "True when audible beep should be played",
          "type" : "boolean"
        },
        "seats" : {
          "description" : "List of seat numbers where the message should be sent to",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      },
      "example" : {
        "message" : "some text",
        "beep" : true,
        "seats" : [ 1, 2, 3 ]
      }
    },
    "Meeting" : {
      "description" : "Details about current meeting",
      "type" : "object",
      "properties" : {
        "state" : {
          "description" : "The state of the meeting",
          "enum" : [ "scheduled", "prepared", "running", "paused", "ended" ]
        },
        "delegates" : {
          "description" : "Delegates participating in meeting",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingDelegate"
          }
        },
        "startTime" : {
          "description" : "Time when meeting has started",
          "type" : "string"
        },
        "endTime" : {
          "description" : "Time when meeting has ended",
          "type" : "string"
        },
        "title" : {
          "description" : "Title of the meeting",
          "type" : "string"
        },
        "isRecorded" : {
          "description" : "Indicates if the meeting is being recorded.",
          "type" : "boolean"
        },
        "audioFiles" : {
          "description" : "List of recorded audio files, associated to the meeting.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "id" : {
          "description" : "Id of meeting, in the context of the central unit.",
          "type" : "string"
        },
        "roomlayoutId" : {
          "description" : "optional room layout ID for Confero Cloud meetings",
          "type" : "string"
        }
      }
    },
    "MeetingDelegate" : {
      "title" : "Root Type for MeetingDelegate",
      "description" : "Delegate participating in a meeting",
      "type" : "object",
      "properties" : {
        "firstName" : {
          "description" : "First name of the delegate",
          "type" : "string"
        },
        "lastName" : {
          "description" : "Last name of the delegate",
          "type" : "string"
        },
        "seatNumber" : {
          "format" : "int32",
          "description" : "Number of seat where delegate is seated",
          "type" : "integer"
        },
        "id" : {
          "description" : "Delegate ID",
          "type" : "string"
        },
        "badgeId" : {
          "description" : "badge ID of the delegate",
          "type" : "string"
        }
      },
      "example" : {
        "firstName" : "Pieter",
        "lastName" : "Deparcq",
        "seatNumber" : 3,
        "id" : "1"
      }
    },
    "ScheduleMeetingRequest" : {
      "title" : "Root Type for ScheduleMeetingRequest",
      "description" : "Request for scheduling a meeting",
      "type" : "object",
      "properties" : {
        "title" : {
          "description" : "Title of the meeting",
          "type" : "string"
        }
      },
      "example" : "{\n    \"title\": \"Test meeting title\"\n}"
    },
    "MeetingStateChanged" : {
      "type" : "object",
      "properties" : {
        "meeting" : {
          "$ref" : "#/definitions/Meeting"
        }
      }
    },
    "MessageToBoothsModel" : {
      "title" : "Root Type for MessageToSeatsModel",
      "description" : "Model for sending message to number of seats",
      "type" : "object",
      "properties" : {
        "message" : {
          "description" : "Content of the message that should be displayed",
          "type" : "string"
        },
        "beep" : {
          "description" : "True when audible beep should be played",
          "type" : "boolean"
        },
        "booths" : {
          "description" : "List of booth numbers where the message should be sent to",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      },
      "example" : {
        "message" : "This is an example message",
        "beep" : true,
        "booth" : 1
      }
    },
    "MeetingDelegateList" : {
      "description" : "List of meeting delegates",
      "type" : "object",
      "properties" : {
        "delegates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingDelegate"
          }
        }
      }
    },
    "MeetingDelegatesChanged" : {
      "type" : "object",
      "properties" : {
        "delegates" : {
          "$ref" : "#/definitions/MeetingDelegateList"
        }
      }
    },
    "Seat" : {
      "required" : [ "reordered" ],
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Id of the seat",
          "type" : "integer"
        },
        "label" : {
          "description" : "Label of the seat",
          "type" : "string"
        },
        "state" : {
          "description" : "State of the seat",
          "enum" : [ "normal", "broken" ]
        },
        "role" : {
          "description" : "Role of the seat",
          "enum" : [ "delegate", "vip", "chairman" ]
        },
        "units" : {
          "description" : "Units located on the seat",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SeatUnit"
          }
        },
        "capabilities" : {
          "description" : "Capabilities of the seat",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SeatCapability"
          }
        },
        "reordered" : {
          "description" : "Indicates if the seat has already been reordered (given a specific seat id).",
          "type" : "boolean"
        }
      }
    },
    "SeatUnit" : {
      "description" : "Limited info about unit on seat",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Id of the unit",
          "type" : "integer"
        },
        "serial" : {
          "description" : "Serial number of the unit",
          "type" : "string"
        }
      }
    },
    "SeatList" : {
      "type" : "object",
      "properties" : {
        "seats" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Seat"
          }
        }
      }
    },
    "Room" : {
      "title" : "Root Type for Room",
      "description" : "Details about the room",
      "type" : "object",
      "properties" : {
        "state" : {
          "description" : "State of the room",
          "enum" : [ "meeting", "init", "test" ]
        },
        "numberOfSeats" : {
          "description" : "Number of seats in the room",
          "type" : "integer"
        }
      },
      "example" : {
        "ip" : "192.168.0.100",
        "mac" : "00:0E:3D:10:A0:93",
        "state" : "meeting",
        "numberOfSeats" : 50
      }
    },
    "RenameSeatRequest" : {
      "type" : "object",
      "properties" : {
        "label" : {
          "type" : "string"
        }
      }
    },
    "ChangeSeatRoleRequest" : {
      "type" : "object",
      "properties" : {
        "role" : {
          "enum" : [ "delegate", "vip", "chairman" ]
        }
      }
    },
    "SeatAdded" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat"
        }
      }
    },
    "SeatRemoved" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "type" : "integer"
        }
      }
    },
    "SeatUnitsChanged" : {
      "description" : "Units of a seat have changed",
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat",
          "description" : "Seat that has changed"
        }
      }
    },
    "SeatLabelChanged" : {
      "description" : "Label of a seat has changed",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Seat that has changed",
          "type" : "integer"
        },
        "label" : {
          "description" : "New label of the seat",
          "type" : "string"
        }
      }
    },
    "SeatRoleChanged" : {
      "description" : "Role of a seat has changed",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Seat id that has changed",
          "type" : "integer"
        },
        "role" : {
          "description" : "New role of the seat",
          "enum" : [ "chairman", "vip", "delegate" ]
        }
      }
    },
    "SeatStateChanged" : {
      "description" : "State of a seat has changed",
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat",
          "description" : "Seat that has changed"
        }
      }
    },
    "SeatCapability" : {
      "title" : "Root Type for SeatCapability",
      "description" : "The root of the SeatCapability type's schema.",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the capability",
          "enum" : [ "discussion", "audio_routing", "video", "interpretation", "record", "nameplate", "voting", "intercom" ]
        },
        "enabled" : {
          "description" : "True when capability is enabled",
          "type" : "boolean"
        }
      },
      "example" : "{\n    \"name\": \"discussion\",\n    \"enabled\": true\n}"
    },
    "Desk" : {
      "title" : "Root Type for Desk",
      "description" : "The root of the Desk type's schema.",
      "type" : "object",
      "properties" : {
        "number" : {
          "description" : "Number of the desk",
          "type" : "integer"
        },
        "seat" : {
          "description" : "Seat that is located on desk",
          "type" : "integer"
        }
      },
      "example" : {
        "number" : 1,
        "seat" : 3
      }
    },
    "Booth" : {
      "description" : "Booth where translation is done by interpreters for certain language",
      "type" : "object",
      "properties" : {
        "desks" : {
          "description" : "Desks that are part of the booth",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Desk"
          }
        },
        "number" : {
          "description" : "Unique number of booth",
          "type" : "integer"
        }
      }
    },
    "BoothList" : {
      "description" : "List of booths",
      "type" : "object",
      "properties" : {
        "booths" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Booth"
          }
        }
      }
    },
    "CreateDeskForBoothRequest" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "description" : "Number of the seat to place at the desk",
          "type" : "integer"
        }
      }
    },
    "BoothAdded" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "$ref" : "#/definitions/Booth"
        }
      }
    },
    "BoothRemoved" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "type" : "integer"
        }
      }
    },
    "BoothChanged" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "$ref" : "#/definitions/Booth"
        }
      }
    },
    "ResourceInfo" : {
      "description" : "Info about a resource",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Id of the resource",
          "type" : "string"
        },
        "filename" : {
          "description" : "File name of the resource",
          "type" : "string"
        },
        "mimeType" : {
          "description" : "Mime type of the resource",
          "type" : "string"
        },
        "length" : {
          "format" : "int64",
          "description" : "Size of the resource file in bytes",
          "type" : "integer"
        },
        "uploadDate" : {
          "format" : "date-time",
          "description" : "Date when file was uploaded",
          "type" : "string"
        }
      }
    },
    "RoomLayoutNode" : {
      "title" : "Root Type for RoomLayoutNode",
      "description" : "Node in room layout that gives position (x, y) to a seat in the room",
      "type" : "object",
      "properties" : {
        "x" : {
          "format" : "int32",
          "description" : "X coordinate in number of pixels of node",
          "type" : "integer"
        },
        "y" : {
          "format" : "int32",
          "description" : "Y coordinate in number of pixels of node",
          "type" : "integer"
        },
        "width" : {
          "format" : "int32",
          "description" : "Width in pixels of the node",
          "type" : "integer"
        },
        "height" : {
          "format" : "int32",
          "description" : "Height in pixels of the node",
          "type" : "integer"
        },
        "seat" : {
          "format" : "int32",
          "description" : "Number of the seat that the node is referencing",
          "type" : "integer"
        }
      },
      "example" : "{\r\n  \"x\": 0,\r\n  \"y\": 0,\r\n  \"width\": 0,\r\n  \"height\": 0,\r\n  \"seat\": 0\r\n}"
    },
    "RoomLayoutBackground" : {
      "title" : "Root Type for RoomLayoutBackground",
      "description" : "The root of the RoomLayoutBackground type's schema.",
      "type" : "object",
      "properties" : {
        "resourceId" : {
          "description" : "Id of resource that contains the background image",
          "type" : "string"
        },
        "width" : {
          "format" : "int32",
          "description" : "Width in pixels of the background image",
          "type" : "integer"
        },
        "height" : {
          "format" : "int32",
          "description" : "Height in pixels of the background image",
          "type" : "integer"
        },
        "horizontalOffset" : {
          "format" : "int32",
          "description" : "Horizontal offset of background image",
          "type" : "integer"
        },
        "verticalOffset" : {
          "format" : "int32",
          "description" : "Vertical offset of background image",
          "type" : "integer"
        },
        "color" : {
          "description" : "Color of background (hex value)",
          "type" : "string"
        }
      },
      "example" : "{\n    \"resourceId\": \"string\",\n    \"width\": 0,\n    \"height\": 0,\n    \"horizontalOffset\": 0,\n    \"verticalOffset\": 0\n}"
    },
    "RoomLayout" : {
      "description" : "Layout of the room",
      "type" : "object",
      "properties" : {
        "width" : {
          "description" : "Width in pixels of the room layout",
          "type" : "integer"
        },
        "height" : {
          "description" : "Height in pixels of the room layout",
          "type" : "integer"
        },
        "background" : {
          "$ref" : "#/definitions/RoomLayoutBackground",
          "description" : "Background of room layout"
        },
        "nodes" : {
          "description" : "Nodes in the room that give a position to seats",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RoomLayoutNode"
          }
        },
        "id" : {
          "type" : "string"
        },
        "contentId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "VotingSession" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Unique identifier of the voting session",
          "type" : "string"
        },
        "state" : {
          "description" : "State of the voting session",
          "enum" : [ "scheduled", "starting", "running", "paused", "ending", "closed" ]
        },
        "startTime" : {
          "format" : "date-time",
          "description" : "Start date and time of the voting session",
          "type" : "string"
        },
        "endTime" : {
          "format" : "date-time",
          "description" : "End date and time of the voting session",
          "type" : "string"
        },
        "options" : {
          "description" : "Voting options that are available during voting session",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingOption"
          }
        },
        "title" : {
          "description" : "Title of the voting session",
          "type" : "string"
        },
        "settings" : {
          "$ref" : "#/definitions/VotingSettings",
          "description" : "various settings related to showing or hiding the voting results during the vote."
        }
      }
    },
    "VotingResults" : {
      "description" : "Results of a voting session",
      "type" : "object",
      "properties" : {
        "voted" : {
          "description" : "Number of votes cast",
          "type" : "integer"
        },
        "notVoted" : {
          "description" : "Number of participants that did not vote",
          "type" : "integer"
        },
        "total" : {
          "description" : "Total number of participants",
          "type" : "integer"
        },
        "optionResults" : {
          "description" : "Results for each voting option",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingOptionResult"
          }
        },
        "participantOptions" : {
          "description" : "Lists which option every participant has voted on. Only available when the voting is not secret.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ParticipantOption"
          }
        },
        "id" : {
          "description" : "Voting session ID",
          "type" : "string"
        },
        "participantsVoted" : {
          "description" : "List of delegates (IDs) that have voted",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "VotingOptionResult" : {
      "title" : "Root Type for VotingOptionResult",
      "description" : "Result for a specific voting option",
      "type" : "object",
      "properties" : {
        "option" : {
          "format" : "int32",
          "description" : "Number of voting option",
          "type" : "integer"
        },
        "result" : {
          "format" : "int32",
          "description" : "Number of votes for this option",
          "type" : "integer"
        }
      },
      "example" : "{\n    \"option\": 1,\n    \"result\": 10\n}"
    },
    "VotingOption" : {
      "description" : "Voting option that can be voted for",
      "type" : "object",
      "properties" : {
        "number" : {
          "description" : "Number of the voting option",
          "type" : "integer"
        },
        "description" : {
          "description" : "Description of the voting option",
          "type" : "string"
        },
        "color" : {
          "description" : "Color of the voting option (hex value)",
          "type" : "string"
        },
        "abstain" : {
          "description" : "True when this counts as abstain vote",
          "type" : "boolean"
        },
        "ledColor" : {
          "description" : "Color of the voting button LED",
          "enum" : [ "red", "green", "blue", "yellow", "white", "cyan", "magenta" ]
        },
        "id" : {
          "description" : "voting option ID",
          "type" : "string"
        }
      }
    },
    "VotingSessionList" : {
      "description" : "List of voting sessions",
      "type" : "object",
      "properties" : {
        "sessions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingSession"
          }
        }
      }
    },
    "ScheduleVotingSessionRequest" : {
      "description" : "Request for scheduling voting session",
      "type" : "object",
      "properties" : {
        "title" : {
          "description" : "Title of the voting session",
          "type" : "string"
        },
        "options" : {
          "description" : "Voting options available for voting session",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingOption"
          }
        },
        "settings" : {
          "$ref" : "#/definitions/VotingSettings",
          "description" : "various settings related to showing or hiding the voting results during the vote."
        }
      }
    },
    "VotingSessionStateChanged" : {
      "type" : "object",
      "properties" : {
        "session" : {
          "$ref" : "#/definitions/VotingSession"
        }
      }
    },
    "VotingParticipantVoted" : {
      "type" : "object",
      "properties" : {
        "session" : {
          "$ref" : "#/definitions/VotingSession"
        }
      }
    },
    "LoudspeakerVolume" : {
      "type" : "object",
      "properties" : {
        "gain" : {
          "type" : "integer"
        }
      }
    },
    "DefaultChannelSelectorVolumeChanged" : {
      "type" : "object",
      "properties" : {
        "defaultChannelSelectorVolumeInfo" : {
          "$ref" : "#/definitions/DefaultChannelSelectorVolume"
        }
      }
    },
    "DefaultChannelSelectorVolume" : {
      "type" : "object",
      "properties" : {
        "gain" : {
          "format" : "int32",
          "type" : "integer"
        }
      }
    },
    "LoudspeakerVolumeChanged" : {
      "type" : "object",
      "properties" : {
        "gain" : {
          "type" : "integer"
        }
      }
    },
    "TimeFormat" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "enum" : [ "hh_mm_24", "hh_mm_12" ]
        }
      }
    },
    "DateFormat" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "enum" : [ "yyyy_mm_dd", "mm_dd_yyyy", "dd_mm_yyyy" ]
        }
      }
    },
    "TimeFormatChanged" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "$ref" : "#/definitions/TimeFormat"
        }
      }
    },
    "DateFormatChanged" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "$ref" : "#/definitions/DateFormat"
        }
      }
    },
    "RoomDateTimeChanged" : {
      "type" : "object",
      "properties" : {
        "dateTime" : {
          "$ref" : "#/definitions/RoomDateTime"
        }
      }
    },
    "IpConfiguration" : {
      "type" : "object",
      "properties" : {
        "hostName" : {
          "description" : "Hostname",
          "type" : "string"
        },
        "addressMode" : {
          "description" : "Address mode",
          "enum" : [ "static", "dhcp" ]
        },
        "ipAddress" : {
          "description" : "IP address (empty when using dhcp)",
          "type" : "string"
        },
        "subnetMask" : {
          "description" : "Subnet mask (empty when using dhcp)",
          "type" : "string"
        },
        "gateway" : {
          "description" : "Gateway (empty when using dhcp)",
          "type" : "string"
        },
        "firstDnsServer" : {
          "description" : "First DNS Server (empty when using dhcp)",
          "type" : "string"
        },
        "secondDnsServer" : {
          "description" : "Second DNS server (empty when using dhcp)",
          "type" : "string"
        }
      }
    },
    "IpConfigurationChanged" : {
      "type" : "object",
      "properties" : {
        "configuration" : {
          "$ref" : "#/definitions/IpConfiguration"
        }
      }
    },
    "AutoGainReductionChanged" : {
      "description" : "Event for audio auto gain reduction changes",
      "type" : "object",
      "properties" : {
        "reduction" : {
          "$ref" : "#/definitions/AutoGainReduction"
        }
      }
    },
    "RoomDateTime" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      },
      "example" : {
        "value" : "2019-02-11 16:46:10"
      }
    },
    "LicenseInformation" : {
      "description" : "Information about the current license",
      "required" : [ "productName" ],
      "type" : "object",
      "properties" : {
        "state" : {
          "description" : "Validity state of the license",
          "enum" : [ "valid", "invalid", "nearlyExpired" ]
        },
        "expiryDate" : {
          "description" : "Date and time when license expires",
          "type" : "string"
        },
        "parameters" : {
          "description" : "Parameters with info about license",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LicenseParameter"
          }
        },
        "modules" : {
          "description" : "List of license modules",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LicenseModule"
          }
        },
        "productName" : {
          "description" : "Product name of the license",
          "enum" : [ "Cocos", "ConFlex", "Confero" ]
        }
      }
    },
    "LicenseParameter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the parameter",
          "type" : "string"
        },
        "value" : {
          "description" : "Value of the parameter",
          "type" : "string"
        }
      }
    },
    "LicenseModule" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the module",
          "type" : "string"
        },
        "state" : {
          "description" : "Validity state of the module",
          "enum" : [ "valid", "invalid", "nearlyExpired" ]
        },
        "parameters" : {
          "description" : "Parameters with info about module",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LicenseParameter"
          }
        }
      }
    },
    "LogLevel" : {
      "type" : "object",
      "properties" : {
        "level" : {
          "enum" : [ "trace", "debug", "info", "warning", "error", "fatal" ]
        }
      }
    },
    "LogLevelChanged" : {
      "type" : "object",
      "properties" : {
        "level" : {
          "$ref" : "#/definitions/LogLevel"
        }
      }
    },
    "SystemInfo" : {
      "type" : "object",
      "properties" : {
        "macAddress" : {
          "description" : "MAC Address of the system",
          "type" : "string"
        },
        "ipConfiguration" : {
          "$ref" : "#/definitions/IpConfiguration",
          "description" : "IP configuration of the system"
        },
        "dnsName" : {
          "description" : "DNS name of the system",
          "type" : "string"
        },
        "version" : {
          "description" : "Version of the system",
          "type" : "string"
        },
        "buildDate" : {
          "format" : "date-time",
          "description" : "Build date of the system software",
          "type" : "string"
        },
        "firmwareType" : {
          "description" : "Firmware type of the device",
          "type" : "string"
        },
        "boardType" : {
          "description" : "Board type of the engine",
          "enum" : [ "AudioEngine", "MultimediaEngineAMD", "MultimediaEngineIMX", "WirelessEngineG4", "Unknown" ]
        }
      }
    },
    "CameraSettings" : {
      "type" : "object",
      "properties" : {
        "cameraProtocol" : {
          "description" : "Camera protocol to use",
          "enum" : [ "tlvcam1", "tlvcam2", "tlvg3cam" ]
        },
        "networkProtocol" : {
          "description" : "Network protocol to use",
          "enum" : [ "tcp", "udp" ]
        },
        "port" : {
          "description" : "Port number to use",
          "type" : "integer"
        },
        "ipAddress" : {
          "description" : "IP address",
          "type" : "string"
        },
        "enabled" : {
          "description" : "Is the camera protocol enabled?",
          "type" : "boolean"
        }
      }
    },
    "UserLoginResponse" : {
      "title" : "Root Type for UserLoginResponse",
      "description" : "The root of the UserLoginResponse type's schema.",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "Id of the user",
          "type" : "string"
        },
        "user" : {
          "description" : "User name",
          "type" : "string"
        },
        "role" : {
          "$ref" : "#/definitions/UserRole",
          "description" : "Role of the user"
        },
        "token" : {
          "description" : "JWT token",
          "type" : "string"
        }
      }
    },
    "UserLoginRequest" : {
      "title" : "Root Type for UserLoginRequest",
      "description" : "The root of the UserLoginRequest type's schema.",
      "type" : "object",
      "properties" : {
        "user" : {
          "description" : "User name to login with",
          "type" : "string"
        },
        "password" : {
          "description" : "Password to login with",
          "type" : "string"
        }
      }
    },
    "UserRole" : {
      "description" : "Role of a user with its permissions",
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the role",
          "type" : "string"
        },
        "permissions" : {
          "description" : "List of permissions assigned to the role",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "enabled" : {
          "description" : "Is the role enabled",
          "type" : "boolean"
        }
      }
    },
    "UserRoleList" : {
      "description" : "List of user roles",
      "type" : "object",
      "properties" : {
        "roles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserRole"
          }
        }
      }
    },
    "UserPassword" : {
      "type" : "object",
      "properties" : {
        "password" : {
          "type" : "string"
        }
      }
    },
    "RequestListChanged" : {
      "description" : "Request list has changed",
      "type" : "object",
      "properties" : {
        "seatIds" : {
          "description" : "The seat ids that are currently in the request list",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "ReplyListChanged" : {
      "description" : "Reply list has changed",
      "type" : "object",
      "properties" : {
        "seatIds" : {
          "description" : "The seat ids that are currently in the reply list",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "SpeakerListChanged" : {
      "description" : "Speaker list has changed",
      "type" : "object",
      "properties" : {
        "seatIds" : {
          "description" : "The seat ids that are currently in the speaker list",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "NotificationModuleList" : {
      "description" : "List of notification modules",
      "type" : "object",
      "properties" : {
        "modules" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NotificationModule"
          }
        }
      }
    },
    "RoomConferenceSettings" : {
      "type" : "object",
      "properties" : {
        "maximumNumberOfSpeakers" : {
          "format" : "int32",
          "type" : "integer"
        },
        "microphoneMode" : {
          "enum" : [ "directAccess", "request", "group", "other" ],
          "type" : "string"
        },
        "microphoneActivationType" : {
          "enum" : [ "toggle", "push", "vox" ],
          "type" : "string"
        },
        "canSpeakerOverrideOtherSpeaker" : {
          "type" : "boolean"
        },
        "canSpeakerCancelRequest" : {
          "type" : "boolean"
        },
        "canSwitchOff" : {
          "type" : "boolean"
        },
        "enableReply" : {
          "type" : "boolean"
        },
        "buttonReply" : {
          "enum" : [ "prior", "next" ]
        },
        "ledColorOn" : {
          "enum" : [ "red", "green" ],
          "type" : "string"
        },
        "ledColorRequest" : {
          "enum" : [ "red", "green" ],
          "type" : "string"
        },
        "ledColorReply" : {
          "enum" : [ "red", "green" ],
          "type" : "string"
        },
        "ledInactive" : {
          "enum" : [ "off", "red", "green" ],
          "type" : "string"
        },
        "ledStateNextInLine" : {
          "enum" : [ "on", "off" ],
          "type" : "string"
        },
        "lowHeadphoneEnabled" : {
          "type" : "boolean"
        },
        "closeRequestSession" : {
          "description" : "Disable further requests while in request mode (needed for temporary request session)\nDefault is false",
          "type" : "boolean"
        }
      }
    },
    "PrepareMeetingRequest" : {
      "description" : "Details about current meeting",
      "type" : "object",
      "properties" : {
        "delegates" : {
          "description" : "Delegates participating in meeting",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingDelegate"
          }
        },
        "title" : {
          "description" : "Title of the meeting",
          "type" : "string"
        },
        "isRecorded" : {
          "description" : "Should the meeting be recorded",
          "type" : "boolean"
        },
        "usePreviousDelegates" : {
          "description" : "This boolean indicates if the delegates of the previous meeting should be reused for the new meeting.",
          "type" : "boolean"
        }
      }
    },
    "InterpreterDesk" : {
      "description" : "Interpreter desk type.",
      "required" : [ "seat", "units", "reordered" ],
      "type" : "object",
      "properties" : {
        "seat" : {
          "description" : "Seat ID of the interpreter desk.",
          "type" : "integer"
        },
        "booth" : {
          "description" : "Booth ID of the interpreter desk.",
          "type" : "integer"
        },
        "desk" : {
          "description" : "Desk ID within the booth.",
          "type" : "integer"
        },
        "units" : {
          "description" : "Units placed on the interpreter desk.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SeatUnit"
          }
        },
        "state" : {
          "description" : "State of the interpreter desk.",
          "enum" : [ "normal", "broken" ]
        },
        "reordered" : {
          "description" : "Specifies if the interpreter desk has been reordered (given a specific seat id)",
          "type" : "boolean"
        }
      }
    },
    "InterpreterDeskList" : {
      "description" : "List of InterpreterDesk",
      "required" : [ "desks" ],
      "type" : "object",
      "properties" : {
        "desks" : {
          "description" : "array of interpreter desks.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InterpreterDesk"
          }
        }
      }
    },
    "VotingSessionId" : {
      "description" : "id of a voting session",
      "required" : [ "id" ],
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "ID of a voting session.",
          "type" : "string"
        }
      }
    },
    "ParticipantOption" : {
      "title" : "Root Type for VotingOptionResult",
      "description" : "Option a particular participant voted on.",
      "type" : "object",
      "properties" : {
        "option" : {
          "format" : "int32",
          "description" : "Number of the voting option",
          "type" : "integer"
        },
        "delegate" : {
          "description" : "Delegate ID of the participant",
          "type" : "string"
        }
      },
      "example" : {
        "option" : 1,
        "delegate" : 10
      }
    },
    "SeatChanged" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "$ref" : "#/definitions/Seat",
          "description" : "Seat that has changed"
        }
      }
    },
    "InterpreterDeskAdded" : {
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "interpreterDesk" : {
          "$ref" : "#/definitions/InterpreterDesk"
        }
      }
    },
    "InterpreterDeskChanged" : {
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "interpreterDesk" : {
          "$ref" : "#/definitions/InterpreterDesk"
        }
      }
    },
    "InterpreterDeskRemoved" : {
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "seat" : {
          "type" : "integer"
        }
      }
    },
    "LicenseList" : {
      "description" : "List of all licenses, grouped by product name.",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "licenses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LicenseInformation"
          }
        }
      }
    },
    "LogArchiveReady" : {
      "description" : "url for downloading a log file from the system",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "url" : {
          "description" : "url that can be used to download the file",
          "type" : "string"
        }
      }
    },
    "UpdateFileName" : {
      "description" : "update file name",
      "required" : [ "fileName" ],
      "type" : "object",
      "properties" : {
        "fileName" : {
          "description" : "fileName of the update file.",
          "type" : "string"
        }
      }
    },
    "UpdateProgress" : {
      "description" : "info about the update progress",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "status" : {
          "description" : "Status of the update process",
          "enum" : [ "Idle", "Started", "Busy", "Completed" ]
        },
        "progressId" : {
          "type" : "integer"
        },
        "step" : {
          "description" : "step in the update progress",
          "type" : "integer"
        },
        "maxSteps" : {
          "description" : "maximum number of steps in the update process",
          "type" : "integer"
        },
        "error" : {
          "description" : "error boolean",
          "type" : "boolean"
        },
        "message" : {
          "description" : "description of the update progress step",
          "type" : "string"
        },
        "fileName" : {
          "description" : "file name of the file which is being updated",
          "type" : "string"
        }
      }
    },
    "UpdateFileInfo" : {
      "description" : "Update file info",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "platform" : {
          "type" : "string"
        },
        "platformVersion" : {
          "type" : "string"
        },
        "target" : {
          "type" : "string"
        },
        "offset" : {
          "type" : "string"
        },
        "name" : {
          "description" : "file name",
          "type" : "string"
        },
        "force" : {
          "description" : "force update if version is below current version",
          "type" : "boolean"
        },
        "version" : {
          "type" : "string"
        },
        "devices" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "UpdateFileList" : {
      "description" : "list of update files",
      "required" : [ "files" ],
      "type" : "object",
      "properties" : {
        "files" : {
          "description" : "list of update file info",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UpdateFileInfo"
          }
        }
      }
    },
    "UpdateFileNameList" : {
      "description" : "list of update file names",
      "required" : [ "files" ],
      "type" : "object",
      "properties" : {
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UpdateFileName"
          }
        }
      }
    },
    "RoomLayoutChanged" : {
      "description" : "Room layout changed event",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "layout" : {
          "$ref" : "#/definitions/RoomLayout"
        }
      }
    },
    "LanguagesChanged" : {
      "description" : "Event when languages list has changed",
      "required" : [ "languages" ],
      "type" : "object",
      "properties" : {
        "languages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Language"
          }
        }
      }
    },
    "SeatsChanged" : {
      "description" : "event when various seats have changed",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "seats" : {
          "$ref" : "#/definitions/SeatList"
        }
      }
    },
    "InterpreterDesksChanged" : {
      "description" : "event when various interpreter deks have changed",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "desks" : {
          "$ref" : "#/definitions/InterpreterDeskList"
        }
      }
    },
    "FullUpdateProgress" : {
      "description" : "progress info about all files which are being updated.",
      "type" : "object",
      "properties" : {
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UpdateProgress"
          }
        }
      }
    },
    "OperatingMode" : {
      "type" : "object",
      "properties" : {
        "mode" : {
          "enum" : [ "Normal", "ReorderSeats", "ReorderInterpreterDesks", "Update", "Golden", "Testing" ]
        }
      }
    },
    "ResourceId" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "resource ID",
          "type" : "string"
        }
      }
    },
    "MeetingArchiveList" : {
      "description" : "list of meetings in the meeting archive",
      "type" : "object",
      "properties" : {
        "info" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingArchiveInfo"
          }
        }
      }
    },
    "MeetingArchiveInfo" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "description" : "Meeting title",
          "type" : "string"
        },
        "startTime" : {
          "description" : "Start date and time of the meeting",
          "type" : "string"
        },
        "archiveName" : {
          "description" : "Archive name that is used on the system to identify the archived meeting.",
          "type" : "string"
        }
      }
    },
    "MeetingArchiveVotingSessionList" : {
      "type" : "object",
      "properties" : {
        "sessions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingArchiveVotingSession"
          }
        }
      }
    },
    "MeetingArchiveVotingSession" : {
      "type" : "object",
      "properties" : {
        "info" : {
          "$ref" : "#/definitions/VotingSession"
        },
        "results" : {
          "$ref" : "#/definitions/VotingResults"
        }
      }
    },
    "DefaultInterfaceLanguage" : {
      "type" : "object",
      "properties" : {
        "language" : {
          "enum" : [ "en_GB", "fi_FI", "it_IT", "ru_RU", "de_DE", "ar_AE", "zh_CN", "fr_FR", "ja_JP", "ko_KR", "vi_VN", "pt_PT", "nl_NL", "zh_TW", "be_BY", "da_DK", "es_ES", "fa_IR", "he_IL", "kk_KZ", "no_NO", "pl_PL", "ro_RO", "th_TH", "tr_TR", "uk_UA", "uz_UZ", "sv_SE", "lv_LV" ]
        }
      }
    },
    "MeetingArchiveDeleted" : {
      "type" : "object",
      "properties" : {
        "archiveName" : {
          "type" : "string"
        }
      }
    },
    "InterpreterDeskState" : {
      "type" : "object",
      "properties" : {
        "booth" : {
          "description" : "Booth ID",
          "type" : "integer"
        },
        "desk" : {
          "description" : "Desk ID",
          "type" : "integer"
        },
        "relayChannelPresets" : {
          "description" : "Relay presets",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        },
        "outputChannelPresets" : {
          "description" : "Outgoing channel presets",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        },
        "activeRelayChannel" : {
          "description" : "Index in relayChannelPreset list indicating the currently selected relay.",
          "type" : "integer"
        },
        "activeOutputChannel" : {
          "description" : "Index in outputChannelPreset list indicating the currently selected output channel.",
          "type" : "integer"
        },
        "microphoneState" : {
          "description" : "State of the microphone",
          "enum" : [ "off", "on", "mute", "multiple_on" ]
        },
        "slowdown" : {
          "description" : "Indicates if slowdown was requested",
          "type" : "boolean"
        }
      }
    },
    "RequestList" : {
      "description" : "Request list has changed",
      "type" : "object",
      "properties" : {
        "seatIds" : {
          "description" : "The seat ids that are currently in the request list",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "ReplyList" : {
      "description" : "Reply list",
      "type" : "object",
      "properties" : {
        "seatIds" : {
          "description" : "The seat ids that are currently in the reply list",
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "InputSensitivityOffset" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "description" : "Input sensitivity offset, expressed in 0.1 dB. Example: for an offset of 1.4 dB, the provided value should be set to 14 dB",
          "type" : "integer"
        }
      }
    },
    "Delegate" : {
      "type" : "object",
      "properties" : {
        "firstName" : {
          "description" : "first name of the delegate",
          "type" : "string"
        },
        "lastName" : {
          "description" : "last name of the delegate",
          "type" : "string"
        },
        "badgeId" : {
          "description" : "badge ID of badge associated with this delegate",
          "type" : "string"
        },
        "id" : {
          "description" : "delegate id",
          "type" : "string"
        }
      }
    },
    "DelegateList" : {
      "type" : "object",
      "properties" : {
        "delegates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Delegate"
          }
        }
      }
    },
    "MeetingTemplate" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "description" : "meeting title",
          "type" : "string"
        },
        "recording" : {
          "description" : "meeting with or without recording",
          "type" : "boolean"
        },
        "delegates" : {
          "description" : "delegates which participate in the meeting",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "seating" : {
          "description" : "fixed seating of delegates",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateSeating"
          }
        },
        "votingRights" : {
          "description" : "delegate voting rights",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateVotingRight"
          }
        }
      }
    },
    "DelegateSeating" : {
      "type" : "object",
      "properties" : {
        "delegateId" : {
          "type" : "string"
        },
        "seatId" : {
          "type" : "integer"
        }
      }
    },
    "WirelessAccessPoint" : {
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "Device serial number",
          "type" : "string"
        },
        "coupled" : {
          "description" : "Is the wireless access point coupled or not?",
          "type" : "boolean"
        },
        "hostName" : {
          "description" : "Host name of the wireless access point",
          "type" : "string"
        },
        "ipAddress" : {
          "description" : "IP address of the wireless access point (on LAN port)",
          "type" : "string"
        },
        "subnetMask" : {
          "description" : "Subnet mask of the wireless access point (on LAN port)",
          "type" : "string"
        },
        "gateway" : {
          "description" : "Gateway of the wireless access point (on LAN port)",
          "type" : "string"
        },
        "macAddress" : {
          "description" : "MAC address of the wireless access point",
          "type" : "string"
        },
        "devices" : {
          "description" : "List of serial numbers of wireless units that connect to this wireless access point",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "channels" : {
          "description" : "List of channels that can be used by this wireless access point",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/WirelessChannel"
          }
        },
        "operatingMode" : {
          "$ref" : "#/definitions/WirelessOperatingMode",
          "description" : "Current operating mode of the wireless access point"
        }
      }
    },
    "WirelessOperatingMode" : {
      "type" : "object",
      "properties" : {
        "mode" : {
          "enum" : [ "closed", "rfid", "open" ]
        }
      }
    },
    "WirelessAccessPointAdded" : {
      "type" : "object",
      "properties" : {
        "wirelessAccessPoint" : {
          "$ref" : "#/definitions/WirelessAccessPoint"
        }
      }
    },
    "WirelessAccessPointChanged" : {
      "type" : "object",
      "properties" : {
        "wirelessAccessPoint" : {
          "$ref" : "#/definitions/WirelessAccessPoint"
        }
      }
    },
    "WirelessAccessPointRemoved" : {
      "type" : "object",
      "properties" : {
        "serial" : {
          "type" : "string"
        }
      }
    },
    "WirelessTakeoverRequest" : {
      "type" : "object",
      "properties" : {
        "fromWirelessAccessPoint" : {
          "description" : "Serial number",
          "type" : "string"
        },
        "toWirelessAccessPoint" : {
          "description" : "Serial number",
          "type" : "string"
        }
      }
    },
    "WirelessAccessPointCoupleRequest" : {
      "type" : "object",
      "properties" : {
        "couple" : {
          "description" : "Is the wireless access point coupled or not?",
          "type" : "boolean"
        }
      }
    },
    "BadgeEvent" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "badge id",
          "type" : "string"
        },
        "event" : {
          "description" : "Event type: can be up or down",
          "enum" : [ "up", "down" ]
        },
        "seat" : {
          "description" : "Seat ID of seat that generated the badge event",
          "type" : "integer"
        }
      }
    },
    "DeviceReplaceRequest" : {
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "serial of the device that will replace the existing device",
          "type" : "string"
        }
      }
    },
    "SetupWizard" : {
      "type" : "object",
      "properties" : {
        "show" : {
          "type" : "boolean"
        }
      }
    },
    "ConfigArchiveReady" : {
      "description" : "event when the config archive is ready for download.",
      "type" : "object"
    },
    "ExternalVote" : {
      "type" : "object",
      "properties" : {
        "seat" : {
          "description" : "Seat id of the external seat that wants to vote.",
          "type" : "integer"
        },
        "option" : {
          "description" : "Number of the voting option",
          "type" : "integer"
        }
      }
    },
    "PublishedMeeting" : {
      "description" : "Details about current meeting",
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "meeting id",
          "type" : "string"
        },
        "agendaItems" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AgendaItem"
          }
        },
        "roomName" : {
          "description" : "meeting room name",
          "type" : "string"
        },
        "endDateTime" : {
          "description" : "end date and time of the meeting",
          "type" : "string"
        },
        "startDateTime" : {
          "description" : "start date and time of the meeting",
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "delegates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PublishedMeetingDelegate"
          }
        },
        "seating" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DelegateSeating"
          }
        },
        "audioRecordingEnabled" : {
          "type" : "boolean"
        },
        "contentId" : {
          "type" : "string"
        }
      }
    },
    "AgendaItem" : {
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "kind" : {
          "enum" : [ "VotingItem", "DiscussionItem" ]
        },
        "title" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "voteCorrection" : {
          "type" : "boolean"
        },
        "options" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingOption"
          }
        },
        "subItems" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AgendaItem"
          }
        },
        "id" : {
          "description" : "id of the agenda item",
          "type" : "string"
        },
        "votingStatus" : {
          "$ref" : "#/definitions/CloudVotingStatus"
        },
        "hideIndividualResults" : {
          "type" : "boolean"
        },
        "hideResultsWhileVoting" : {
          "type" : "boolean"
        },
        "activated" : {
          "type" : "boolean"
        }
      }
    },
    "WirelessChannelEnableRequest" : {
      "description" : "Is the wireless channel enabled or not?",
      "required" : [ "enabled" ],
      "type" : "object",
      "properties" : {
        "enabled" : {
          "description" : "Is the wireless channel enabled or not?",
          "type" : "boolean"
        }
      }
    },
    "WirelessRegion" : {
      "description" : "Region setting of the access point",
      "required" : [ "region" ],
      "type" : "object",
      "properties" : {
        "region" : {
          "description" : "Region setting of the access point",
          "enum" : [ "africa", "apac", "eme", "japan", "north_america", "south_america" ]
        }
      }
    },
    "BatteryStatus" : {
      "description" : "Status of the batteries in a device",
      "required" : [ "runtimeToEmpty", "details" ],
      "type" : "object",
      "properties" : {
        "runtimeToEmpty" : {
          "description" : "The estimated remaining runtime in minutes until the battery will be empty",
          "type" : "integer"
        },
        "details" : {
          "description" : "Details of the batteries (possibly) present in the device",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BatteryDetails"
          }
        }
      }
    },
    "BatteryDetails" : {
      "description" : "Details of an individual battery in a device with (possibly) multiple batteries",
      "required" : [ "slotName" ],
      "type" : "object",
      "properties" : {
        "percentage" : {
          "description" : "Percentage of charge left in the battery",
          "type" : "integer"
        },
        "cycles" : {
          "description" : "Number of charge / discharge cycles the battery has been through",
          "type" : "integer"
        },
        "health" : {
          "description" : "Health status indication of the battery",
          "type" : "integer"
        },
        "temperature" : {
          "description" : "Temperature of the battery in degrees celcius",
          "type" : "integer"
        },
        "slotName" : {
          "description" : "The name of the slot in which the battery is plugged",
          "enum" : [ "slotA", "slotB" ]
        }
      }
    },
    "WirelessLinkStatus" : {
      "description" : "The status of the wireless link of a device",
      "required" : [ "quality" ],
      "type" : "object",
      "properties" : {
        "quality" : {
          "description" : "The RF quality reported by the device",
          "enum" : [ "good", "medium", "bad" ]
        }
      }
    },
    "ExternalLanguageChannel" : {
      "description" : "Represents an interpretation channel on a system only supporting external inputs as a source for interpretation channels",
      "required" : [ "language", "displayText", "inputType", "inputNumber" ],
      "type" : "object",
      "properties" : {
        "language" : {
          "description" : "Full name of the language on the channel",
          "type" : "string"
        },
        "displayText" : {
          "description" : "Short name of the language on the channel, to be shown on the displays of the devices in the room",
          "type" : "string"
        },
        "inputType" : {
          "description" : "The type of the input which should be used as source for the channel",
          "enum" : [ "dante" ]
        },
        "inputNumber" : {
          "description" : "The number of the input which should be used as a source for the channel",
          "type" : "integer"
        }
      }
    },
    "PublishedMeetingInfo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "contentId" : {
          "type" : "string"
        }
      }
    },
    "PublishedMeetingInfoList" : {
      "type" : "object",
      "properties" : {
        "meetings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PublishedMeetingInfo"
          }
        }
      }
    },
    "PowerStatus" : {
      "description" : "Power status of a device",
      "required" : [ "powerSource" ],
      "type" : "object",
      "properties" : {
        "powerSource" : {
          "description" : "The power source through which the device is powered",
          "enum" : [ "usb", "battery", "poe", "plixus" ]
        },
        "batteryStatus" : {
          "$ref" : "#/definitions/BatteryStatus",
          "description" : "Status of the batteries present in the device"
        }
      }
    },
    "WirelessChannel" : {
      "type" : "object",
      "properties" : {
        "frequency" : {
          "description" : "The center frequency of this wireless channel expressed in MHz",
          "type" : "integer"
        },
        "quality" : {
          "description" : "Quality number",
          "type" : "integer"
        },
        "enabled" : {
          "description" : "Is this channel current enabled or not?",
          "type" : "boolean"
        },
        "active" : {
          "description" : "Is this channel currently active or not?",
          "type" : "boolean"
        },
        "channel" : {
          "description" : "Channel number",
          "type" : "integer"
        },
        "dfs" : {
          "description" : "Is this channel a DFS channel or not?",
          "type" : "boolean"
        },
        "dfsScanningState" : {
          "description" : "Enum representing the DFS scanning state of a wireless DFS channel",
          "enum" : [ "notScanned", "scanning", "scannedOk", "scannedNotOk" ]
        },
        "range" : {
          "description" : "The range the channel is operating in:\n- 2 for 2.4GHz\n- 5 for 5Ghz",
          "type" : "integer"
        }
      }
    },
    "DelegateVotingRight" : {
      "type" : "object",
      "properties" : {
        "delegateId" : {
          "type" : "string"
        },
        "votingRight" : {
          "type" : "boolean"
        }
      }
    },
    "ServiceList" : {
      "description" : "List of services available on the system",
      "required" : [ "services" ],
      "type" : "object",
      "properties" : {
        "services" : {
          "description" : "Services available on the system",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "MeetingSpeakers" : {
      "description" : "Contains lists of current speakers, next speakers in the active meeting",
      "type" : "object",
      "properties" : {
        "currentSpeakers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingParticipant"
          }
        },
        "nextSpeakers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingParticipant"
          }
        }
      }
    },
    "MeetingParticipant" : {
      "type" : "object",
      "properties" : {
        "kind" : {
          "description" : "Kind of the participant: remote, local or anonymous",
          "enum" : [ "local", "cloud", "anonymous" ]
        },
        "presence" : {
          "enum" : [ "local", "remote", "absent" ]
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "label" : {
          "description" : "label used to display the speaking participant in case the participant is anonymous",
          "type" : "string"
        },
        "cloudParticipantId" : {
          "description" : "Participant ID in the context of the cloud.",
          "type" : "string"
        },
        "participantId" : {
          "description" : "Participant ID in the context of the room (Central Unit)",
          "type" : "string"
        },
        "role" : {
          "description" : "Role of the participant in the meeting: delegate, vip, chairperson.",
          "enum" : [ "delegate", "chairperson", "vip" ]
        }
      }
    },
    "MeetingParticipants" : {
      "type" : "object",
      "properties" : {
        "participants" : {
          "description" : "list of all meeting participants: present (local, remote) or absent",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MeetingParticipant"
          }
        }
      }
    },
    "PowerStatusChanged" : {
      "description" : "Event when the powerStatus of a device changed",
      "required" : [ "serial", "powerStatus" ],
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "Unique serial number of the device",
          "type" : "string"
        },
        "powerStatus" : {
          "$ref" : "#/definitions/PowerStatus",
          "description" : "Updated powerStatus of the device"
        }
      }
    },
    "WirelessLinkStatusChanged" : {
      "description" : "Event when the wirelessLinkStatus of a device changed",
      "required" : [ "serial", "wirelessLinkStatus" ],
      "type" : "object",
      "properties" : {
        "serial" : {
          "description" : "Unique serial number of the device",
          "type" : "string"
        },
        "wirelessLinkStatus" : {
          "$ref" : "#/definitions/WirelessLinkStatus",
          "description" : "Updated wirelessLinkStatus of the device"
        }
      }
    },
    "VotingSettings" : {
      "description" : "Voting settings for instant voting sessions",
      "type" : "object",
      "properties" : {
        "hideIndividualVotingResults" : {
          "description" : "If checked, individual voting results are not visible anywhere (UI, signage, report, logs...).\nIf unchecked; the operator or chairperson UI dashboards and meeting report show the individual voting results.",
          "type" : "boolean"
        },
        "hideVotingResultsForParticipantsDuringVote" : {
          "description" : "If checked, the discussion signage is shown (no voting results at all), while a vote is in progress.\nIf checked, the units also don't show any voting results while a vote is in progress.\nIf unchecked, the voting results are shown during a vote (by means of a bar chart) > current functionality).\nIf unchecked, the voting results are shown on the units > current functionality.",
          "type" : "boolean"
        }
      }
    },
    "Country" : {
      "required" : [ "code" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "code" : {
          "description" : "ISO 3166-1 alpha-2 country code",
          "enum" : [ "AD", "AE", "AL", "AM", "AT", "BA", "BE", "BG", "BH", "CH", "CY", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GB", "GE", "GR", "HR", "HU", "IE", "IL", "IS", "IT", "KZ", "LI", "LT", "LV", "LU", "MC", "MD", "ME", "MK", "MT", "NL", "NO", "OM", "PL", "PT", "QA", "RO", "RS", "SA", "SE", "SI", "SK", "TR", "RU", "BY", "UA", "CA", "US", "JP", "AU", "BD", "CN", "HK", "IN", "ID", "KR", "MY", "NZ", "PH", "SG", "TW", "TH", "VN", "PK", "MX", "AR", "BR", "CL", "CO", "CR", "EC", "DO", "HN", "JM", "GT", "NI", "PA", "PE", "PR", "PY", "SV", "VE", "UY", "CI", "DZ", "EG", "ET", "KE", "MA", "MU", "NG", "SN", "TN", "TZ", "UG", "ZA" ]
        }
      }
    },
    "MeetingAgenda" : {
      "required" : [ "agendaItems" ],
      "type" : "object",
      "properties" : {
        "activeAgendaItemId" : {
          "description" : "Active agenda item id. If the root agenda item is active (= no active agenda item), this will not be available.",
          "type" : "string"
        },
        "agendaItems" : {
          "description" : "Array of agenda items",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AgendaItem"
          }
        }
      }
    },
    "StandbyScreenTypeDescription" : {
      "description" : "Description of a standby screen type",
      "required" : [ "type", "colorTextSupport", "colorBackgroundSupport", "videoSupport", "dateSupport", "timeSupport", "scaleSupport", "alignSupport", "imageVerticalResolution", "imageHorizontalResolution" ],
      "type" : "object",
      "properties" : {
        "type" : {
          "description" : "The type of standby screen",
          "enum" : [ "confideaflex", "unicos7", "unicos10", "unibox" ]
        },
        "videoSupport" : {
          "description" : "Does the standby screen type support showing a video stream",
          "type" : "boolean"
        },
        "dateSupport" : {
          "description" : "Does the standby screen type support showing the date",
          "type" : "boolean"
        },
        "timeSupport" : {
          "description" : "Does the standby screen type support showing the time",
          "type" : "boolean"
        },
        "scaleSupport" : {
          "description" : "Does the standby screen type support scaling the standby image",
          "type" : "boolean"
        },
        "alignSupport" : {
          "description" : "Does the standby screen type support aligning the standby image",
          "type" : "boolean"
        },
        "colorBackgroundSupport" : {
          "description" : "Does the standby screen type support changing the background color",
          "type" : "boolean"
        },
        "colorTextSupport" : {
          "description" : "Does the standby screen type support changing the text color",
          "type" : "boolean"
        },
        "imageVerticalResolution" : {
          "description" : "Maximum vertical resolution of the standby image",
          "type" : "integer"
        },
        "imageHorizontalResolution" : {
          "description" : "Maximum horizontal resolution of the standby image",
          "type" : "integer"
        },
        "imageAspectRatio" : {
          "description" : "Preferred aspect ratio of the standby image",
          "type" : "string"
        }
      }
    },
    "StandbyScreenSettings" : {
      "description" : "Settings of the standby screen",
      "required" : [ ],
      "type" : "object",
      "properties" : {
        "imageResourceId" : {
          "description" : "Id of the resource containing the custom standby screen image",
          "type" : "string"
        },
        "videoStreamId" : {
          "description" : "Id of the video stream to show on the standby screen",
          "type" : "integer"
        },
        "showDate" : {
          "description" : "Show date on the standby screen or not",
          "type" : "boolean"
        },
        "showTime" : {
          "description" : "Show time on the standby screen or not",
          "type" : "boolean"
        },
        "colorText" : {
          "description" : "Color of the text on the standby screen (#rgb hex format)",
          "type" : "string"
        },
        "colorBackground" : {
          "description" : "Color of the background of the standby screen (#rgb hex format)",
          "type" : "string"
        },
        "imageHorizontalAlignment" : {
          "description" : "Horizontal alignment of the standby image",
          "enum" : [ "left", "center", "right" ]
        },
        "imageDoScale" : {
          "description" : "Scale the background image to fill the screen or not",
          "type" : "boolean"
        },
        "imageVerticalAlginment" : {
          "description" : "Vertical alignment of the standby image",
          "enum" : [ "top", "center", "bottom" ]
        },
        "originalImageResourceId" : {
          "description" : "Resource ID of the original standby screen image",
          "type" : "string"
        },
        "originalImageCropX" : {
          "description" : "X position of the top left corner where the crop starts",
          "type" : "integer"
        },
        "originalImageCropY" : {
          "description" : "Y position of the top left corner where the crop starts",
          "type" : "integer"
        },
        "originalImageCropWidth" : {
          "description" : "The width of the crop",
          "type" : "integer"
        },
        "originalImageCropHeight" : {
          "description" : "The height of the crop",
          "type" : "integer"
        }
      }
    },
    "CloudVotingStatus" : {
      "type" : "object",
      "properties" : {
        "kind" : {
          "description" : "pre, during or post voting",
          "enum" : [ "prevoting", "voting", "postvoting" ]
        },
        "acceptedBallots" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CloudAcceptedVotingBallotReference"
          }
        },
        "result" : {
          "$ref" : "#/definitions/CloudVotingResult"
        }
      }
    },
    "CloudAcceptedVotingBallotReference" : {
      "type" : "object",
      "properties" : {
        "participantId" : {
          "type" : "string"
        },
        "ballotId" : {
          "type" : "string"
        }
      }
    },
    "CloudVotingResult" : {
      "type" : "object",
      "properties" : {
        "kind" : {
          "enum" : [ "PollingResult" ]
        },
        "counters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CloudVotingCounter"
          }
        },
        "batch" : {
          "$ref" : "#/definitions/CloudVotingBatch"
        },
        "hideAllResults" : {
          "type" : "boolean"
        }
      }
    },
    "CloudVotingCounter" : {
      "type" : "object",
      "properties" : {
        "votingChoiceId" : {
          "type" : "string"
        },
        "votingChoiceContentId" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer"
        }
      }
    },
    "CloudVotingBatch" : {
      "type" : "object",
      "properties" : {
        "kind" : {
          "enum" : [ "PublicVotingBatch" ]
        },
        "ballots" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CloudVotingBallot"
          }
        }
      }
    },
    "CloudVotingBallotCommand" : {
      "type" : "object",
      "properties" : {
        "votingContentId" : {
          "type" : "string"
        },
        "votingChoiceId" : {
          "type" : "string"
        },
        "votingChoiceContentId" : {
          "type" : "string"
        },
        "votingId" : {
          "type" : "string"
        },
        "ballotId" : {
          "type" : "string"
        },
        "cloudParticipantId" : {
          "type" : "string"
        }
      }
    },
    "CloudVotingBallot" : {
      "type" : "object",
      "properties" : {
        "votingContentId" : {
          "type" : "string"
        },
        "votingChoiceId" : {
          "type" : "string"
        },
        "votingChoiceContentId" : {
          "type" : "string"
        },
        "votingId" : {
          "type" : "string"
        },
        "ballotId" : {
          "type" : "string"
        },
        "namedParticipantId" : {
          "type" : "string"
        }
      }
    },
    "BatteryChargingDetails" : {
      "description" : "Information of a single battery that is charging",
      "required" : [ "SlotName" ],
      "type" : "object",
      "properties" : {
        "cycles" : {
          "description" : "Number of charge / discharge cycles the battery has been through",
          "type" : "integer"
        },
        "health" : {
          "description" : "Health status indication of the battery",
          "type" : "integer"
        },
        "percentage" : {
          "description" : "Percentage of charge left in the battery",
          "type" : "integer"
        },
        "temperature" : {
          "description" : "Temperature of the battery in degrees celcius",
          "type" : "integer"
        },
        "SlotName" : {
          "description" : "The name of the slot in which the battery is plugged",
          "enum" : [ "slotA", "slotB", "slotC", "slotD", "slotE", "slotF", "slotG", "slotH", "slotI", "slotJ" ]
        },
        "remainingChargeTime" : {
          "description" : "Time remaining until battery is fully charged in minutes",
          "type" : "integer"
        },
        "batterySlotState" : {
          "description" : "Status of the carger slot",
          "enum" : [ "NoBatteryPresent", "NotCharging", "ChargingLow", "ChargingHigh", "FullyCharged", "Error" ]
        }
      }
    },
    "Network8021XSettings" : {
      "type" : "object",
      "properties" : {
        "identity" : {
          "description" : "Username for authentication\nOnly valid for MD5 and PEAP",
          "type" : "string"
        },
        "password" : {
          "description" : "Password for authentication\nOnly valid for MD5 and PEAP",
          "type" : "string"
        },
        "authenticationType" : {
          "description" : "Select the type of authentication",
          "enum" : [ "None", "MD5", "TLS", "PEAP" ]
        },
        "ca" : {
          "description" : "Indicates a ca certificate is present\nOnly valid for TLS and PEAP",
          "type" : "boolean"
        },
        "certificate" : {
          "description" : "Indicates a certificate is present\nOnly valid for TLS",
          "type" : "boolean"
        },
        "privateKey" : {
          "description" : "Indicates a private key is present\nOnly valid for TLS",
          "type" : "boolean"
        },
        "certificateInfo" : {
          "$ref" : "#/definitions/CertificateInfo",
          "description" : "Information about the certificate"
        },
        "caInfo" : {
          "$ref" : "#/definitions/CertificateInfo",
          "description" : "Information about the CA certificate"
        }
      }
    },
    "CloudNextSpeakerCommand" : {
      "required" : [ "participantId" ],
      "type" : "object",
      "properties" : {
        "participantId" : {
          "type" : "string"
        }
      }
    },
    "CloudNextReplyCommand" : {
      "required" : [ "participantId" ],
      "type" : "object",
      "properties" : {
        "participantId" : {
          "type" : "string"
        }
      }
    },
    "CloudAgendaItemIdCommand" : {
      "required" : [ "itemId" ],
      "type" : "object",
      "properties" : {
        "itemId" : {
          "type" : "string"
        }
      }
    },
    "ApiToken" : {
      "description" : "Token used in customer API, consisting of a name and uuid.",
      "required" : [ "name", "uuid" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the token",
          "type" : "string"
        },
        "uuid" : {
          "description" : "Uuid of the token",
          "type" : "string"
        }
      }
    },
    "PublishedMeetingDelegate" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "badgeId" : {
          "type" : "string"
        },
        "memberId" : {
          "type" : "string"
        },
        "role" : {
          "enum" : [ "delegate", "chairperson", "vip" ]
        }
      }
    },
    "PrivateKeyPassword" : {
      "type" : "object",
      "properties" : {
        "password" : {
          "type" : "string"
        }
      }
    },
    "CertificateInfo" : {
      "type" : "object",
      "properties" : {
        "notBefore" : {
          "format" : "date-time",
          "type" : "string"
        },
        "notAfter" : {
          "format" : "date-time",
          "type" : "string"
        }
      }
    },
    "ApiTokens" : {
      "description" : "Array of active API tokens and array of revoked API tokens.",
      "required" : [ "activeTokens", "revokedTokens" ],
      "type" : "object",
      "properties" : {
        "activeTokens" : {
          "description" : "API Tokens which are currently active on the system ",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiToken"
          }
        },
        "revokedTokens" : {
          "description" : "API Tokens which have been revoked",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiToken"
          }
        }
      }
    },
    "ApiTokenName" : {
      "description" : "Name of an API token.",
      "required" : [ "name" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "name of the API token",
          "type" : "string"
        }
      }
    },
    "AudioBasicRoutingConfiguration" : {
      "required" : [ "configuration" ],
      "type" : "object",
      "properties" : {
        "configuration" : {
          "enum" : [ "normal_routing", "distance_conferencing", "distance_conferencing_with_speakers", "external_routing", "dsp_routing" ]
        },
        "interpretationOnDante" : {
          "type" : "boolean"
        }
      }
    },
    "SwitchValue" : {
      "title" : "Root Type for SwitchValue",
      "description" : "Generic on off switch model",
      "type" : "object",
      "properties" : {
        "active" : {
          "type" : "boolean"
        }
      },
      "example" : "{ \"active\" : true }"
    },
    "AudioBasicDynamicsPreset" : {
      "required" : [ "preset" ],
      "type" : "object",
      "properties" : {
        "preset" : {
          "enum" : [ "disabled", "default", "default_no_noisegate", "external_speakers", "external_speaker_no_noisegate" ]
        }
      }
    },
    "AudioBasicDynamicsConfiguration" : {
      "type" : "object",
      "properties" : {
        "compressorThreshold" : {
          "description" : "compressor threshold [unit 0.1dBFS]",
          "type" : "integer"
        },
        "compressorRatio" : {
          "description" : "compressor ratio [unit 0.01]",
          "type" : "integer"
        },
        "compressorAttackTime" : {
          "description" : "compressor attack time [unit µs]",
          "type" : "integer"
        },
        "compressorReleaseTime" : {
          "description" : "compressor release time [unit µs]",
          "type" : "integer"
        },
        "noiseGateThreshold" : {
          "description" : "noise gate threshold [unit 0.1 dBFS]",
          "type" : "integer"
        },
        "noiseGateMinimumGain" : {
          "description" : "noise gate minimum gain [unit 0.1 dB]",
          "type" : "integer"
        },
        "noiseGateAttackTime" : {
          "description" : "noise gate attack time [unit µs]",
          "type" : "integer"
        },
        "noiseGateHoldTime" : {
          "description" : "noise gate hold time [unit µs]",
          "type" : "integer"
        },
        "noiseGateReleaseTime" : {
          "description" : "noise gate release time [unit µs]",
          "type" : "integer"
        },
        "compressorMakeUpGain" : {
          "description" : "make up gain [unit 0.1 dB]",
          "type" : "integer"
        }
      }
    },
    "CloudGenericParticipantCommand" : {
      "required" : [ "participantId" ],
      "type" : "object",
      "properties" : {
        "participantId" : {
          "type" : "string"
        }
      }
    },
    "CloudAddAdHocAgendaItemCommand" : {
      "required" : [ "cloudParticipantId", "addAsChild" ],
      "type" : "object",
      "properties" : {
        "cloudParticipantId" : {
          "type" : "string"
        },
        "previousAgendaItemId" : {
          "type" : "string"
        },
        "addAsChild" : {
          "type" : "boolean"
        },
        "agendaItem" : {
          "$ref" : "#/definitions/AgendaItem"
        }
      }
    },
    "ServiceState" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the service",
          "enum" : [ "Core", "LegacyRestApi", "PlixusCamera", "We", "PlixusCustomerApi" ]
        },
        "state" : {
          "description" : "State of the service",
          "enum" : [ "Running", "Stopped" ]
        }
      }
    },
    "ExternalLanguageChannelList" : {
      "type" : "object",
      "properties" : {
        "channels" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExternalLanguageChannel"
          }
        }
      }
    },
    "MaxChannelsData" : {
      "required" : [ "maxChannels" ],
      "type" : "object",
      "properties" : {
        "maxChannels" : {
          "type" : "integer"
        }
      }
    },
    "RoomTimezone" : {
      "title" : "Root Type for RoomTimezone",
      "description" : "Name of current timezone",
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      },
      "example" : "{\n    \"value\": \"UTC\"\n}"
    },
    "RoomTimezoneError" : {
      "title" : "Root Type for RoomTimezoneError",
      "description" : "Invalid timezone",
      "type" : "object",
      "properties" : {
        "error" : {
          "type" : "string"
        }
      },
      "example" : "{\n    \"error\": \"Invalid timezone.\"\n}"
    },
    "RoomNtpServer" : {
      "title" : "Root Type for RoomNtpServer",
      "description" : "Ntp server ip address.",
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      },
      "example" : "{\n    \"value\": \"pool.ntp.org\"\n}"
    },
    "RoomNtpServerError" : {
      "title" : "Root Type for RoomNtpServerError",
      "description" : "Invalid ntp server address.",
      "type" : "object",
      "properties" : {
        "error" : {
          "type" : "string"
        }
      },
      "example" : "{\n    \"error\": \"Invalid ntp server address.\"\n}"
    },
    "RoomTimezoneChanged" : {
      "title" : "Root Type for RoomTimezoneChanged",
      "description" : "Signal that timezone is changed.",
      "type" : "object",
      "properties" : {
        "timezone" : {
          "type" : "string"
        }
      },
      "example" : "{\n    \"timezone\" : \"UTC\"\n}"
    },
    "RoomNtpServerChanged" : {
      "title" : "Root Type for RoomNtpServerChanged",
      "description" : "Signal that ntp server is changed",
      "type" : "object",
      "properties" : {
        "ntpserver" : {
          "type" : "string"
        }
      },
      "example" : "{\n    \"ntpserver\" : \"pool.ntp.org\"\n}"
    },
    "AdhocMeetingParticipantPresence" : {
      "required" : [ "kind" ],
      "type" : "object",
      "properties" : {
        "kind" : {
          "enum" : [ "local", "absent" ]
        },
        "seatNumber" : {
          "description" : "only relevant when local kind",
          "type" : "integer"
        }
      }
    },
    "NewAdhocMeeting" : {
      "required" : [ "title", "participants" ],
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string"
        },
        "participants" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NewAdhocMeetingParticipant"
          }
        }
      }
    },
    "NewAdhocMeetingParticipant" : {
      "required" : [ "id", "firstName", "lastName", "presence" ],
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "badgeId" : {
          "description" : "optional badge id",
          "type" : "string"
        },
        "presence" : {
          "$ref" : "#/definitions/AdhocMeetingParticipantPresence",
          "description" : "participant presence in the meeting: absent or local"
        }
      }
    },
    "AdhocMeetingAddParticipantAction" : {
      "required" : [ "meetingId", "participant" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "participant" : {
          "$ref" : "#/definitions/NewAdhocMeetingParticipant"
        }
      }
    },
    "AdhocMeetingRemoveParticipantAction" : {
      "required" : [ "meetingId", "participantId" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "participantId" : {
          "type" : "string"
        }
      }
    },
    "AdhocMeetingSetParticipantBadgeAction" : {
      "required" : [ "meetingId", "participantId", "badgeId" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "participantId" : {
          "type" : "string"
        },
        "badgeId" : {
          "type" : "string"
        }
      }
    },
    "AdhocMeetingRemoveParticipantBadgeAction" : {
      "required" : [ "meetingId", "participantId" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "participantId" : {
          "type" : "string"
        }
      }
    },
    "AdhocMeetingSetParticipantNameAction" : {
      "required" : [ "meetingId", "participantId", "firstName", "lastName" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "participantId" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "description" : "    ",
          "type" : "string"
        }
      }
    },
    "AdhocMeetingStartDiscussionAction" : {
      "required" : [ "title", "meetingId" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "title" : {
          "description" : "    ",
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "AdhocMeetingStopDiscussionAction" : {
      "required" : [ "discussionId", "meetingId" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "discussionId" : {
          "description" : "    ",
          "type" : "string"
        }
      }
    },
    "AdhocMeetingSetParticipantPresenceAction" : {
      "required" : [ "participantId", "meetingId", "presence" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "participantId" : {
          "description" : "    ",
          "type" : "string"
        },
        "presence" : {
          "$ref" : "#/definitions/AdhocMeetingParticipantPresence"
        }
      }
    },
    "AdhocMeetingStartVotingAction" : {
      "required" : [ "title", "meetingId", "options" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "title" : {
          "description" : "    ",
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "options" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/VotingOption"
          }
        },
        "hideIndividualResults" : {
          "type" : "boolean"
        },
        "hideResultsDuringVote" : {
          "type" : "boolean"
        }
      }
    },
    "AdhocMeetingStopVotingAction" : {
      "required" : [ "votingId", "meetingId" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "votingId" : {
          "description" : "    ",
          "type" : "string"
        }
      }
    },
    "AdhocMeetingHideVotingResultsAction" : {
      "required" : [ "votingId", "meetingId" ],
      "type" : "object",
      "properties" : {
        "meetingId" : {
          "type" : "string"
        },
        "votingId" : {
          "description" : "    ",
          "type" : "string"
        }
      }
    },
    "AdhocMeetingVotingResult" : {
      "required" : [ "votingId", "global", "individual" ],
      "type" : "object",
      "properties" : {
        "votingId" : {
          "type" : "string"
        },
        "global" : {
          "description" : "",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AdHocMeetingGlobalVotingOptionResult"
          }
        },
        "individual" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AdHocMeetingIndividualVotingOptionResult"
          }
        }
      }
    },
    "AdHocMeetingGlobalVotingOptionResult" : {
      "required" : [ "optionId", "count" ],
      "type" : "object",
      "properties" : {
        "optionId" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer"
        }
      }
    },
    "AdHocMeetingIndividualVotingOptionResult" : {
      "required" : [ "kind", "participantId" ],
      "type" : "object",
      "properties" : {
        "kind" : {
          "enum" : [ "public", "private" ]
        },
        "votingChoiceId" : {
          "description" : "only relevant for public voting result",
          "type" : "string"
        },
        "participantId" : {
          "type" : "string"
        }
      }
    },
    "AdHocMeetingParticipantPresenceChanged" : {
      "required" : [ "participantId", "presence" ],
      "type" : "object",
      "properties" : {
        "participantId" : {
          "type" : "string"
        },
        "presence" : {
          "$ref" : "#/definitions/AdhocMeetingParticipantPresence"
        }
      }
    },
    "AudioAdvancedConfiguration" : {
      "description" : "Advanced audio configuration",
      "required" : [ "id" ],
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "UUID of the advanced audio configuration",
          "type" : "string"
        },
        "active" : {
          "description" : "Is the advanced audio configuration active or not?",
          "type" : "boolean"
        },
        "userDefined" : {
          "description" : "Is this a user-defined advanced audio configuration?",
          "type" : "boolean"
        },
        "name" : {
          "description" : "Name of the advanced audio configuration",
          "type" : "string"
        }
      },
      "example" : {
        "id" : "1e474c86-93bc-4d9e-9894-42dd0559bf15",
        "name" : "Very fancy configuration",
        "userDefined" : true,
        "active" : false
      }
    },
    "AudioAdvancedConfigurationRemoved" : {
      "description" : "Event parameters when an advanced audio configuration was removed",
      "required" : [ "id" ],
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "UUID of the advanced audio configuration which was removed",
          "type" : "string"
        }
      }
    },
    "RoomLayoutId" : {
      "required" : [ "id", "contentId" ],
      "type" : "object",
      "properties" : {
        "id" : {
          "description" : "unique identifier",
          "type" : "string"
        },
        "contentId" : {
          "type" : "string"
        }
      }
    },
    "Dimensions" : {
      "required" : [ "width", "height" ],
      "type" : "object",
      "properties" : {
        "width" : {
          "type" : "integer"
        },
        "height" : {
          "type" : "integer"
        }
      }
    },
    "AudioAdvancedConfigurationCreate" : {
      "description" : "Post parameters when creating an advanced audio configuration",
      "required" : [ "name" ],
      "type" : "object",
      "properties" : {
        "name" : {
          "description" : "Name of the advanced audio configuration to be created",
          "type" : "string"
        }
      }
    },
    "AdhocMeetingParticipant" : {
      "required" : [ "id", "firstName", "lastName", "presence" ],
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "badgeId" : {
          "description" : "optional badge id",
          "type" : "string"
        },
        "presence" : {
          "$ref" : "#/definitions/AdhocMeetingParticipantPresence",
          "description" : "participant presence in the meeting: absent or local"
        }
      }
    },
    "AdhocMeetingParticipants" : {
      "type" : "object",
      "properties" : {
        "participants" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AdhocMeetingParticipant"
          }
        }
      }
    },
    "AdhocMeeting" : {
      "required" : [ "title", "participants", "id" ],
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string"
        },
        "participants" : {
          "$ref" : "#/definitions/AdhocMeetingParticipants"
        },
        "id" : {
          "type" : "string"
        }
      }
    }
  },
  "tags" : [ {
    "name" : "Notification",
    "description" : "With the Notification module you can subscribe to or unscribe from one or more events. By default you are *subscribed to all events*. If some event information is not relevant for your system, you can unsubscribe from these modules using the unsubscribe command.\n\nThe REST API does not allow to send messages from the server-side to the client-side by default. Therefore the Plixus ERS API uses **long polling** to send messages. This creates a connection between client and server that is kept open for a longer period of time. Over this connection, the server can then send information when and if it is available. When an event occurs this results in a **HTTP 200 OK**, when there is no event this results in a **HTTP 408 Request-Timeout**.\n"
  }, {
    "name" : "Events",
    "description" : "This is an exhaustive list of all events that can occur across all modules. All these events\ngenerate metadata. With the Notification module you can subscribe to these events.\n"
  }, {
    "name" : "Resources",
    "description" : "With the resources module you can manage all your resources, you can get an overview of all\nresources or upload and remove resources. A typical example of a resource is the background image\nyou use for the room layout.\n"
  }, {
    "name" : "Users",
    "description" : "The User module contains basic user management features. The user model consists of three different **user roles**:\n* Technician\n* Operator\n* Chairman\n\nEach role has specific **permissions** that determine what the user can do in the conference system. Each user can have one or more user roles. For example a technician has to permission to create and edit room layouts, while an operator or chairman only has the permission to view the room layout.\n\nBesides the user roles and permissions, you can use this module to **authenticate** users by assigning a password to this user.\n"
  }, {
    "name" : "System",
    "description" : "Use the System module to configure system wide settings such as:\n* IP settigns\n* Date and time format\n* Loglevel\n\nIn the System module you can also find the calls to manage your software licenses to activate one or more features.\n"
  }, {
    "name" : "Room",
    "description" : "With the room module you can manage your meeting room. This module contains calls to initialize the units, create and remove desks in booths. \n\nYou can also set the **capabilities** of a seat. A capability is a functionality that is possible and active on that seat. The capability is defined by the type of unit. A couple of examples of capabilities are *voting, discussion, interpretation and video*. Besides the capabilities, you can also set the **role** of the seat. A seat can have a:\n* Delegate\n* Chairman\n* VIP role. \n\nThe chairman and VIP role have additional functionalities:\n* Chairman: can always activate its microphone and has prior/next and start/stop vote function\n* VIP: has the same speech priority as a chairman but without the prior/next and start/stop vote function\n\n\n![alt text](https://raw.githubusercontent.com/televic-conference/plixus-api-docs/master/img/RoomModule.jpg \"Room elements\")\n"
  }, {
    "name" : "Audio",
    "description" : "With the Audio module you can **set**, **edit** and **retrieve** all **general (sytem wide) audio settings**. In the Audio module you can for example find a call to change the default volume of all channel selectors, present in the room. \nUse the Audio module to retrieve the details of the active DSP configuration and use the *Change the active dsp configuration for the room* call to change these DSP settings.\n"
  }, {
    "name" : "Video",
    "description" : "Use the Video module to route the video inputs and outputs to one of the 6 available **video streams**.  To route a video stream you need to set the video input onto one of the video stream and the link a video output group to the same video stream.\n\nWith this module you can also make video streams (un)available for delegates. Delegates can only select the streams that are made availalable for delegates on their multimedia unit.\n"
  }, {
    "name" : "VideoConfigurations",
    "description" : "The VideoConfigurations module is resposible for creating, editing and storing video routing configurations. You can create new configurations providing the input groups, video streams and output groups. Video configurations have the following parameters:\n* **Name**: the name of the video configuration\n* **Description**: a short description of the configuration\n* **Locked**: protect configuration by locking it. You cannot edit locked configurations. \n* **Input groups**: a group of video input that is available in your Plixus system. There are three types of video input:\n * *Normal* : assign a Video-IN box to one of the available video streams. The content is then always available on the multimedia units.\n \n * *Request* : this group contains the video input from Video-IN boxes combined with a Video-REQUEST panel. The video of the person who presses the request button on their Video-REQUEST (V-REQ)panel is then routed to the video stream. When no one presses the V-REQ, the backup video source is shown. You can only have **one Request group**\n \n * *Talking heads* : contains the video input from units with a webcam. The webcam of the unit becomes active when the delegate activates the microphone. The assigned video stream then displays the video content of the webcam. When no microphone is active you can set a backup video source.\n \n* **Video streams**: the 6 available video streams with its routed input and output groups and whether it is enabled or not.  \n* **Output groups** (selectorGroups): displays the video source from the routed video input group.\n"
  }, {
    "name" : "Interpretation",
    "description" : "Use the Interpretation module to retrieve settings from the active configuration, such as the list of listereners per language channel or the current state of all desks. There is also an option to change some settings such as the name of the floor channel or the language list of the room.\n"
  }, {
    "name" : "InterpretationConfigurations",
    "description" : "The InterpretationConfigurations module manages the interpretation configurations. With this module you can create new configurations, update exisitng configurations or delete configurations. An interpretation configuration contains the following parameters:\n* **Name**: name of the configuration \n\n* **Description**: a short description of the configuration\n* **Locked**: lock a confguration. You cannot modify channels, properties and desk configurations of the locked configuration\n* **Enable Audience Indication**: show the amount of units listening to the interpretation \n* **Audience Indication Update Interval**: time interval to update the audience indication \n* **IntraBoothConfiguration**: the desk configuration with the microphoen mode between the desks \n* **interBoothInterpretationMode**: the microphone mode between booths \n* **Enable Slow down**: activate the *Slow down* function  \n* **Channels**: the languages contained in this configuration with the routing and the booths \n* **deskConfigurations**: configuration of each desk inside the booth, states the relays and the B and C channel of that desk\n"
  }, {
    "name" : "Discussion",
    "description" : "The Discussion module contains the operator functionality of the API. You can:\n* Retrieve the **microphone state** of every microphone\n\n* Manage the **default conference settings** of the room such as the microphone mode, microphone activation type and the color of the microphone LED for different microphone states\n\n* View and manage **speaker and request lists**\n"
  }, {
    "name" : "Intercom",
    "description" : "With the Intercom module you can use the Intercom functionality of your conference system. In this module you can find calls to: \n* See which seats and booth have intercom enabled\n* Enable and disable intertcom\n* Request, accept, start and end the intercom conversation using the seat id\n"
  }, {
    "name" : "Recording",
    "description" : "Use the Recording module to manage the recording on your central unit. This module contains calls to:\n* **Start**, **pause**, **resume** and **stop** the recording\n\n* View and change the **recording settings**\n * Where to store the recording\n \n * Automatically **split** the recording in seperate files after a defined amount of time\n \n * **Prefix** and **suffix** for the file name\n \n * A list of the **recorded channels**\n"
  }, {
    "name" : "Messaging",
    "description" : "With the Message module you can **send messages** to seats and booths. For each message you need to define:\n* The message itself\n\n* If you want to play a sound for new messages\n\n* Which seats and booths to send the messages to\n"
  }, {
    "name" : "Meeting",
    "description" : "With the Meeting module you can manage some basic meetings functions of your conference system. For the actual creation and configuration of your meeting such as the agenda items, you need an external device. The Meeting module contains calls to: \n* Change **meeting states** (Schedule, Prepare, Start, Pause, Resule and End)\n* Add and remove **delegates** from the meeting\n\n\n\n![alt text](https://raw.githubusercontent.com/televic-conference/plixus-api-docs/master/img/MeetingStates.jpg \"Meeting States\")\n"
  }, {
    "name" : "Voting",
    "description" : "With the Voting module you can do some basic management of voting session. A voting session has the following parameters:\n\n* **Id**: unique identifier\n\n* **State**: state of the voting session, this can be **scheduled**, **running**, **paused** or **ended**\n* **Start time**: the start date and time of the session\n* **End time**: the end date and time of the session\n* **Votes**: the voting results for each seat\n* **Voting options**: the different options the meeting participants can choose from. For each voting option you can define the number (defines where the option is shown on the unit), give a description, define a color and select wheter it is possible to abstain\n* **Title**: the title of the voting session\n"
  }, {
    "name" : "Buttons",
    "description" : "You can use the Buttons module to manage all the buttons inside your room.\n\n> **Warning: changing buttons using the API happens independent of the system logic, therefore API calls may not always be executed.** This is because CoCon controls certain buttons during specific operations such as voting sessions. When the session is finished the button becomes available.\n"
  }, {
    "name" : "Leds",
    "description" : "You can use the Buttons module to manage all the buttons inside your room.\n\n> **Warning: changing buttons using the API happens independent of the system logic, therefore API calls may not always be executed.** This is because CoCon controls certain LEDs during specific operations such as voting sessions. When the session is finished the LEDs become available.\n"
  }, {
    "name" : "Diagnostics",
    "description" : "Description about diagnostics module"
  }, {
    "name" : "Devices",
    "description" : "Description about devices module"
  }, {
    "name" : "WirelessAccessPoints",
    "description" : "This module can be used to retrieve information from and control the behavior of the Wireless Access Points that are connected to the system."
  }, {
    "name" : "WirelessChannels",
    "description" : "This module can be used to retrieve information about the available wireless channels, as well as to enable and disable these channels"
  }, {
    "name" : "WirelessAuthentication",
    "description" : "The WirelessAuthentication module allows to configure the authentication method used by the wireless access point"
  }, {
    "name" : "InterpretationExternal",
    "description" : "Module for configuration of systems which only support interpretation coming from external sources"
  }, {
    "name" : "Network8021X",
    "description" : "802.1X client support"
  }, {
    "name" : "AudioBasic",
    "description" : "Basic audio configuration"
  }, {
    "name" : "AudioAdvanced",
    "description" : "Advanced audio configuration"
  } ]
}